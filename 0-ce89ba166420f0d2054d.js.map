{"version":3,"sources":["webpack:///0-ce89ba166420f0d2054d.js","webpack:///./~/raven-js/src/configError.js","webpack:///./~/raven-js/src/console.js","webpack:///./~/raven-js/src/raven.js","webpack:///./~/raven-js/src/singleton.js","webpack:///./~/raven-js/src/utils.js","webpack:///./~/raven-js/vendor/TraceKit/tracekit.js","webpack:///./~/raven-js/vendor/json-stringify-safe/stringify.js","webpack:///./~/raven-js/vendor/md5/md5.js"],"names":["webpackJsonp","457","module","exports","RavenConfigError","message","this","name","prototype","Error","constructor","458","__webpack_require__","utils","wrapMethod","console","level","callback","originalConsoleLevel","originalConsole","sentryLevel","args","slice","call","arguments","msg","safeJoin","data","logger","extra","Function","apply","459","global","now","Date","keepOriginalCallback","original","isFunction","Raven","_hasJSON","JSON","stringify","_hasDocument","isUndefined","_document","_hasNavigator","_navigator","_lastCapturedException","_lastData","_lastEventId","_globalServer","_globalKey","_globalProject","_globalContext","_globalOptions","release","_window","SENTRY_RELEASE","id","ignoreErrors","ignoreUrls","whitelistUrls","includePaths","headers","collectWindowErrors","captureUnhandledRejections","maxMessageLength","maxUrlLength","stackTraceLimit","autoBreadcrumbs","instrument","sampleRate","sanitizeKeys","_fetchDefaults","method","keepalive","referrerPolicy","supportsReferrerPolicy","_ignoreOnError","_isRavenInstalled","_originalErrorStackTraceLimit","_originalConsole","_originalConsoleMethods","_plugins","_startTime","_wrappedBuiltIns","_breadcrumbs","_lastCapturedEvent","_keypressTimeout","_location","location","_lastHref","href","_resetBackoff","TraceKit","md5","isErrorEvent","isDOMError","isDOMException","isError","isObject","isPlainObject","isString","isArray","isEmptyObject","each","objectMerge","truncate","objectFrozen","hasKey","joinRegExp","urlencode","uuid4","htmlTreeAsString","isSameException","isSameStacktrace","parseUrl","fill","supportsFetch","serializeKeysForMessage","serializeException","sanitize","wrapConsoleMethod","dsnKeys","split","dsnPattern","window","self","document","navigator","VERSION","debug","config","dsn","options","_logDebug","globalOptions","key","value","setDSN","push","length","maxBreadcrumbs","Math","max","min","autoBreadcrumbDefaults","xhr","dom","sentry","toString","instrumentDefaults","tryCatch","install","isSetup","report","subscribe","_handleOnErrorStackInfo","_attachPromiseRejectionHandler","_patchFunctionToString","_instrumentTryCatch","_instrumentBreadcrumbs","_drainPlugins","uri","_parseDSN","lastSlash","path","lastIndexOf","substr","_dsn","user","_globalSecret","pass","_getGlobalServer","_globalEndpoint","context","func","wrap","_before","wrapped","i","deep","e","_ignoreNextOnError","captureException","undefined","__raven__","__raven_wrapper__","property","__orig__","uninstall","_detachPromiseRejectionHandler","_unpatchFunctionToString","_restoreBuiltIns","_restoreConsole","_promiseRejectionHandler","event","reason","mechanism","type","handled","bind","addEventListener","removeEventListener","ex","trimHeadFrames","error","captureMessage","stacktrace","_getCaptureExceptionOptionsFromPlainObject","stack","computeStackTrace","_handleStackInfo","ex1","currentOptions","exKeys","Object","keys","sort","fingerprint","__serialized__","test","initialCall","fileurl","url","frames","_prepareFrames","reverse","_send","captureBreadcrumb","obj","crumb","timestamp","breadcrumbCallback","result","shift","addPlugin","plugin","pluginArgs","setUserContext","setExtraContext","_mergeContext","setTagsContext","tags","clearContext","getContext","parse","setEnvironment","environment","setRelease","setDataCallback","dataCallback","setBreadcrumbCallback","setShouldSendCallback","shouldSendCallback","setTransport","transport","lastException","lastEventId","ravenNotConfiguredError","afterLoad","RavenConfig","showReportDialog","assign","eventId","encode","encodeURIComponent","encodedOptions","email","globalServer","script","createElement","async","src","join","head","body","appendChild","setTimeout","_triggerEvent","eventType","evt","toUpperCase","createEvent","initEvent","createEventObject","dispatchEvent","fireEvent","toLowerCase","_breadcrumbEventHandler","evtName","target","category","_keypressEventHandler","debounceDuration","tagName","isContentEditable","timeout","clearTimeout","_captureUrlChange","from","to","parsedLoc","parsedTo","parsedFrom","protocol","host","relative","_originalFunctionToString","wrapTimeFn","orig","fn","t","Array","originalCallback","function","wrapEventTarget","proto","hasOwnProperty","capture","secure","handleEvent","handler","err","before","clickHandler","keypressHandler","wrappedBuiltIns","requestAnimationFrame","cb","eventTargets","wrapProp","prop","xhrproto","XMLHttpRequest","origOpen","indexOf","__raven_xhr","status_code","origSend","onreadystatechangeHandler","readyState","status","props","j","onreadystatechange","origFetch","fetchInput","Request","fetchData","then","response","attachEvent","chrome","isChromePackagedApp","app","runtime","hasPushAndReplaceState","history","pushState","replaceState","oldOnPopState","onpopstate","currentHref","historyReplacementFunction","origHistFunction","log","consoleMethodCallback","_","builtin","installer","concat","str","m","exec","allowSecretKey","port","stackInfo","_processException","lineno","frame","_normalizeFrame","in_app","stackInfoUrl","normalized","filename","line","colno","column","prefixedMessage","exception","values","transaction","_trimPacket","request","Referer","breadcrumbs","_trimBreadcrumbs","urlProp","urlProps","_getHttpData","httpData","userAgent","User-Agent","referrer","_backoffDuration","_backoffStart","_shouldBackoff","_isRepeatData","current","last","_setBackoffState","retry","get","getResponseHeader","parseInt","baseData","project","platform","serverName","server_name","_sanitizeData","forEach","random","_sendProcessedPayload","_getUuid","allowDuplicates","event_id","auth","sentry_version","sentry_client","sentry_key","sentry_secret","_makeRequest","onSuccess","onError","opts","evaluatedHeaders","evaluatedFetchParameters","_evaluateHash","fetchParameters","defaultFetchOptions","fetchOptions","fetch","ok","hasCORS","XDomainRequest","replace","onload","onerror","open","setRequestHeader","send","hash","evaluated","setUser","setReleaseContext","213","RavenConstructor","_Raven","noConflict","Client","144","what","supportsErrorEvent","ErrorEvent","supportsDOMError","DOMError","supportsDOMException","DOMException","Headers","Response","supportsPromiseRejectionEvent","PromiseRejectionEvent","wrappedCallback","normalizedData","obj1","obj2","isFrozen","object","patterns","pattern","sources","len","source","RegExp","o","pairs","match","query","fragment","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","c","r","elem","nextStr","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","separator","sepLength","htmlElementAsString","parentNode","className","classes","attr","attrWhitelist","getAttribute","isOnlyOneTruthy","a","b","isBothUndefined","ex2","stack1","stack2","frames1","frames2","replacement","track","input","delimiter","output","String","utf8Length","encodeURI","jsonSize","serializeValue","maxLength","serializeObject","depth","reduce","acc","map","val","maxSize","MAX_SERIALIZE_EXCEPTION_DEPTH","MAX_SERIALIZE_EXCEPTION_SIZE","serialized","filter","MAX_SERIALIZE_KEYS_LENGTH","usedKeys","sanitizeWorker","workerInput","k","sanitizeRegExp","sanitizeMask","safeInput","o_O","460","getLocationHref","getLocationOrigin","origin","hostname","_slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","installGlobalHandler","handlers","unsubscribe","splice","unsubscribeAll","uninstallGlobalHandler","notifyHandlers","isWindowError","inner","traceKitWindowOnError","lineNo","colNo","lastExceptionStack","augmentStackTraceWithInitialElement","processLastException","groups","_oldOnerrorHandler","_onErrorHandlerInstalled","_lastExceptionStack","_lastArgs","lastArgs","rethrow","incomplete","computeStackTraceFromStackProp","submatch","parts","element","winjs","gecko","geckoEval","chromeEval","lines","isNative","isEval","columnNumber","responseText","sourceMaps","sourceMapAddress","charAt","initial","unshift","partial","computeStackTraceByWalkingCallerChain","item","functionName","funcs","recursion","curr","caller","substring","sourceURL","fileName","lineNumber","description","214","haystack","needle","replacer","spaces","cycleReplacer","serializer","stringifyError","thisPos","Infinity","getSerialize","461","safeAdd","x","y","lsw","msw","bitRotateLeft","cnt","md5cmn","q","s","md5ff","d","md5gg","md5hh","md5ii","binlMD5","olda","oldb","oldc","oldd","binl2rstr","length32","fromCharCode","rstr2binl","length8","charCodeAt","rstrMD5","rstrHMACMD5","bkey","ipad","opad","rstr2hex","hexTab","str2rstrUTF8","unescape","rawMD5","hexMD5","rawHMACMD5","hexHMACMD5","string","raw"],"mappings":"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","file":"0-ce89ba166420f0d2054d.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 457:\n/***/ (function(module, exports) {\n\n\tfunction RavenConfigError(message) {\n\t  this.name = 'RavenConfigError';\n\t  this.message = message;\n\t}\n\tRavenConfigError.prototype = new Error();\n\tRavenConfigError.prototype.constructor = RavenConfigError;\n\t\n\tmodule.exports = RavenConfigError;\n\n\n/***/ }),\n\n/***/ 458:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar utils = __webpack_require__(144);\n\t\n\tvar wrapMethod = function(console, level, callback) {\n\t  var originalConsoleLevel = console[level];\n\t  var originalConsole = console;\n\t\n\t  if (!(level in console)) {\n\t    return;\n\t  }\n\t\n\t  var sentryLevel = level === 'warn' ? 'warning' : level;\n\t\n\t  console[level] = function() {\n\t    var args = [].slice.call(arguments);\n\t\n\t    var msg = utils.safeJoin(args, ' ');\n\t    var data = {level: sentryLevel, logger: 'console', extra: {arguments: args}};\n\t\n\t    if (level === 'assert') {\n\t      if (args[0] === false) {\n\t        // Default browsers message\n\t        msg =\n\t          'Assertion failed: ' + (utils.safeJoin(args.slice(1), ' ') || 'console.assert');\n\t        data.extra.arguments = args.slice(1);\n\t        callback && callback(msg, data);\n\t      }\n\t    } else {\n\t      callback && callback(msg, data);\n\t    }\n\t\n\t    // this fails for some browsers. :(\n\t    if (originalConsoleLevel) {\n\t      // IE9 doesn't allow calling apply on console functions directly\n\t      // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193\n\t      Function.prototype.apply.call(originalConsoleLevel, originalConsole, args);\n\t    }\n\t  };\n\t};\n\t\n\tmodule.exports = {\n\t  wrapMethod: wrapMethod\n\t};\n\n\n/***/ }),\n\n/***/ 459:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*global XDomainRequest:false */\n\t\n\tvar TraceKit = __webpack_require__(460);\n\tvar stringify = __webpack_require__(214);\n\tvar md5 = __webpack_require__(461);\n\tvar RavenConfigError = __webpack_require__(457);\n\t\n\tvar utils = __webpack_require__(144);\n\tvar isErrorEvent = utils.isErrorEvent;\n\tvar isDOMError = utils.isDOMError;\n\tvar isDOMException = utils.isDOMException;\n\tvar isError = utils.isError;\n\tvar isObject = utils.isObject;\n\tvar isPlainObject = utils.isPlainObject;\n\tvar isUndefined = utils.isUndefined;\n\tvar isFunction = utils.isFunction;\n\tvar isString = utils.isString;\n\tvar isArray = utils.isArray;\n\tvar isEmptyObject = utils.isEmptyObject;\n\tvar each = utils.each;\n\tvar objectMerge = utils.objectMerge;\n\tvar truncate = utils.truncate;\n\tvar objectFrozen = utils.objectFrozen;\n\tvar hasKey = utils.hasKey;\n\tvar joinRegExp = utils.joinRegExp;\n\tvar urlencode = utils.urlencode;\n\tvar uuid4 = utils.uuid4;\n\tvar htmlTreeAsString = utils.htmlTreeAsString;\n\tvar isSameException = utils.isSameException;\n\tvar isSameStacktrace = utils.isSameStacktrace;\n\tvar parseUrl = utils.parseUrl;\n\tvar fill = utils.fill;\n\tvar supportsFetch = utils.supportsFetch;\n\tvar supportsReferrerPolicy = utils.supportsReferrerPolicy;\n\tvar serializeKeysForMessage = utils.serializeKeysForMessage;\n\tvar serializeException = utils.serializeException;\n\tvar sanitize = utils.sanitize;\n\t\n\tvar wrapConsoleMethod = __webpack_require__(458).wrapMethod;\n\t\n\tvar dsnKeys = 'source protocol user pass host port path'.split(' '),\n\t  dsnPattern = /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w\\.-]+)(?::(\\d+))?(\\/.*)/;\n\t\n\tfunction now() {\n\t  return +new Date();\n\t}\n\t\n\t// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\n\tvar _window =\n\t  typeof window !== 'undefined'\n\t    ? window\n\t    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\tvar _document = _window.document;\n\tvar _navigator = _window.navigator;\n\t\n\tfunction keepOriginalCallback(original, callback) {\n\t  return isFunction(callback)\n\t    ? function(data) {\n\t        return callback(data, original);\n\t      }\n\t    : callback;\n\t}\n\t\n\t// First, check for JSON support\n\t// If there is no JSON, we no-op the core features of Raven\n\t// since JSON is required to encode the payload\n\tfunction Raven() {\n\t  this._hasJSON = !!(typeof JSON === 'object' && JSON.stringify);\n\t  // Raven can run in contexts where there's no document (react-native)\n\t  this._hasDocument = !isUndefined(_document);\n\t  this._hasNavigator = !isUndefined(_navigator);\n\t  this._lastCapturedException = null;\n\t  this._lastData = null;\n\t  this._lastEventId = null;\n\t  this._globalServer = null;\n\t  this._globalKey = null;\n\t  this._globalProject = null;\n\t  this._globalContext = {};\n\t  this._globalOptions = {\n\t    // SENTRY_RELEASE can be injected by https://github.com/getsentry/sentry-webpack-plugin\n\t    release: _window.SENTRY_RELEASE && _window.SENTRY_RELEASE.id,\n\t    logger: 'javascript',\n\t    ignoreErrors: [],\n\t    ignoreUrls: [],\n\t    whitelistUrls: [],\n\t    includePaths: [],\n\t    headers: null,\n\t    collectWindowErrors: true,\n\t    captureUnhandledRejections: true,\n\t    maxMessageLength: 0,\n\t    // By default, truncates URL values to 250 chars\n\t    maxUrlLength: 250,\n\t    stackTraceLimit: 50,\n\t    autoBreadcrumbs: true,\n\t    instrument: true,\n\t    sampleRate: 1,\n\t    sanitizeKeys: []\n\t  };\n\t  this._fetchDefaults = {\n\t    method: 'POST',\n\t    keepalive: true,\n\t    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n\t    // https://caniuse.com/#feat=referrer-policy\n\t    // It doesn't. And it throw exception instead of ignoring this parameter...\n\t    // REF: https://github.com/getsentry/raven-js/issues/1233\n\t    referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n\t  };\n\t  this._ignoreOnError = 0;\n\t  this._isRavenInstalled = false;\n\t  this._originalErrorStackTraceLimit = Error.stackTraceLimit;\n\t  // capture references to window.console *and* all its methods first\n\t  // before the console plugin has a chance to monkey patch\n\t  this._originalConsole = _window.console || {};\n\t  this._originalConsoleMethods = {};\n\t  this._plugins = [];\n\t  this._startTime = now();\n\t  this._wrappedBuiltIns = [];\n\t  this._breadcrumbs = [];\n\t  this._lastCapturedEvent = null;\n\t  this._keypressTimeout;\n\t  this._location = _window.location;\n\t  this._lastHref = this._location && this._location.href;\n\t  this._resetBackoff();\n\t\n\t  // eslint-disable-next-line guard-for-in\n\t  for (var method in this._originalConsole) {\n\t    this._originalConsoleMethods[method] = this._originalConsole[method];\n\t  }\n\t}\n\t\n\t/*\n\t * The core Raven singleton\n\t *\n\t * @this {Raven}\n\t */\n\t\n\tRaven.prototype = {\n\t  // Hardcode version string so that raven source can be loaded directly via\n\t  // webpack (using a build step causes webpack #1617). Grunt verifies that\n\t  // this value matches package.json during build.\n\t  //   See: https://github.com/getsentry/raven-js/issues/465\n\t  VERSION: '3.26.4',\n\t\n\t  debug: false,\n\t\n\t  TraceKit: TraceKit, // alias to TraceKit\n\t\n\t  /*\n\t     * Configure Raven with a DSN and extra options\n\t     *\n\t     * @param {string} dsn The public Sentry DSN\n\t     * @param {object} options Set of global options [optional]\n\t     * @return {Raven}\n\t     */\n\t  config: function(dsn, options) {\n\t    var self = this;\n\t\n\t    if (self._globalServer) {\n\t      this._logDebug('error', 'Error: Raven has already been configured');\n\t      return self;\n\t    }\n\t    if (!dsn) return self;\n\t\n\t    var globalOptions = self._globalOptions;\n\t\n\t    // merge in options\n\t    if (options) {\n\t      each(options, function(key, value) {\n\t        // tags and extra are special and need to be put into context\n\t        if (key === 'tags' || key === 'extra' || key === 'user') {\n\t          self._globalContext[key] = value;\n\t        } else {\n\t          globalOptions[key] = value;\n\t        }\n\t      });\n\t    }\n\t\n\t    self.setDSN(dsn);\n\t\n\t    // \"Script error.\" is hard coded into browsers for errors that it can't read.\n\t    // this is the result of a script being pulled in from an external domain and CORS.\n\t    globalOptions.ignoreErrors.push(/^Script error\\.?$/);\n\t    globalOptions.ignoreErrors.push(/^Javascript error: Script error\\.? on line 0$/);\n\t\n\t    // join regexp rules into one big rule\n\t    globalOptions.ignoreErrors = joinRegExp(globalOptions.ignoreErrors);\n\t    globalOptions.ignoreUrls = globalOptions.ignoreUrls.length\n\t      ? joinRegExp(globalOptions.ignoreUrls)\n\t      : false;\n\t    globalOptions.whitelistUrls = globalOptions.whitelistUrls.length\n\t      ? joinRegExp(globalOptions.whitelistUrls)\n\t      : false;\n\t    globalOptions.includePaths = joinRegExp(globalOptions.includePaths);\n\t    globalOptions.maxBreadcrumbs = Math.max(\n\t      0,\n\t      Math.min(globalOptions.maxBreadcrumbs || 100, 100)\n\t    ); // default and hard limit is 100\n\t\n\t    var autoBreadcrumbDefaults = {\n\t      xhr: true,\n\t      console: true,\n\t      dom: true,\n\t      location: true,\n\t      sentry: true\n\t    };\n\t\n\t    var autoBreadcrumbs = globalOptions.autoBreadcrumbs;\n\t    if ({}.toString.call(autoBreadcrumbs) === '[object Object]') {\n\t      autoBreadcrumbs = objectMerge(autoBreadcrumbDefaults, autoBreadcrumbs);\n\t    } else if (autoBreadcrumbs !== false) {\n\t      autoBreadcrumbs = autoBreadcrumbDefaults;\n\t    }\n\t    globalOptions.autoBreadcrumbs = autoBreadcrumbs;\n\t\n\t    var instrumentDefaults = {\n\t      tryCatch: true\n\t    };\n\t\n\t    var instrument = globalOptions.instrument;\n\t    if ({}.toString.call(instrument) === '[object Object]') {\n\t      instrument = objectMerge(instrumentDefaults, instrument);\n\t    } else if (instrument !== false) {\n\t      instrument = instrumentDefaults;\n\t    }\n\t    globalOptions.instrument = instrument;\n\t\n\t    TraceKit.collectWindowErrors = !!globalOptions.collectWindowErrors;\n\t\n\t    // return for chaining\n\t    return self;\n\t  },\n\t\n\t  /*\n\t     * Installs a global window.onerror error handler\n\t     * to capture and report uncaught exceptions.\n\t     * At this point, install() is required to be called due\n\t     * to the way TraceKit is set up.\n\t     *\n\t     * @return {Raven}\n\t     */\n\t  install: function() {\n\t    var self = this;\n\t    if (self.isSetup() && !self._isRavenInstalled) {\n\t      TraceKit.report.subscribe(function() {\n\t        self._handleOnErrorStackInfo.apply(self, arguments);\n\t      });\n\t\n\t      if (self._globalOptions.captureUnhandledRejections) {\n\t        self._attachPromiseRejectionHandler();\n\t      }\n\t\n\t      self._patchFunctionToString();\n\t\n\t      if (self._globalOptions.instrument && self._globalOptions.instrument.tryCatch) {\n\t        self._instrumentTryCatch();\n\t      }\n\t\n\t      if (self._globalOptions.autoBreadcrumbs) self._instrumentBreadcrumbs();\n\t\n\t      // Install all of the plugins\n\t      self._drainPlugins();\n\t\n\t      self._isRavenInstalled = true;\n\t    }\n\t\n\t    Error.stackTraceLimit = self._globalOptions.stackTraceLimit;\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Set the DSN (can be called multiple time unlike config)\n\t     *\n\t     * @param {string} dsn The public Sentry DSN\n\t     */\n\t  setDSN: function(dsn) {\n\t    var self = this,\n\t      uri = self._parseDSN(dsn),\n\t      lastSlash = uri.path.lastIndexOf('/'),\n\t      path = uri.path.substr(1, lastSlash);\n\t\n\t    self._dsn = dsn;\n\t    self._globalKey = uri.user;\n\t    self._globalSecret = uri.pass && uri.pass.substr(1);\n\t    self._globalProject = uri.path.substr(lastSlash + 1);\n\t\n\t    self._globalServer = self._getGlobalServer(uri);\n\t\n\t    self._globalEndpoint =\n\t      self._globalServer + '/' + path + 'api/' + self._globalProject + '/store/';\n\t\n\t    // Reset backoff state since we may be pointing at a\n\t    // new project/server\n\t    this._resetBackoff();\n\t  },\n\t\n\t  /*\n\t     * Wrap code within a context so Raven can capture errors\n\t     * reliably across domains that is executed immediately.\n\t     *\n\t     * @param {object} options A specific set of options for this context [optional]\n\t     * @param {function} func The callback to be immediately executed within the context\n\t     * @param {array} args An array of arguments to be called with the callback [optional]\n\t     */\n\t  context: function(options, func, args) {\n\t    if (isFunction(options)) {\n\t      args = func || [];\n\t      func = options;\n\t      options = {};\n\t    }\n\t\n\t    return this.wrap(options, func).apply(this, args);\n\t  },\n\t\n\t  /*\n\t     * Wrap code within a context and returns back a new function to be executed\n\t     *\n\t     * @param {object} options A specific set of options for this context [optional]\n\t     * @param {function} func The function to be wrapped in a new context\n\t     * @param {function} _before A function to call before the try/catch wrapper [optional, private]\n\t     * @return {function} The newly wrapped functions with a context\n\t     */\n\t  wrap: function(options, func, _before) {\n\t    var self = this;\n\t    // 1 argument has been passed, and it's not a function\n\t    // so just return it\n\t    if (isUndefined(func) && !isFunction(options)) {\n\t      return options;\n\t    }\n\t\n\t    // options is optional\n\t    if (isFunction(options)) {\n\t      func = options;\n\t      options = undefined;\n\t    }\n\t\n\t    // At this point, we've passed along 2 arguments, and the second one\n\t    // is not a function either, so we'll just return the second argument.\n\t    if (!isFunction(func)) {\n\t      return func;\n\t    }\n\t\n\t    // We don't wanna wrap it twice!\n\t    try {\n\t      if (func.__raven__) {\n\t        return func;\n\t      }\n\t\n\t      // If this has already been wrapped in the past, return that\n\t      if (func.__raven_wrapper__) {\n\t        return func.__raven_wrapper__;\n\t      }\n\t    } catch (e) {\n\t      // Just accessing custom props in some Selenium environments\n\t      // can cause a \"Permission denied\" exception (see raven-js#495).\n\t      // Bail on wrapping and return the function as-is (defers to window.onerror).\n\t      return func;\n\t    }\n\t\n\t    function wrapped() {\n\t      var args = [],\n\t        i = arguments.length,\n\t        deep = !options || (options && options.deep !== false);\n\t\n\t      if (_before && isFunction(_before)) {\n\t        _before.apply(this, arguments);\n\t      }\n\t\n\t      // Recursively wrap all of a function's arguments that are\n\t      // functions themselves.\n\t      while (i--) args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n\t\n\t      try {\n\t        // Attempt to invoke user-land function\n\t        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n\t        //       means Raven caught an error invoking your application code. This is\n\t        //       expected behavior and NOT indicative of a bug with Raven.js.\n\t        return func.apply(this, args);\n\t      } catch (e) {\n\t        self._ignoreNextOnError();\n\t        self.captureException(e, options);\n\t        throw e;\n\t      }\n\t    }\n\t\n\t    // copy over properties of the old function\n\t    for (var property in func) {\n\t      if (hasKey(func, property)) {\n\t        wrapped[property] = func[property];\n\t      }\n\t    }\n\t    wrapped.prototype = func.prototype;\n\t\n\t    func.__raven_wrapper__ = wrapped;\n\t    // Signal that this function has been wrapped/filled already\n\t    // for both debugging and to prevent it to being wrapped/filled twice\n\t    wrapped.__raven__ = true;\n\t    wrapped.__orig__ = func;\n\t\n\t    return wrapped;\n\t  },\n\t\n\t  /**\n\t   * Uninstalls the global error handler.\n\t   *\n\t   * @return {Raven}\n\t   */\n\t  uninstall: function() {\n\t    TraceKit.report.uninstall();\n\t\n\t    this._detachPromiseRejectionHandler();\n\t    this._unpatchFunctionToString();\n\t    this._restoreBuiltIns();\n\t    this._restoreConsole();\n\t\n\t    Error.stackTraceLimit = this._originalErrorStackTraceLimit;\n\t    this._isRavenInstalled = false;\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Callback used for `unhandledrejection` event\n\t   *\n\t   * @param {PromiseRejectionEvent} event An object containing\n\t   *   promise: the Promise that was rejected\n\t   *   reason: the value with which the Promise was rejected\n\t   * @return void\n\t   */\n\t  _promiseRejectionHandler: function(event) {\n\t    this._logDebug('debug', 'Raven caught unhandled promise rejection:', event);\n\t    this.captureException(event.reason, {\n\t      mechanism: {\n\t        type: 'onunhandledrejection',\n\t        handled: false\n\t      }\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Installs the global promise rejection handler.\n\t   *\n\t   * @return {raven}\n\t   */\n\t  _attachPromiseRejectionHandler: function() {\n\t    this._promiseRejectionHandler = this._promiseRejectionHandler.bind(this);\n\t    _window.addEventListener &&\n\t      _window.addEventListener('unhandledrejection', this._promiseRejectionHandler);\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Uninstalls the global promise rejection handler.\n\t   *\n\t   * @return {raven}\n\t   */\n\t  _detachPromiseRejectionHandler: function() {\n\t    _window.removeEventListener &&\n\t      _window.removeEventListener('unhandledrejection', this._promiseRejectionHandler);\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Manually capture an exception and send it over to Sentry\n\t   *\n\t   * @param {error} ex An exception to be logged\n\t   * @param {object} options A specific set of options for this error [optional]\n\t   * @return {Raven}\n\t   */\n\t  captureException: function(ex, options) {\n\t    options = objectMerge({trimHeadFrames: 0}, options ? options : {});\n\t\n\t    if (isErrorEvent(ex) && ex.error) {\n\t      // If it is an ErrorEvent with `error` property, extract it to get actual Error\n\t      ex = ex.error;\n\t    } else if (isDOMError(ex) || isDOMException(ex)) {\n\t      // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n\t      // then we just extract the name and message, as they don't provide anything else\n\t      // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n\t      // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n\t      var name = ex.name || (isDOMError(ex) ? 'DOMError' : 'DOMException');\n\t      var message = ex.message ? name + ': ' + ex.message : name;\n\t\n\t      return this.captureMessage(\n\t        message,\n\t        objectMerge(options, {\n\t          // neither DOMError or DOMException provide stack trace and we most likely wont get it this way as well\n\t          // but it's barely any overhead so we may at least try\n\t          stacktrace: true,\n\t          trimHeadFrames: options.trimHeadFrames + 1\n\t        })\n\t      );\n\t    } else if (isError(ex)) {\n\t      // we have a real Error object\n\t      ex = ex;\n\t    } else if (isPlainObject(ex)) {\n\t      // If it is plain Object, serialize it manually and extract options\n\t      // This will allow us to group events based on top-level keys\n\t      // which is much better than creating new group when any key/value change\n\t      options = this._getCaptureExceptionOptionsFromPlainObject(options, ex);\n\t      ex = new Error(options.message);\n\t    } else {\n\t      // If none of previous checks were valid, then it means that\n\t      // it's not a DOMError/DOMException\n\t      // it's not a plain Object\n\t      // it's not a valid ErrorEvent (one with an error property)\n\t      // it's not an Error\n\t      // So bail out and capture it as a simple message:\n\t      return this.captureMessage(\n\t        ex,\n\t        objectMerge(options, {\n\t          stacktrace: true, // if we fall back to captureMessage, default to attempting a new trace\n\t          trimHeadFrames: options.trimHeadFrames + 1\n\t        })\n\t      );\n\t    }\n\t\n\t    // Store the raw exception object for potential debugging and introspection\n\t    this._lastCapturedException = ex;\n\t\n\t    // TraceKit.report will re-raise any exception passed to it,\n\t    // which means you have to wrap it in try/catch. Instead, we\n\t    // can wrap it here and only re-raise if TraceKit.report\n\t    // raises an exception different from the one we asked to\n\t    // report on.\n\t    try {\n\t      var stack = TraceKit.computeStackTrace(ex);\n\t      this._handleStackInfo(stack, options);\n\t    } catch (ex1) {\n\t      if (ex !== ex1) {\n\t        throw ex1;\n\t      }\n\t    }\n\t\n\t    return this;\n\t  },\n\t\n\t  _getCaptureExceptionOptionsFromPlainObject: function(currentOptions, ex) {\n\t    var exKeys = Object.keys(ex).sort();\n\t    var options = objectMerge(currentOptions, {\n\t      message:\n\t        'Non-Error exception captured with keys: ' + serializeKeysForMessage(exKeys),\n\t      fingerprint: [md5(exKeys)],\n\t      extra: currentOptions.extra || {}\n\t    });\n\t    options.extra.__serialized__ = serializeException(ex);\n\t\n\t    return options;\n\t  },\n\t\n\t  /*\n\t     * Manually send a message to Sentry\n\t     *\n\t     * @param {string} msg A plain message to be captured in Sentry\n\t     * @param {object} options A specific set of options for this message [optional]\n\t     * @return {Raven}\n\t     */\n\t  captureMessage: function(msg, options) {\n\t    // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an\n\t    // early call; we'll error on the side of logging anything called before configuration since it's\n\t    // probably something you should see:\n\t    if (\n\t      !!this._globalOptions.ignoreErrors.test &&\n\t      this._globalOptions.ignoreErrors.test(msg)\n\t    ) {\n\t      return;\n\t    }\n\t\n\t    options = options || {};\n\t    msg = msg + ''; // Make sure it's actually a string\n\t\n\t    var data = objectMerge(\n\t      {\n\t        message: msg\n\t      },\n\t      options\n\t    );\n\t\n\t    var ex;\n\t    // Generate a \"synthetic\" stack trace from this point.\n\t    // NOTE: If you are a Sentry user, and you are seeing this stack frame, it is NOT indicative\n\t    //       of a bug with Raven.js. Sentry generates synthetic traces either by configuration,\n\t    //       or if it catches a thrown object without a \"stack\" property.\n\t    try {\n\t      throw new Error(msg);\n\t    } catch (ex1) {\n\t      ex = ex1;\n\t    }\n\t\n\t    // null exception name so `Error` isn't prefixed to msg\n\t    ex.name = null;\n\t    var stack = TraceKit.computeStackTrace(ex);\n\t\n\t    // stack[0] is `throw new Error(msg)` call itself, we are interested in the frame that was just before that, stack[1]\n\t    var initialCall = isArray(stack.stack) && stack.stack[1];\n\t\n\t    // if stack[1] is `Raven.captureException`, it means that someone passed a string to it and we redirected that call\n\t    // to be handled by `captureMessage`, thus `initialCall` is the 3rd one, not 2nd\n\t    // initialCall => captureException(string) => captureMessage(string)\n\t    if (initialCall && initialCall.func === 'Raven.captureException') {\n\t      initialCall = stack.stack[2];\n\t    }\n\t\n\t    var fileurl = (initialCall && initialCall.url) || '';\n\t\n\t    if (\n\t      !!this._globalOptions.ignoreUrls.test &&\n\t      this._globalOptions.ignoreUrls.test(fileurl)\n\t    ) {\n\t      return;\n\t    }\n\t\n\t    if (\n\t      !!this._globalOptions.whitelistUrls.test &&\n\t      !this._globalOptions.whitelistUrls.test(fileurl)\n\t    ) {\n\t      return;\n\t    }\n\t\n\t    // Always attempt to get stacktrace if message is empty.\n\t    // It's the only way to provide any helpful information to the user.\n\t    if (this._globalOptions.stacktrace || options.stacktrace || data.message === '') {\n\t      // fingerprint on msg, not stack trace (legacy behavior, could be revisited)\n\t      data.fingerprint = data.fingerprint == null ? msg : data.fingerprint;\n\t\n\t      options = objectMerge(\n\t        {\n\t          trimHeadFrames: 0\n\t        },\n\t        options\n\t      );\n\t      // Since we know this is a synthetic trace, the top frame (this function call)\n\t      // MUST be from Raven.js, so mark it for trimming\n\t      // We add to the trim counter so that callers can choose to trim extra frames, such\n\t      // as utility functions.\n\t      options.trimHeadFrames += 1;\n\t\n\t      var frames = this._prepareFrames(stack, options);\n\t      data.stacktrace = {\n\t        // Sentry expects frames oldest to newest\n\t        frames: frames.reverse()\n\t      };\n\t    }\n\t\n\t    // Make sure that fingerprint is always wrapped in an array\n\t    if (data.fingerprint) {\n\t      data.fingerprint = isArray(data.fingerprint)\n\t        ? data.fingerprint\n\t        : [data.fingerprint];\n\t    }\n\t\n\t    // Fire away!\n\t    this._send(data);\n\t\n\t    return this;\n\t  },\n\t\n\t  captureBreadcrumb: function(obj) {\n\t    var crumb = objectMerge(\n\t      {\n\t        timestamp: now() / 1000\n\t      },\n\t      obj\n\t    );\n\t\n\t    if (isFunction(this._globalOptions.breadcrumbCallback)) {\n\t      var result = this._globalOptions.breadcrumbCallback(crumb);\n\t\n\t      if (isObject(result) && !isEmptyObject(result)) {\n\t        crumb = result;\n\t      } else if (result === false) {\n\t        return this;\n\t      }\n\t    }\n\t\n\t    this._breadcrumbs.push(crumb);\n\t    if (this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) {\n\t      this._breadcrumbs.shift();\n\t    }\n\t    return this;\n\t  },\n\t\n\t  addPlugin: function(plugin /*arg1, arg2, ... argN*/) {\n\t    var pluginArgs = [].slice.call(arguments, 1);\n\t\n\t    this._plugins.push([plugin, pluginArgs]);\n\t    if (this._isRavenInstalled) {\n\t      this._drainPlugins();\n\t    }\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Set/clear a user to be sent along with the payload.\n\t     *\n\t     * @param {object} user An object representing user data [optional]\n\t     * @return {Raven}\n\t     */\n\t  setUserContext: function(user) {\n\t    // Intentionally do not merge here since that's an unexpected behavior.\n\t    this._globalContext.user = user;\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Merge extra attributes to be sent along with the payload.\n\t     *\n\t     * @param {object} extra An object representing extra data [optional]\n\t     * @return {Raven}\n\t     */\n\t  setExtraContext: function(extra) {\n\t    this._mergeContext('extra', extra);\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Merge tags to be sent along with the payload.\n\t     *\n\t     * @param {object} tags An object representing tags [optional]\n\t     * @return {Raven}\n\t     */\n\t  setTagsContext: function(tags) {\n\t    this._mergeContext('tags', tags);\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Clear all of the context.\n\t     *\n\t     * @return {Raven}\n\t     */\n\t  clearContext: function() {\n\t    this._globalContext = {};\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Get a copy of the current context. This cannot be mutated.\n\t     *\n\t     * @return {object} copy of context\n\t     */\n\t  getContext: function() {\n\t    // lol javascript\n\t    return JSON.parse(stringify(this._globalContext));\n\t  },\n\t\n\t  /*\n\t     * Set environment of application\n\t     *\n\t     * @param {string} environment Typically something like 'production'.\n\t     * @return {Raven}\n\t     */\n\t  setEnvironment: function(environment) {\n\t    this._globalOptions.environment = environment;\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Set release version of application\n\t     *\n\t     * @param {string} release Typically something like a git SHA to identify version\n\t     * @return {Raven}\n\t     */\n\t  setRelease: function(release) {\n\t    this._globalOptions.release = release;\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Set the dataCallback option\n\t     *\n\t     * @param {function} callback The callback to run which allows the\n\t     *                            data blob to be mutated before sending\n\t     * @return {Raven}\n\t     */\n\t  setDataCallback: function(callback) {\n\t    var original = this._globalOptions.dataCallback;\n\t    this._globalOptions.dataCallback = keepOriginalCallback(original, callback);\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Set the breadcrumbCallback option\n\t     *\n\t     * @param {function} callback The callback to run which allows filtering\n\t     *                            or mutating breadcrumbs\n\t     * @return {Raven}\n\t     */\n\t  setBreadcrumbCallback: function(callback) {\n\t    var original = this._globalOptions.breadcrumbCallback;\n\t    this._globalOptions.breadcrumbCallback = keepOriginalCallback(original, callback);\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Set the shouldSendCallback option\n\t     *\n\t     * @param {function} callback The callback to run which allows\n\t     *                            introspecting the blob before sending\n\t     * @return {Raven}\n\t     */\n\t  setShouldSendCallback: function(callback) {\n\t    var original = this._globalOptions.shouldSendCallback;\n\t    this._globalOptions.shouldSendCallback = keepOriginalCallback(original, callback);\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Override the default HTTP transport mechanism that transmits data\n\t   * to the Sentry server.\n\t   *\n\t   * @param {function} transport Function invoked instead of the default\n\t   *                             `makeRequest` handler.\n\t   *\n\t   * @return {Raven}\n\t   */\n\t  setTransport: function(transport) {\n\t    this._globalOptions.transport = transport;\n\t\n\t    return this;\n\t  },\n\t\n\t  /*\n\t     * Get the latest raw exception that was captured by Raven.\n\t     *\n\t     * @return {error}\n\t     */\n\t  lastException: function() {\n\t    return this._lastCapturedException;\n\t  },\n\t\n\t  /*\n\t     * Get the last event id\n\t     *\n\t     * @return {string}\n\t     */\n\t  lastEventId: function() {\n\t    return this._lastEventId;\n\t  },\n\t\n\t  /*\n\t     * Determine if Raven is setup and ready to go.\n\t     *\n\t     * @return {boolean}\n\t     */\n\t  isSetup: function() {\n\t    if (!this._hasJSON) return false; // needs JSON support\n\t    if (!this._globalServer) {\n\t      if (!this.ravenNotConfiguredError) {\n\t        this.ravenNotConfiguredError = true;\n\t        this._logDebug('error', 'Error: Raven has not been configured.');\n\t      }\n\t      return false;\n\t    }\n\t    return true;\n\t  },\n\t\n\t  afterLoad: function() {\n\t    // TODO: remove window dependence?\n\t\n\t    // Attempt to initialize Raven on load\n\t    var RavenConfig = _window.RavenConfig;\n\t    if (RavenConfig) {\n\t      this.config(RavenConfig.dsn, RavenConfig.config).install();\n\t    }\n\t  },\n\t\n\t  showReportDialog: function(options) {\n\t    if (\n\t      !_document // doesn't work without a document (React native)\n\t    )\n\t      return;\n\t\n\t    options = Object.assign(\n\t      {\n\t        eventId: this.lastEventId(),\n\t        dsn: this._dsn,\n\t        user: this._globalContext.user || {}\n\t      },\n\t      options\n\t    );\n\t\n\t    if (!options.eventId) {\n\t      throw new RavenConfigError('Missing eventId');\n\t    }\n\t\n\t    if (!options.dsn) {\n\t      throw new RavenConfigError('Missing DSN');\n\t    }\n\t\n\t    var encode = encodeURIComponent;\n\t    var encodedOptions = [];\n\t\n\t    for (var key in options) {\n\t      if (key === 'user') {\n\t        var user = options.user;\n\t        if (user.name) encodedOptions.push('name=' + encode(user.name));\n\t        if (user.email) encodedOptions.push('email=' + encode(user.email));\n\t      } else {\n\t        encodedOptions.push(encode(key) + '=' + encode(options[key]));\n\t      }\n\t    }\n\t    var globalServer = this._getGlobalServer(this._parseDSN(options.dsn));\n\t\n\t    var script = _document.createElement('script');\n\t    script.async = true;\n\t    script.src = globalServer + '/api/embed/error-page/?' + encodedOptions.join('&');\n\t    (_document.head || _document.body).appendChild(script);\n\t  },\n\t\n\t  /**** Private functions ****/\n\t  _ignoreNextOnError: function() {\n\t    var self = this;\n\t    this._ignoreOnError += 1;\n\t    setTimeout(function() {\n\t      // onerror should trigger before setTimeout\n\t      self._ignoreOnError -= 1;\n\t    });\n\t  },\n\t\n\t  _triggerEvent: function(eventType, options) {\n\t    // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it\n\t    var evt, key;\n\t\n\t    if (!this._hasDocument) return;\n\t\n\t    options = options || {};\n\t\n\t    eventType = 'raven' + eventType.substr(0, 1).toUpperCase() + eventType.substr(1);\n\t\n\t    if (_document.createEvent) {\n\t      evt = _document.createEvent('HTMLEvents');\n\t      evt.initEvent(eventType, true, true);\n\t    } else {\n\t      evt = _document.createEventObject();\n\t      evt.eventType = eventType;\n\t    }\n\t\n\t    for (key in options)\n\t      if (hasKey(options, key)) {\n\t        evt[key] = options[key];\n\t      }\n\t\n\t    if (_document.createEvent) {\n\t      // IE9 if standards\n\t      _document.dispatchEvent(evt);\n\t    } else {\n\t      // IE8 regardless of Quirks or Standards\n\t      // IE9 if quirks\n\t      try {\n\t        _document.fireEvent('on' + evt.eventType.toLowerCase(), evt);\n\t      } catch (e) {\n\t        // Do nothing\n\t      }\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Wraps addEventListener to capture UI breadcrumbs\n\t   * @param evtName the event name (e.g. \"click\")\n\t   * @returns {Function}\n\t   * @private\n\t   */\n\t  _breadcrumbEventHandler: function(evtName) {\n\t    var self = this;\n\t    return function(evt) {\n\t      // reset keypress timeout; e.g. triggering a 'click' after\n\t      // a 'keypress' will reset the keypress debounce so that a new\n\t      // set of keypresses can be recorded\n\t      self._keypressTimeout = null;\n\t\n\t      // It's possible this handler might trigger multiple times for the same\n\t      // event (e.g. event propagation through node ancestors). Ignore if we've\n\t      // already captured the event.\n\t      if (self._lastCapturedEvent === evt) return;\n\t\n\t      self._lastCapturedEvent = evt;\n\t\n\t      // try/catch both:\n\t      // - accessing evt.target (see getsentry/raven-js#838, #768)\n\t      // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n\t      //   can throw an exception in some circumstances.\n\t      var target;\n\t      try {\n\t        target = htmlTreeAsString(evt.target);\n\t      } catch (e) {\n\t        target = '<unknown>';\n\t      }\n\t\n\t      self.captureBreadcrumb({\n\t        category: 'ui.' + evtName, // e.g. ui.click, ui.input\n\t        message: target\n\t      });\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Wraps addEventListener to capture keypress UI events\n\t   * @returns {Function}\n\t   * @private\n\t   */\n\t  _keypressEventHandler: function() {\n\t    var self = this,\n\t      debounceDuration = 1000; // milliseconds\n\t\n\t    // TODO: if somehow user switches keypress target before\n\t    //       debounce timeout is triggered, we will only capture\n\t    //       a single breadcrumb from the FIRST target (acceptable?)\n\t    return function(evt) {\n\t      var target;\n\t      try {\n\t        target = evt.target;\n\t      } catch (e) {\n\t        // just accessing event properties can throw an exception in some rare circumstances\n\t        // see: https://github.com/getsentry/raven-js/issues/838\n\t        return;\n\t      }\n\t      var tagName = target && target.tagName;\n\t\n\t      // only consider keypress events on actual input elements\n\t      // this will disregard keypresses targeting body (e.g. tabbing\n\t      // through elements, hotkeys, etc)\n\t      if (\n\t        !tagName ||\n\t        (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable)\n\t      )\n\t        return;\n\t\n\t      // record first keypress in a series, but ignore subsequent\n\t      // keypresses until debounce clears\n\t      var timeout = self._keypressTimeout;\n\t      if (!timeout) {\n\t        self._breadcrumbEventHandler('input')(evt);\n\t      }\n\t      clearTimeout(timeout);\n\t      self._keypressTimeout = setTimeout(function() {\n\t        self._keypressTimeout = null;\n\t      }, debounceDuration);\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Captures a breadcrumb of type \"navigation\", normalizing input URLs\n\t   * @param to the originating URL\n\t   * @param from the target URL\n\t   * @private\n\t   */\n\t  _captureUrlChange: function(from, to) {\n\t    var parsedLoc = parseUrl(this._location.href);\n\t    var parsedTo = parseUrl(to);\n\t    var parsedFrom = parseUrl(from);\n\t\n\t    // because onpopstate only tells you the \"new\" (to) value of location.href, and\n\t    // not the previous (from) value, we need to track the value of the current URL\n\t    // state ourselves\n\t    this._lastHref = to;\n\t\n\t    // Use only the path component of the URL if the URL matches the current\n\t    // document (almost all the time when using pushState)\n\t    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host)\n\t      to = parsedTo.relative;\n\t    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host)\n\t      from = parsedFrom.relative;\n\t\n\t    this.captureBreadcrumb({\n\t      category: 'navigation',\n\t      data: {\n\t        to: to,\n\t        from: from\n\t      }\n\t    });\n\t  },\n\t\n\t  _patchFunctionToString: function() {\n\t    var self = this;\n\t    self._originalFunctionToString = Function.prototype.toString;\n\t    // eslint-disable-next-line no-extend-native\n\t    Function.prototype.toString = function() {\n\t      if (typeof this === 'function' && this.__raven__) {\n\t        return self._originalFunctionToString.apply(this.__orig__, arguments);\n\t      }\n\t      return self._originalFunctionToString.apply(this, arguments);\n\t    };\n\t  },\n\t\n\t  _unpatchFunctionToString: function() {\n\t    if (this._originalFunctionToString) {\n\t      // eslint-disable-next-line no-extend-native\n\t      Function.prototype.toString = this._originalFunctionToString;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Wrap timer functions and event targets to catch errors and provide\n\t   * better metadata.\n\t   */\n\t  _instrumentTryCatch: function() {\n\t    var self = this;\n\t\n\t    var wrappedBuiltIns = self._wrappedBuiltIns;\n\t\n\t    function wrapTimeFn(orig) {\n\t      return function(fn, t) {\n\t        // preserve arity\n\t        // Make a copy of the arguments to prevent deoptimization\n\t        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n\t        var args = new Array(arguments.length);\n\t        for (var i = 0; i < args.length; ++i) {\n\t          args[i] = arguments[i];\n\t        }\n\t        var originalCallback = args[0];\n\t        if (isFunction(originalCallback)) {\n\t          args[0] = self.wrap(\n\t            {\n\t              mechanism: {\n\t                type: 'instrument',\n\t                data: {function: orig.name || '<anonymous>'}\n\t              }\n\t            },\n\t            originalCallback\n\t          );\n\t        }\n\t\n\t        // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n\t        // also supports only two arguments and doesn't care what this is, so we\n\t        // can just call the original function directly.\n\t        if (orig.apply) {\n\t          return orig.apply(this, args);\n\t        } else {\n\t          return orig(args[0], args[1]);\n\t        }\n\t      };\n\t    }\n\t\n\t    var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\t\n\t    function wrapEventTarget(global) {\n\t      var proto = _window[global] && _window[global].prototype;\n\t      if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n\t        fill(\n\t          proto,\n\t          'addEventListener',\n\t          function(orig) {\n\t            return function(evtName, fn, capture, secure) {\n\t              // preserve arity\n\t              try {\n\t                if (fn && fn.handleEvent) {\n\t                  fn.handleEvent = self.wrap(\n\t                    {\n\t                      mechanism: {\n\t                        type: 'instrument',\n\t                        data: {\n\t                          target: global,\n\t                          function: 'handleEvent',\n\t                          handler: (fn && fn.name) || '<anonymous>'\n\t                        }\n\t                      }\n\t                    },\n\t                    fn.handleEvent\n\t                  );\n\t                }\n\t              } catch (err) {\n\t                // can sometimes get 'Permission denied to access property \"handle Event'\n\t              }\n\t\n\t              // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n\t              // so that we don't have more than one wrapper function\n\t              var before, clickHandler, keypressHandler;\n\t\n\t              if (\n\t                autoBreadcrumbs &&\n\t                autoBreadcrumbs.dom &&\n\t                (global === 'EventTarget' || global === 'Node')\n\t              ) {\n\t                // NOTE: generating multiple handlers per addEventListener invocation, should\n\t                //       revisit and verify we can just use one (almost certainly)\n\t                clickHandler = self._breadcrumbEventHandler('click');\n\t                keypressHandler = self._keypressEventHandler();\n\t                before = function(evt) {\n\t                  // need to intercept every DOM event in `before` argument, in case that\n\t                  // same wrapped method is re-used for different events (e.g. mousemove THEN click)\n\t                  // see #724\n\t                  if (!evt) return;\n\t\n\t                  var eventType;\n\t                  try {\n\t                    eventType = evt.type;\n\t                  } catch (e) {\n\t                    // just accessing event properties can throw an exception in some rare circumstances\n\t                    // see: https://github.com/getsentry/raven-js/issues/838\n\t                    return;\n\t                  }\n\t                  if (eventType === 'click') return clickHandler(evt);\n\t                  else if (eventType === 'keypress') return keypressHandler(evt);\n\t                };\n\t              }\n\t              return orig.call(\n\t                this,\n\t                evtName,\n\t                self.wrap(\n\t                  {\n\t                    mechanism: {\n\t                      type: 'instrument',\n\t                      data: {\n\t                        target: global,\n\t                        function: 'addEventListener',\n\t                        handler: (fn && fn.name) || '<anonymous>'\n\t                      }\n\t                    }\n\t                  },\n\t                  fn,\n\t                  before\n\t                ),\n\t                capture,\n\t                secure\n\t              );\n\t            };\n\t          },\n\t          wrappedBuiltIns\n\t        );\n\t        fill(\n\t          proto,\n\t          'removeEventListener',\n\t          function(orig) {\n\t            return function(evt, fn, capture, secure) {\n\t              try {\n\t                fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);\n\t              } catch (e) {\n\t                // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n\t              }\n\t              return orig.call(this, evt, fn, capture, secure);\n\t            };\n\t          },\n\t          wrappedBuiltIns\n\t        );\n\t      }\n\t    }\n\t\n\t    fill(_window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n\t    fill(_window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n\t    if (_window.requestAnimationFrame) {\n\t      fill(\n\t        _window,\n\t        'requestAnimationFrame',\n\t        function(orig) {\n\t          return function(cb) {\n\t            return orig(\n\t              self.wrap(\n\t                {\n\t                  mechanism: {\n\t                    type: 'instrument',\n\t                    data: {\n\t                      function: 'requestAnimationFrame',\n\t                      handler: (orig && orig.name) || '<anonymous>'\n\t                    }\n\t                  }\n\t                },\n\t                cb\n\t              )\n\t            );\n\t          };\n\t        },\n\t        wrappedBuiltIns\n\t      );\n\t    }\n\t\n\t    // event targets borrowed from bugsnag-js:\n\t    // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n\t    var eventTargets = [\n\t      'EventTarget',\n\t      'Window',\n\t      'Node',\n\t      'ApplicationCache',\n\t      'AudioTrackList',\n\t      'ChannelMergerNode',\n\t      'CryptoOperation',\n\t      'EventSource',\n\t      'FileReader',\n\t      'HTMLUnknownElement',\n\t      'IDBDatabase',\n\t      'IDBRequest',\n\t      'IDBTransaction',\n\t      'KeyOperation',\n\t      'MediaController',\n\t      'MessagePort',\n\t      'ModalWindow',\n\t      'Notification',\n\t      'SVGElementInstance',\n\t      'Screen',\n\t      'TextTrack',\n\t      'TextTrackCue',\n\t      'TextTrackList',\n\t      'WebSocket',\n\t      'WebSocketWorker',\n\t      'Worker',\n\t      'XMLHttpRequest',\n\t      'XMLHttpRequestEventTarget',\n\t      'XMLHttpRequestUpload'\n\t    ];\n\t    for (var i = 0; i < eventTargets.length; i++) {\n\t      wrapEventTarget(eventTargets[i]);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Instrument browser built-ins w/ breadcrumb capturing\n\t   *  - XMLHttpRequests\n\t   *  - DOM interactions (click/typing)\n\t   *  - window.location changes\n\t   *  - console\n\t   *\n\t   * Can be disabled or individually configured via the `autoBreadcrumbs` config option\n\t   */\n\t  _instrumentBreadcrumbs: function() {\n\t    var self = this;\n\t    var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\t\n\t    var wrappedBuiltIns = self._wrappedBuiltIns;\n\t\n\t    function wrapProp(prop, xhr) {\n\t      if (prop in xhr && isFunction(xhr[prop])) {\n\t        fill(xhr, prop, function(orig) {\n\t          return self.wrap(\n\t            {\n\t              mechanism: {\n\t                type: 'instrument',\n\t                data: {function: prop, handler: (orig && orig.name) || '<anonymous>'}\n\t              }\n\t            },\n\t            orig\n\t          );\n\t        }); // intentionally don't track filled methods on XHR instances\n\t      }\n\t    }\n\t\n\t    if (autoBreadcrumbs.xhr && 'XMLHttpRequest' in _window) {\n\t      var xhrproto = _window.XMLHttpRequest && _window.XMLHttpRequest.prototype;\n\t      fill(\n\t        xhrproto,\n\t        'open',\n\t        function(origOpen) {\n\t          return function(method, url) {\n\t            // preserve arity\n\t\n\t            // if Sentry key appears in URL, don't capture\n\t            if (isString(url) && url.indexOf(self._globalKey) === -1) {\n\t              this.__raven_xhr = {\n\t                method: method,\n\t                url: url,\n\t                status_code: null\n\t              };\n\t            }\n\t\n\t            return origOpen.apply(this, arguments);\n\t          };\n\t        },\n\t        wrappedBuiltIns\n\t      );\n\t\n\t      fill(\n\t        xhrproto,\n\t        'send',\n\t        function(origSend) {\n\t          return function() {\n\t            // preserve arity\n\t            var xhr = this;\n\t\n\t            function onreadystatechangeHandler() {\n\t              if (xhr.__raven_xhr && xhr.readyState === 4) {\n\t                try {\n\t                  // touching statusCode in some platforms throws\n\t                  // an exception\n\t                  xhr.__raven_xhr.status_code = xhr.status;\n\t                } catch (e) {\n\t                  /* do nothing */\n\t                }\n\t\n\t                self.captureBreadcrumb({\n\t                  type: 'http',\n\t                  category: 'xhr',\n\t                  data: xhr.__raven_xhr\n\t                });\n\t              }\n\t            }\n\t\n\t            var props = ['onload', 'onerror', 'onprogress'];\n\t            for (var j = 0; j < props.length; j++) {\n\t              wrapProp(props[j], xhr);\n\t            }\n\t\n\t            if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {\n\t              fill(\n\t                xhr,\n\t                'onreadystatechange',\n\t                function(orig) {\n\t                  return self.wrap(\n\t                    {\n\t                      mechanism: {\n\t                        type: 'instrument',\n\t                        data: {\n\t                          function: 'onreadystatechange',\n\t                          handler: (orig && orig.name) || '<anonymous>'\n\t                        }\n\t                      }\n\t                    },\n\t                    orig,\n\t                    onreadystatechangeHandler\n\t                  );\n\t                } /* intentionally don't track this instrumentation */\n\t              );\n\t            } else {\n\t              // if onreadystatechange wasn't actually set by the page on this xhr, we\n\t              // are free to set our own and capture the breadcrumb\n\t              xhr.onreadystatechange = onreadystatechangeHandler;\n\t            }\n\t\n\t            return origSend.apply(this, arguments);\n\t          };\n\t        },\n\t        wrappedBuiltIns\n\t      );\n\t    }\n\t\n\t    if (autoBreadcrumbs.xhr && supportsFetch()) {\n\t      fill(\n\t        _window,\n\t        'fetch',\n\t        function(origFetch) {\n\t          return function() {\n\t            // preserve arity\n\t            // Make a copy of the arguments to prevent deoptimization\n\t            // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n\t            var args = new Array(arguments.length);\n\t            for (var i = 0; i < args.length; ++i) {\n\t              args[i] = arguments[i];\n\t            }\n\t\n\t            var fetchInput = args[0];\n\t            var method = 'GET';\n\t            var url;\n\t\n\t            if (typeof fetchInput === 'string') {\n\t              url = fetchInput;\n\t            } else if ('Request' in _window && fetchInput instanceof _window.Request) {\n\t              url = fetchInput.url;\n\t              if (fetchInput.method) {\n\t                method = fetchInput.method;\n\t              }\n\t            } else {\n\t              url = '' + fetchInput;\n\t            }\n\t\n\t            // if Sentry key appears in URL, don't capture, as it's our own request\n\t            if (url.indexOf(self._globalKey) !== -1) {\n\t              return origFetch.apply(this, args);\n\t            }\n\t\n\t            if (args[1] && args[1].method) {\n\t              method = args[1].method;\n\t            }\n\t\n\t            var fetchData = {\n\t              method: method,\n\t              url: url,\n\t              status_code: null\n\t            };\n\t\n\t            return origFetch\n\t              .apply(this, args)\n\t              .then(function(response) {\n\t                fetchData.status_code = response.status;\n\t\n\t                self.captureBreadcrumb({\n\t                  type: 'http',\n\t                  category: 'fetch',\n\t                  data: fetchData\n\t                });\n\t\n\t                return response;\n\t              })\n\t              ['catch'](function(err) {\n\t                // if there is an error performing the request\n\t                self.captureBreadcrumb({\n\t                  type: 'http',\n\t                  category: 'fetch',\n\t                  data: fetchData,\n\t                  level: 'error'\n\t                });\n\t\n\t                throw err;\n\t              });\n\t          };\n\t        },\n\t        wrappedBuiltIns\n\t      );\n\t    }\n\t\n\t    // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n\t    // to the document. Do this before we instrument addEventListener.\n\t    if (autoBreadcrumbs.dom && this._hasDocument) {\n\t      if (_document.addEventListener) {\n\t        _document.addEventListener('click', self._breadcrumbEventHandler('click'), false);\n\t        _document.addEventListener('keypress', self._keypressEventHandler(), false);\n\t      } else if (_document.attachEvent) {\n\t        // IE8 Compatibility\n\t        _document.attachEvent('onclick', self._breadcrumbEventHandler('click'));\n\t        _document.attachEvent('onkeypress', self._keypressEventHandler());\n\t      }\n\t    }\n\t\n\t    // record navigation (URL) changes\n\t    // NOTE: in Chrome App environment, touching history.pushState, *even inside\n\t    //       a try/catch block*, will cause Chrome to output an error to console.error\n\t    // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n\t    var chrome = _window.chrome;\n\t    var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n\t    var hasPushAndReplaceState =\n\t      !isChromePackagedApp &&\n\t      _window.history &&\n\t      _window.history.pushState &&\n\t      _window.history.replaceState;\n\t    if (autoBreadcrumbs.location && hasPushAndReplaceState) {\n\t      // TODO: remove onpopstate handler on uninstall()\n\t      var oldOnPopState = _window.onpopstate;\n\t      _window.onpopstate = function() {\n\t        var currentHref = self._location.href;\n\t        self._captureUrlChange(self._lastHref, currentHref);\n\t\n\t        if (oldOnPopState) {\n\t          return oldOnPopState.apply(this, arguments);\n\t        }\n\t      };\n\t\n\t      var historyReplacementFunction = function(origHistFunction) {\n\t        // note history.pushState.length is 0; intentionally not declaring\n\t        // params to preserve 0 arity\n\t        return function(/* state, title, url */) {\n\t          var url = arguments.length > 2 ? arguments[2] : undefined;\n\t\n\t          // url argument is optional\n\t          if (url) {\n\t            // coerce to string (this is what pushState does)\n\t            self._captureUrlChange(self._lastHref, url + '');\n\t          }\n\t\n\t          return origHistFunction.apply(this, arguments);\n\t        };\n\t      };\n\t\n\t      fill(_window.history, 'pushState', historyReplacementFunction, wrappedBuiltIns);\n\t      fill(_window.history, 'replaceState', historyReplacementFunction, wrappedBuiltIns);\n\t    }\n\t\n\t    if (autoBreadcrumbs.console && 'console' in _window && console.log) {\n\t      // console\n\t      var consoleMethodCallback = function(msg, data) {\n\t        self.captureBreadcrumb({\n\t          message: msg,\n\t          level: data.level,\n\t          category: 'console'\n\t        });\n\t      };\n\t\n\t      each(['debug', 'info', 'warn', 'error', 'log'], function(_, level) {\n\t        wrapConsoleMethod(console, level, consoleMethodCallback);\n\t      });\n\t    }\n\t  },\n\t\n\t  _restoreBuiltIns: function() {\n\t    // restore any wrapped builtins\n\t    var builtin;\n\t    while (this._wrappedBuiltIns.length) {\n\t      builtin = this._wrappedBuiltIns.shift();\n\t\n\t      var obj = builtin[0],\n\t        name = builtin[1],\n\t        orig = builtin[2];\n\t\n\t      obj[name] = orig;\n\t    }\n\t  },\n\t\n\t  _restoreConsole: function() {\n\t    // eslint-disable-next-line guard-for-in\n\t    for (var method in this._originalConsoleMethods) {\n\t      this._originalConsole[method] = this._originalConsoleMethods[method];\n\t    }\n\t  },\n\t\n\t  _drainPlugins: function() {\n\t    var self = this;\n\t\n\t    // FIX ME TODO\n\t    each(this._plugins, function(_, plugin) {\n\t      var installer = plugin[0];\n\t      var args = plugin[1];\n\t      installer.apply(self, [self].concat(args));\n\t    });\n\t  },\n\t\n\t  _parseDSN: function(str) {\n\t    var m = dsnPattern.exec(str),\n\t      dsn = {},\n\t      i = 7;\n\t\n\t    try {\n\t      while (i--) dsn[dsnKeys[i]] = m[i] || '';\n\t    } catch (e) {\n\t      throw new RavenConfigError('Invalid DSN: ' + str);\n\t    }\n\t\n\t    if (dsn.pass && !this._globalOptions.allowSecretKey) {\n\t      throw new RavenConfigError(\n\t        'Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key'\n\t      );\n\t    }\n\t\n\t    return dsn;\n\t  },\n\t\n\t  _getGlobalServer: function(uri) {\n\t    // assemble the endpoint from the uri pieces\n\t    var globalServer = '//' + uri.host + (uri.port ? ':' + uri.port : '');\n\t\n\t    if (uri.protocol) {\n\t      globalServer = uri.protocol + ':' + globalServer;\n\t    }\n\t    return globalServer;\n\t  },\n\t\n\t  _handleOnErrorStackInfo: function(stackInfo, options) {\n\t    options = options || {};\n\t    options.mechanism = options.mechanism || {\n\t      type: 'onerror',\n\t      handled: false\n\t    };\n\t\n\t    // if we are intentionally ignoring errors via onerror, bail out\n\t    if (!this._ignoreOnError) {\n\t      this._handleStackInfo(stackInfo, options);\n\t    }\n\t  },\n\t\n\t  _handleStackInfo: function(stackInfo, options) {\n\t    var frames = this._prepareFrames(stackInfo, options);\n\t\n\t    this._triggerEvent('handle', {\n\t      stackInfo: stackInfo,\n\t      options: options\n\t    });\n\t\n\t    this._processException(\n\t      stackInfo.name,\n\t      stackInfo.message,\n\t      stackInfo.url,\n\t      stackInfo.lineno,\n\t      frames,\n\t      options\n\t    );\n\t  },\n\t\n\t  _prepareFrames: function(stackInfo, options) {\n\t    var self = this;\n\t    var frames = [];\n\t    if (stackInfo.stack && stackInfo.stack.length) {\n\t      each(stackInfo.stack, function(i, stack) {\n\t        var frame = self._normalizeFrame(stack, stackInfo.url);\n\t        if (frame) {\n\t          frames.push(frame);\n\t        }\n\t      });\n\t\n\t      // e.g. frames captured via captureMessage throw\n\t      if (options && options.trimHeadFrames) {\n\t        for (var j = 0; j < options.trimHeadFrames && j < frames.length; j++) {\n\t          frames[j].in_app = false;\n\t        }\n\t      }\n\t    }\n\t    frames = frames.slice(0, this._globalOptions.stackTraceLimit);\n\t    return frames;\n\t  },\n\t\n\t  _normalizeFrame: function(frame, stackInfoUrl) {\n\t    // normalize the frames data\n\t    var normalized = {\n\t      filename: frame.url,\n\t      lineno: frame.line,\n\t      colno: frame.column,\n\t      function: frame.func || '?'\n\t    };\n\t\n\t    // Case when we don't have any information about the error\n\t    // E.g. throwing a string or raw object, instead of an `Error` in Firefox\n\t    // Generating synthetic error doesn't add any value here\n\t    //\n\t    // We should probably somehow let a user know that they should fix their code\n\t    if (!frame.url) {\n\t      normalized.filename = stackInfoUrl; // fallback to whole stacks url from onerror handler\n\t    }\n\t\n\t    normalized.in_app = !// determine if an exception came from outside of our app\n\t    // first we check the global includePaths list.\n\t    (\n\t      (!!this._globalOptions.includePaths.test &&\n\t        !this._globalOptions.includePaths.test(normalized.filename)) ||\n\t      // Now we check for fun, if the function name is Raven or TraceKit\n\t      /(Raven|TraceKit)\\./.test(normalized['function']) ||\n\t      // finally, we do a last ditch effort and check for raven.min.js\n\t      /raven\\.(min\\.)?js$/.test(normalized.filename)\n\t    );\n\t\n\t    return normalized;\n\t  },\n\t\n\t  _processException: function(type, message, fileurl, lineno, frames, options) {\n\t    var prefixedMessage = (type ? type + ': ' : '') + (message || '');\n\t    if (\n\t      !!this._globalOptions.ignoreErrors.test &&\n\t      (this._globalOptions.ignoreErrors.test(message) ||\n\t        this._globalOptions.ignoreErrors.test(prefixedMessage))\n\t    ) {\n\t      return;\n\t    }\n\t\n\t    var stacktrace;\n\t\n\t    if (frames && frames.length) {\n\t      fileurl = frames[0].filename || fileurl;\n\t      // Sentry expects frames oldest to newest\n\t      // and JS sends them as newest to oldest\n\t      frames.reverse();\n\t      stacktrace = {frames: frames};\n\t    } else if (fileurl) {\n\t      stacktrace = {\n\t        frames: [\n\t          {\n\t            filename: fileurl,\n\t            lineno: lineno,\n\t            in_app: true\n\t          }\n\t        ]\n\t      };\n\t    }\n\t\n\t    if (\n\t      !!this._globalOptions.ignoreUrls.test &&\n\t      this._globalOptions.ignoreUrls.test(fileurl)\n\t    ) {\n\t      return;\n\t    }\n\t\n\t    if (\n\t      !!this._globalOptions.whitelistUrls.test &&\n\t      !this._globalOptions.whitelistUrls.test(fileurl)\n\t    ) {\n\t      return;\n\t    }\n\t\n\t    var data = objectMerge(\n\t      {\n\t        // sentry.interfaces.Exception\n\t        exception: {\n\t          values: [\n\t            {\n\t              type: type,\n\t              value: message,\n\t              stacktrace: stacktrace\n\t            }\n\t          ]\n\t        },\n\t        transaction: fileurl\n\t      },\n\t      options\n\t    );\n\t\n\t    var ex = data.exception.values[0];\n\t    if (ex.type == null && ex.value === '') {\n\t      ex.value = 'Unrecoverable error caught';\n\t    }\n\t\n\t    // Move mechanism from options to exception interface\n\t    // We do this, as requiring user to pass `{exception:{mechanism:{ ... }}}` would be\n\t    // too much\n\t    if (!data.exception.mechanism && data.mechanism) {\n\t      data.exception.mechanism = data.mechanism;\n\t      delete data.mechanism;\n\t    }\n\t\n\t    data.exception.mechanism = objectMerge(\n\t      {\n\t        type: 'generic',\n\t        handled: true\n\t      },\n\t      data.exception.mechanism || {}\n\t    );\n\t\n\t    // Fire away!\n\t    this._send(data);\n\t  },\n\t\n\t  _trimPacket: function(data) {\n\t    // For now, we only want to truncate the two different messages\n\t    // but this could/should be expanded to just trim everything\n\t    var max = this._globalOptions.maxMessageLength;\n\t    if (data.message) {\n\t      data.message = truncate(data.message, max);\n\t    }\n\t    if (data.exception) {\n\t      var exception = data.exception.values[0];\n\t      exception.value = truncate(exception.value, max);\n\t    }\n\t\n\t    var request = data.request;\n\t    if (request) {\n\t      if (request.url) {\n\t        request.url = truncate(request.url, this._globalOptions.maxUrlLength);\n\t      }\n\t      if (request.Referer) {\n\t        request.Referer = truncate(request.Referer, this._globalOptions.maxUrlLength);\n\t      }\n\t    }\n\t\n\t    if (data.breadcrumbs && data.breadcrumbs.values)\n\t      this._trimBreadcrumbs(data.breadcrumbs);\n\t\n\t    return data;\n\t  },\n\t\n\t  /**\n\t   * Truncate breadcrumb values (right now just URLs)\n\t   */\n\t  _trimBreadcrumbs: function(breadcrumbs) {\n\t    // known breadcrumb properties with urls\n\t    // TODO: also consider arbitrary prop values that start with (https?)?://\n\t    var urlProps = ['to', 'from', 'url'],\n\t      urlProp,\n\t      crumb,\n\t      data;\n\t\n\t    for (var i = 0; i < breadcrumbs.values.length; ++i) {\n\t      crumb = breadcrumbs.values[i];\n\t      if (\n\t        !crumb.hasOwnProperty('data') ||\n\t        !isObject(crumb.data) ||\n\t        objectFrozen(crumb.data)\n\t      )\n\t        continue;\n\t\n\t      data = objectMerge({}, crumb.data);\n\t      for (var j = 0; j < urlProps.length; ++j) {\n\t        urlProp = urlProps[j];\n\t        if (data.hasOwnProperty(urlProp) && data[urlProp]) {\n\t          data[urlProp] = truncate(data[urlProp], this._globalOptions.maxUrlLength);\n\t        }\n\t      }\n\t      breadcrumbs.values[i].data = data;\n\t    }\n\t  },\n\t\n\t  _getHttpData: function() {\n\t    if (!this._hasNavigator && !this._hasDocument) return;\n\t    var httpData = {};\n\t\n\t    if (this._hasNavigator && _navigator.userAgent) {\n\t      httpData.headers = {\n\t        'User-Agent': _navigator.userAgent\n\t      };\n\t    }\n\t\n\t    // Check in `window` instead of `document`, as we may be in ServiceWorker environment\n\t    if (_window.location && _window.location.href) {\n\t      httpData.url = _window.location.href;\n\t    }\n\t\n\t    if (this._hasDocument && _document.referrer) {\n\t      if (!httpData.headers) httpData.headers = {};\n\t      httpData.headers.Referer = _document.referrer;\n\t    }\n\t\n\t    return httpData;\n\t  },\n\t\n\t  _resetBackoff: function() {\n\t    this._backoffDuration = 0;\n\t    this._backoffStart = null;\n\t  },\n\t\n\t  _shouldBackoff: function() {\n\t    return this._backoffDuration && now() - this._backoffStart < this._backoffDuration;\n\t  },\n\t\n\t  /**\n\t   * Returns true if the in-process data payload matches the signature\n\t   * of the previously-sent data\n\t   *\n\t   * NOTE: This has to be done at this level because TraceKit can generate\n\t   *       data from window.onerror WITHOUT an exception object (IE8, IE9,\n\t   *       other old browsers). This can take the form of an \"exception\"\n\t   *       data object with a single frame (derived from the onerror args).\n\t   */\n\t  _isRepeatData: function(current) {\n\t    var last = this._lastData;\n\t\n\t    if (\n\t      !last ||\n\t      current.message !== last.message || // defined for captureMessage\n\t      current.transaction !== last.transaction // defined for captureException/onerror\n\t    )\n\t      return false;\n\t\n\t    // Stacktrace interface (i.e. from captureMessage)\n\t    if (current.stacktrace || last.stacktrace) {\n\t      return isSameStacktrace(current.stacktrace, last.stacktrace);\n\t    } else if (current.exception || last.exception) {\n\t      // Exception interface (i.e. from captureException/onerror)\n\t      return isSameException(current.exception, last.exception);\n\t    }\n\t\n\t    return true;\n\t  },\n\t\n\t  _setBackoffState: function(request) {\n\t    // If we are already in a backoff state, don't change anything\n\t    if (this._shouldBackoff()) {\n\t      return;\n\t    }\n\t\n\t    var status = request.status;\n\t\n\t    // 400 - project_id doesn't exist or some other fatal\n\t    // 401 - invalid/revoked dsn\n\t    // 429 - too many requests\n\t    if (!(status === 400 || status === 401 || status === 429)) return;\n\t\n\t    var retry;\n\t    try {\n\t      // If Retry-After is not in Access-Control-Expose-Headers, most\n\t      // browsers will throw an exception trying to access it\n\t      if (supportsFetch()) {\n\t        retry = request.headers.get('Retry-After');\n\t      } else {\n\t        retry = request.getResponseHeader('Retry-After');\n\t      }\n\t\n\t      // Retry-After is returned in seconds\n\t      retry = parseInt(retry, 10) * 1000;\n\t    } catch (e) {\n\t      /* eslint no-empty:0 */\n\t    }\n\t\n\t    this._backoffDuration = retry\n\t      ? // If Sentry server returned a Retry-After value, use it\n\t        retry\n\t      : // Otherwise, double the last backoff duration (starts at 1 sec)\n\t        this._backoffDuration * 2 || 1000;\n\t\n\t    this._backoffStart = now();\n\t  },\n\t\n\t  _send: function(data) {\n\t    var globalOptions = this._globalOptions;\n\t\n\t    var baseData = {\n\t        project: this._globalProject,\n\t        logger: globalOptions.logger,\n\t        platform: 'javascript'\n\t      },\n\t      httpData = this._getHttpData();\n\t\n\t    if (httpData) {\n\t      baseData.request = httpData;\n\t    }\n\t\n\t    // HACK: delete `trimHeadFrames` to prevent from appearing in outbound payload\n\t    if (data.trimHeadFrames) delete data.trimHeadFrames;\n\t\n\t    data = objectMerge(baseData, data);\n\t\n\t    // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge\n\t    data.tags = objectMerge(objectMerge({}, this._globalContext.tags), data.tags);\n\t    data.extra = objectMerge(objectMerge({}, this._globalContext.extra), data.extra);\n\t\n\t    // Send along our own collected metadata with extra\n\t    data.extra['session:duration'] = now() - this._startTime;\n\t\n\t    if (this._breadcrumbs && this._breadcrumbs.length > 0) {\n\t      // intentionally make shallow copy so that additions\n\t      // to breadcrumbs aren't accidentally sent in this request\n\t      data.breadcrumbs = {\n\t        values: [].slice.call(this._breadcrumbs, 0)\n\t      };\n\t    }\n\t\n\t    if (this._globalContext.user) {\n\t      // sentry.interfaces.User\n\t      data.user = this._globalContext.user;\n\t    }\n\t\n\t    // Include the environment if it's defined in globalOptions\n\t    if (globalOptions.environment) data.environment = globalOptions.environment;\n\t\n\t    // Include the release if it's defined in globalOptions\n\t    if (globalOptions.release) data.release = globalOptions.release;\n\t\n\t    // Include server_name if it's defined in globalOptions\n\t    if (globalOptions.serverName) data.server_name = globalOptions.serverName;\n\t\n\t    data = this._sanitizeData(data);\n\t\n\t    // Cleanup empty properties before sending them to the server\n\t    Object.keys(data).forEach(function(key) {\n\t      if (data[key] == null || data[key] === '' || isEmptyObject(data[key])) {\n\t        delete data[key];\n\t      }\n\t    });\n\t\n\t    if (isFunction(globalOptions.dataCallback)) {\n\t      data = globalOptions.dataCallback(data) || data;\n\t    }\n\t\n\t    // Why??????????\n\t    if (!data || isEmptyObject(data)) {\n\t      return;\n\t    }\n\t\n\t    // Check if the request should be filtered or not\n\t    if (\n\t      isFunction(globalOptions.shouldSendCallback) &&\n\t      !globalOptions.shouldSendCallback(data)\n\t    ) {\n\t      return;\n\t    }\n\t\n\t    // Backoff state: Sentry server previously responded w/ an error (e.g. 429 - too many requests),\n\t    // so drop requests until \"cool-off\" period has elapsed.\n\t    if (this._shouldBackoff()) {\n\t      this._logDebug('warn', 'Raven dropped error due to backoff: ', data);\n\t      return;\n\t    }\n\t\n\t    if (typeof globalOptions.sampleRate === 'number') {\n\t      if (Math.random() < globalOptions.sampleRate) {\n\t        this._sendProcessedPayload(data);\n\t      }\n\t    } else {\n\t      this._sendProcessedPayload(data);\n\t    }\n\t  },\n\t\n\t  _sanitizeData: function(data) {\n\t    return sanitize(data, this._globalOptions.sanitizeKeys);\n\t  },\n\t\n\t  _getUuid: function() {\n\t    return uuid4();\n\t  },\n\t\n\t  _sendProcessedPayload: function(data, callback) {\n\t    var self = this;\n\t    var globalOptions = this._globalOptions;\n\t\n\t    if (!this.isSetup()) return;\n\t\n\t    // Try and clean up the packet before sending by truncating long values\n\t    data = this._trimPacket(data);\n\t\n\t    // ideally duplicate error testing should occur *before* dataCallback/shouldSendCallback,\n\t    // but this would require copying an un-truncated copy of the data packet, which can be\n\t    // arbitrarily deep (extra_data) -- could be worthwhile? will revisit\n\t    if (!this._globalOptions.allowDuplicates && this._isRepeatData(data)) {\n\t      this._logDebug('warn', 'Raven dropped repeat event: ', data);\n\t      return;\n\t    }\n\t\n\t    // Send along an event_id if not explicitly passed.\n\t    // This event_id can be used to reference the error within Sentry itself.\n\t    // Set lastEventId after we know the error should actually be sent\n\t    this._lastEventId = data.event_id || (data.event_id = this._getUuid());\n\t\n\t    // Store outbound payload after trim\n\t    this._lastData = data;\n\t\n\t    this._logDebug('debug', 'Raven about to send:', data);\n\t\n\t    var auth = {\n\t      sentry_version: '7',\n\t      sentry_client: 'raven-js/' + this.VERSION,\n\t      sentry_key: this._globalKey\n\t    };\n\t\n\t    if (this._globalSecret) {\n\t      auth.sentry_secret = this._globalSecret;\n\t    }\n\t\n\t    var exception = data.exception && data.exception.values[0];\n\t\n\t    // only capture 'sentry' breadcrumb is autoBreadcrumbs is truthy\n\t    if (\n\t      this._globalOptions.autoBreadcrumbs &&\n\t      this._globalOptions.autoBreadcrumbs.sentry\n\t    ) {\n\t      this.captureBreadcrumb({\n\t        category: 'sentry',\n\t        message: exception\n\t          ? (exception.type ? exception.type + ': ' : '') + exception.value\n\t          : data.message,\n\t        event_id: data.event_id,\n\t        level: data.level || 'error' // presume error unless specified\n\t      });\n\t    }\n\t\n\t    var url = this._globalEndpoint;\n\t    (globalOptions.transport || this._makeRequest).call(this, {\n\t      url: url,\n\t      auth: auth,\n\t      data: data,\n\t      options: globalOptions,\n\t      onSuccess: function success() {\n\t        self._resetBackoff();\n\t\n\t        self._triggerEvent('success', {\n\t          data: data,\n\t          src: url\n\t        });\n\t        callback && callback();\n\t      },\n\t      onError: function failure(error) {\n\t        self._logDebug('error', 'Raven transport failed to send: ', error);\n\t\n\t        if (error.request) {\n\t          self._setBackoffState(error.request);\n\t        }\n\t\n\t        self._triggerEvent('failure', {\n\t          data: data,\n\t          src: url\n\t        });\n\t        error = error || new Error('Raven send failed (no additional details provided)');\n\t        callback && callback(error);\n\t      }\n\t    });\n\t  },\n\t\n\t  _makeRequest: function(opts) {\n\t    // Auth is intentionally sent as part of query string (NOT as custom HTTP header) to avoid preflight CORS requests\n\t    var url = opts.url + '?' + urlencode(opts.auth);\n\t\n\t    var evaluatedHeaders = null;\n\t    var evaluatedFetchParameters = {};\n\t\n\t    if (opts.options.headers) {\n\t      evaluatedHeaders = this._evaluateHash(opts.options.headers);\n\t    }\n\t\n\t    if (opts.options.fetchParameters) {\n\t      evaluatedFetchParameters = this._evaluateHash(opts.options.fetchParameters);\n\t    }\n\t\n\t    if (supportsFetch()) {\n\t      evaluatedFetchParameters.body = stringify(opts.data);\n\t\n\t      var defaultFetchOptions = objectMerge({}, this._fetchDefaults);\n\t      var fetchOptions = objectMerge(defaultFetchOptions, evaluatedFetchParameters);\n\t\n\t      if (evaluatedHeaders) {\n\t        fetchOptions.headers = evaluatedHeaders;\n\t      }\n\t\n\t      return _window\n\t        .fetch(url, fetchOptions)\n\t        .then(function(response) {\n\t          if (response.ok) {\n\t            opts.onSuccess && opts.onSuccess();\n\t          } else {\n\t            var error = new Error('Sentry error code: ' + response.status);\n\t            // It's called request only to keep compatibility with XHR interface\n\t            // and not add more redundant checks in setBackoffState method\n\t            error.request = response;\n\t            opts.onError && opts.onError(error);\n\t          }\n\t        })\n\t        ['catch'](function() {\n\t          opts.onError &&\n\t            opts.onError(new Error('Sentry error code: network unavailable'));\n\t        });\n\t    }\n\t\n\t    var request = _window.XMLHttpRequest && new _window.XMLHttpRequest();\n\t    if (!request) return;\n\t\n\t    // if browser doesn't support CORS (e.g. IE7), we are out of luck\n\t    var hasCORS = 'withCredentials' in request || typeof XDomainRequest !== 'undefined';\n\t\n\t    if (!hasCORS) return;\n\t\n\t    if ('withCredentials' in request) {\n\t      request.onreadystatechange = function() {\n\t        if (request.readyState !== 4) {\n\t          return;\n\t        } else if (request.status === 200) {\n\t          opts.onSuccess && opts.onSuccess();\n\t        } else if (opts.onError) {\n\t          var err = new Error('Sentry error code: ' + request.status);\n\t          err.request = request;\n\t          opts.onError(err);\n\t        }\n\t      };\n\t    } else {\n\t      request = new XDomainRequest();\n\t      // xdomainrequest cannot go http -> https (or vice versa),\n\t      // so always use protocol relative\n\t      url = url.replace(/^https?:/, '');\n\t\n\t      // onreadystatechange not supported by XDomainRequest\n\t      if (opts.onSuccess) {\n\t        request.onload = opts.onSuccess;\n\t      }\n\t      if (opts.onError) {\n\t        request.onerror = function() {\n\t          var err = new Error('Sentry error code: XDomainRequest');\n\t          err.request = request;\n\t          opts.onError(err);\n\t        };\n\t      }\n\t    }\n\t\n\t    request.open('POST', url);\n\t\n\t    if (evaluatedHeaders) {\n\t      each(evaluatedHeaders, function(key, value) {\n\t        request.setRequestHeader(key, value);\n\t      });\n\t    }\n\t\n\t    request.send(stringify(opts.data));\n\t  },\n\t\n\t  _evaluateHash: function(hash) {\n\t    var evaluated = {};\n\t\n\t    for (var key in hash) {\n\t      if (hash.hasOwnProperty(key)) {\n\t        var value = hash[key];\n\t        evaluated[key] = typeof value === 'function' ? value() : value;\n\t      }\n\t    }\n\t\n\t    return evaluated;\n\t  },\n\t\n\t  _logDebug: function(level) {\n\t    // We allow `Raven.debug` and `Raven.config(DSN, { debug: true })` to not make backward incompatible API change\n\t    if (\n\t      this._originalConsoleMethods[level] &&\n\t      (this.debug || this._globalOptions.debug)\n\t    ) {\n\t      // In IE<10 console methods do not have their own 'apply' method\n\t      Function.prototype.apply.call(\n\t        this._originalConsoleMethods[level],\n\t        this._originalConsole,\n\t        [].slice.call(arguments, 1)\n\t      );\n\t    }\n\t  },\n\t\n\t  _mergeContext: function(key, context) {\n\t    if (isUndefined(context)) {\n\t      delete this._globalContext[key];\n\t    } else {\n\t      this._globalContext[key] = objectMerge(this._globalContext[key] || {}, context);\n\t    }\n\t  }\n\t};\n\t\n\t// Deprecations\n\tRaven.prototype.setUser = Raven.prototype.setUserContext;\n\tRaven.prototype.setReleaseContext = Raven.prototype.setRelease;\n\t\n\tmodule.exports = Raven;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n\n/***/ 213:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * Enforces a single instance of the Raven client, and the\n\t * main entry point for Raven. If you are a consumer of the\n\t * Raven library, you SHOULD load this file (vs raven.js).\n\t **/\n\t\n\tvar RavenConstructor = __webpack_require__(459);\n\t\n\t// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\n\tvar _window =\n\t  typeof window !== 'undefined'\n\t    ? window\n\t    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\tvar _Raven = _window.Raven;\n\t\n\tvar Raven = new RavenConstructor();\n\t\n\t/*\n\t * Allow multiple versions of Raven to be installed.\n\t * Strip Raven from the global context and returns the instance.\n\t *\n\t * @return {Raven}\n\t */\n\tRaven.noConflict = function() {\n\t  _window.Raven = _Raven;\n\t  return Raven;\n\t};\n\t\n\tRaven.afterLoad();\n\t\n\tmodule.exports = Raven;\n\t\n\t/**\n\t * DISCLAIMER:\n\t *\n\t * Expose `Client` constructor for cases where user want to track multiple \"sub-applications\" in one larger app.\n\t * It's not meant to be used by a wide audience, so pleaaase make sure that you know what you're doing before using it.\n\t * Accidentally calling `install` multiple times, may result in an unexpected behavior that's very hard to debug.\n\t *\n\t * It's called `Client' to be in-line with Raven Node implementation.\n\t *\n\t * HOWTO:\n\t *\n\t * import Raven from 'raven-js';\n\t *\n\t * const someAppReporter = new Raven.Client();\n\t * const someOtherAppReporter = new Raven.Client();\n\t *\n\t * someAppReporter.config('__DSN__', {\n\t *   ...config goes here\n\t * });\n\t *\n\t * someOtherAppReporter.config('__OTHER_DSN__', {\n\t *   ...config goes here\n\t * });\n\t *\n\t * someAppReporter.captureMessage(...);\n\t * someAppReporter.captureException(...);\n\t * someAppReporter.captureBreadcrumb(...);\n\t *\n\t * someOtherAppReporter.captureMessage(...);\n\t * someOtherAppReporter.captureException(...);\n\t * someOtherAppReporter.captureBreadcrumb(...);\n\t *\n\t * It should \"just work\".\n\t */\n\tmodule.exports.Client = RavenConstructor;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n\n/***/ 144:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var stringify = __webpack_require__(214);\n\t\n\tvar _window =\n\t  typeof window !== 'undefined'\n\t    ? window\n\t    : typeof global !== 'undefined'\n\t      ? global\n\t      : typeof self !== 'undefined'\n\t        ? self\n\t        : {};\n\t\n\tfunction isObject(what) {\n\t  return typeof what === 'object' && what !== null;\n\t}\n\t\n\t// Yanked from https://git.io/vS8DV re-used under CC0\n\t// with some tiny modifications\n\tfunction isError(value) {\n\t  switch (Object.prototype.toString.call(value)) {\n\t    case '[object Error]':\n\t      return true;\n\t    case '[object Exception]':\n\t      return true;\n\t    case '[object DOMException]':\n\t      return true;\n\t    default:\n\t      return value instanceof Error;\n\t  }\n\t}\n\t\n\tfunction isErrorEvent(value) {\n\t  return Object.prototype.toString.call(value) === '[object ErrorEvent]';\n\t}\n\t\n\tfunction isDOMError(value) {\n\t  return Object.prototype.toString.call(value) === '[object DOMError]';\n\t}\n\t\n\tfunction isDOMException(value) {\n\t  return Object.prototype.toString.call(value) === '[object DOMException]';\n\t}\n\t\n\tfunction isUndefined(what) {\n\t  return what === void 0;\n\t}\n\t\n\tfunction isFunction(what) {\n\t  return typeof what === 'function';\n\t}\n\t\n\tfunction isPlainObject(what) {\n\t  return Object.prototype.toString.call(what) === '[object Object]';\n\t}\n\t\n\tfunction isString(what) {\n\t  return Object.prototype.toString.call(what) === '[object String]';\n\t}\n\t\n\tfunction isArray(what) {\n\t  return Object.prototype.toString.call(what) === '[object Array]';\n\t}\n\t\n\tfunction isEmptyObject(what) {\n\t  if (!isPlainObject(what)) return false;\n\t\n\t  for (var _ in what) {\n\t    if (what.hasOwnProperty(_)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\t\n\tfunction supportsErrorEvent() {\n\t  try {\n\t    new ErrorEvent(''); // eslint-disable-line no-new\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t}\n\t\n\tfunction supportsDOMError() {\n\t  try {\n\t    new DOMError(''); // eslint-disable-line no-new\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t}\n\t\n\tfunction supportsDOMException() {\n\t  try {\n\t    new DOMException(''); // eslint-disable-line no-new\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t}\n\t\n\tfunction supportsFetch() {\n\t  if (!('fetch' in _window)) return false;\n\t\n\t  try {\n\t    new Headers(); // eslint-disable-line no-new\n\t    new Request(''); // eslint-disable-line no-new\n\t    new Response(); // eslint-disable-line no-new\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t}\n\t\n\t// Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n\t// https://caniuse.com/#feat=referrer-policy\n\t// It doesn't. And it throw exception instead of ignoring this parameter...\n\t// REF: https://github.com/getsentry/raven-js/issues/1233\n\tfunction supportsReferrerPolicy() {\n\t  if (!supportsFetch()) return false;\n\t\n\t  try {\n\t    // eslint-disable-next-line no-new\n\t    new Request('pickleRick', {\n\t      referrerPolicy: 'origin'\n\t    });\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t}\n\t\n\tfunction supportsPromiseRejectionEvent() {\n\t  return typeof PromiseRejectionEvent === 'function';\n\t}\n\t\n\tfunction wrappedCallback(callback) {\n\t  function dataCallback(data, original) {\n\t    var normalizedData = callback(data) || data;\n\t    if (original) {\n\t      return original(normalizedData) || normalizedData;\n\t    }\n\t    return normalizedData;\n\t  }\n\t\n\t  return dataCallback;\n\t}\n\t\n\tfunction each(obj, callback) {\n\t  var i, j;\n\t\n\t  if (isUndefined(obj.length)) {\n\t    for (i in obj) {\n\t      if (hasKey(obj, i)) {\n\t        callback.call(null, i, obj[i]);\n\t      }\n\t    }\n\t  } else {\n\t    j = obj.length;\n\t    if (j) {\n\t      for (i = 0; i < j; i++) {\n\t        callback.call(null, i, obj[i]);\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\tfunction objectMerge(obj1, obj2) {\n\t  if (!obj2) {\n\t    return obj1;\n\t  }\n\t  each(obj2, function(key, value) {\n\t    obj1[key] = value;\n\t  });\n\t  return obj1;\n\t}\n\t\n\t/**\n\t * This function is only used for react-native.\n\t * react-native freezes object that have already been sent over the\n\t * js bridge. We need this function in order to check if the object is frozen.\n\t * So it's ok that objectFrozen returns false if Object.isFrozen is not\n\t * supported because it's not relevant for other \"platforms\". See related issue:\n\t * https://github.com/getsentry/react-native-sentry/issues/57\n\t */\n\tfunction objectFrozen(obj) {\n\t  if (!Object.isFrozen) {\n\t    return false;\n\t  }\n\t  return Object.isFrozen(obj);\n\t}\n\t\n\tfunction truncate(str, max) {\n\t  if (typeof max !== 'number') {\n\t    throw new Error('2nd argument to `truncate` function should be a number');\n\t  }\n\t  if (typeof str !== 'string' || max === 0) {\n\t    return str;\n\t  }\n\t  return str.length <= max ? str : str.substr(0, max) + '\\u2026';\n\t}\n\t\n\t/**\n\t * hasKey, a better form of hasOwnProperty\n\t * Example: hasKey(MainHostObject, property) === true/false\n\t *\n\t * @param {Object} host object to check property\n\t * @param {string} key to check\n\t */\n\tfunction hasKey(object, key) {\n\t  return Object.prototype.hasOwnProperty.call(object, key);\n\t}\n\t\n\tfunction joinRegExp(patterns) {\n\t  // Combine an array of regular expressions and strings into one large regexp\n\t  // Be mad.\n\t  var sources = [],\n\t    i = 0,\n\t    len = patterns.length,\n\t    pattern;\n\t\n\t  for (; i < len; i++) {\n\t    pattern = patterns[i];\n\t    if (isString(pattern)) {\n\t      // If it's a string, we need to escape it\n\t      // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\t      sources.push(pattern.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'));\n\t    } else if (pattern && pattern.source) {\n\t      // If it's a regexp already, we want to extract the source\n\t      sources.push(pattern.source);\n\t    }\n\t    // Intentionally skip other cases\n\t  }\n\t  return new RegExp(sources.join('|'), 'i');\n\t}\n\t\n\tfunction urlencode(o) {\n\t  var pairs = [];\n\t  each(o, function(key, value) {\n\t    pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n\t  });\n\t  return pairs.join('&');\n\t}\n\t\n\t// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n\t// intentionally using regex and not <a/> href parsing trick because React Native and other\n\t// environments where DOM might not be available\n\tfunction parseUrl(url) {\n\t  if (typeof url !== 'string') return {};\n\t  var match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\t\n\t  // coerce to undefined values to empty string so we don't get 'undefined'\n\t  var query = match[6] || '';\n\t  var fragment = match[8] || '';\n\t  return {\n\t    protocol: match[2],\n\t    host: match[4],\n\t    path: match[5],\n\t    relative: match[5] + query + fragment // everything minus origin\n\t  };\n\t}\n\tfunction uuid4() {\n\t  var crypto = _window.crypto || _window.msCrypto;\n\t\n\t  if (!isUndefined(crypto) && crypto.getRandomValues) {\n\t    // Use window.crypto API if available\n\t    // eslint-disable-next-line no-undef\n\t    var arr = new Uint16Array(8);\n\t    crypto.getRandomValues(arr);\n\t\n\t    // set 4 in byte 7\n\t    arr[3] = (arr[3] & 0xfff) | 0x4000;\n\t    // set 2 most significant bits of byte 9 to '10'\n\t    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\t\n\t    var pad = function(num) {\n\t      var v = num.toString(16);\n\t      while (v.length < 4) {\n\t        v = '0' + v;\n\t      }\n\t      return v;\n\t    };\n\t\n\t    return (\n\t      pad(arr[0]) +\n\t      pad(arr[1]) +\n\t      pad(arr[2]) +\n\t      pad(arr[3]) +\n\t      pad(arr[4]) +\n\t      pad(arr[5]) +\n\t      pad(arr[6]) +\n\t      pad(arr[7])\n\t    );\n\t  } else {\n\t    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n\t    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t      var r = (Math.random() * 16) | 0,\n\t        v = c === 'x' ? r : (r & 0x3) | 0x8;\n\t      return v.toString(16);\n\t    });\n\t  }\n\t}\n\t\n\t/**\n\t * Given a child DOM element, returns a query-selector statement describing that\n\t * and its ancestors\n\t * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n\t * @param elem\n\t * @returns {string}\n\t */\n\tfunction htmlTreeAsString(elem) {\n\t  /* eslint no-extra-parens:0*/\n\t  var MAX_TRAVERSE_HEIGHT = 5,\n\t    MAX_OUTPUT_LEN = 80,\n\t    out = [],\n\t    height = 0,\n\t    len = 0,\n\t    separator = ' > ',\n\t    sepLength = separator.length,\n\t    nextStr;\n\t\n\t  while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n\t    nextStr = htmlElementAsString(elem);\n\t    // bail out if\n\t    // - nextStr is the 'html' element\n\t    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n\t    //   (ignore this limit if we are on the first iteration)\n\t    if (\n\t      nextStr === 'html' ||\n\t      (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)\n\t    ) {\n\t      break;\n\t    }\n\t\n\t    out.push(nextStr);\n\t\n\t    len += nextStr.length;\n\t    elem = elem.parentNode;\n\t  }\n\t\n\t  return out.reverse().join(separator);\n\t}\n\t\n\t/**\n\t * Returns a simple, query-selector representation of a DOM element\n\t * e.g. [HTMLElement] => input#foo.btn[name=baz]\n\t * @param HTMLElement\n\t * @returns {string}\n\t */\n\tfunction htmlElementAsString(elem) {\n\t  var out = [],\n\t    className,\n\t    classes,\n\t    key,\n\t    attr,\n\t    i;\n\t\n\t  if (!elem || !elem.tagName) {\n\t    return '';\n\t  }\n\t\n\t  out.push(elem.tagName.toLowerCase());\n\t  if (elem.id) {\n\t    out.push('#' + elem.id);\n\t  }\n\t\n\t  className = elem.className;\n\t  if (className && isString(className)) {\n\t    classes = className.split(/\\s+/);\n\t    for (i = 0; i < classes.length; i++) {\n\t      out.push('.' + classes[i]);\n\t    }\n\t  }\n\t  var attrWhitelist = ['type', 'name', 'title', 'alt'];\n\t  for (i = 0; i < attrWhitelist.length; i++) {\n\t    key = attrWhitelist[i];\n\t    attr = elem.getAttribute(key);\n\t    if (attr) {\n\t      out.push('[' + key + '=\"' + attr + '\"]');\n\t    }\n\t  }\n\t  return out.join('');\n\t}\n\t\n\t/**\n\t * Returns true if either a OR b is truthy, but not both\n\t */\n\tfunction isOnlyOneTruthy(a, b) {\n\t  return !!(!!a ^ !!b);\n\t}\n\t\n\t/**\n\t * Returns true if both parameters are undefined\n\t */\n\tfunction isBothUndefined(a, b) {\n\t  return isUndefined(a) && isUndefined(b);\n\t}\n\t\n\t/**\n\t * Returns true if the two input exception interfaces have the same content\n\t */\n\tfunction isSameException(ex1, ex2) {\n\t  if (isOnlyOneTruthy(ex1, ex2)) return false;\n\t\n\t  ex1 = ex1.values[0];\n\t  ex2 = ex2.values[0];\n\t\n\t  if (ex1.type !== ex2.type || ex1.value !== ex2.value) return false;\n\t\n\t  // in case both stacktraces are undefined, we can't decide so default to false\n\t  if (isBothUndefined(ex1.stacktrace, ex2.stacktrace)) return false;\n\t\n\t  return isSameStacktrace(ex1.stacktrace, ex2.stacktrace);\n\t}\n\t\n\t/**\n\t * Returns true if the two input stack trace interfaces have the same content\n\t */\n\tfunction isSameStacktrace(stack1, stack2) {\n\t  if (isOnlyOneTruthy(stack1, stack2)) return false;\n\t\n\t  var frames1 = stack1.frames;\n\t  var frames2 = stack2.frames;\n\t\n\t  // Exit early if stacktrace is malformed\n\t  if (frames1 === undefined || frames2 === undefined) return false;\n\t\n\t  // Exit early if frame count differs\n\t  if (frames1.length !== frames2.length) return false;\n\t\n\t  // Iterate through every frame; bail out if anything differs\n\t  var a, b;\n\t  for (var i = 0; i < frames1.length; i++) {\n\t    a = frames1[i];\n\t    b = frames2[i];\n\t    if (\n\t      a.filename !== b.filename ||\n\t      a.lineno !== b.lineno ||\n\t      a.colno !== b.colno ||\n\t      a['function'] !== b['function']\n\t    )\n\t      return false;\n\t  }\n\t  return true;\n\t}\n\t\n\t/**\n\t * Polyfill a method\n\t * @param obj object e.g. `document`\n\t * @param name method name present on object e.g. `addEventListener`\n\t * @param replacement replacement function\n\t * @param track {optional} record instrumentation to an array\n\t */\n\tfunction fill(obj, name, replacement, track) {\n\t  if (obj == null) return;\n\t  var orig = obj[name];\n\t  obj[name] = replacement(orig);\n\t  obj[name].__raven__ = true;\n\t  obj[name].__orig__ = orig;\n\t  if (track) {\n\t    track.push([obj, name, orig]);\n\t  }\n\t}\n\t\n\t/**\n\t * Join values in array\n\t * @param input array of values to be joined together\n\t * @param delimiter string to be placed in-between values\n\t * @returns {string}\n\t */\n\tfunction safeJoin(input, delimiter) {\n\t  if (!isArray(input)) return '';\n\t\n\t  var output = [];\n\t\n\t  for (var i = 0; i < input.length; i++) {\n\t    try {\n\t      output.push(String(input[i]));\n\t    } catch (e) {\n\t      output.push('[value cannot be serialized]');\n\t    }\n\t  }\n\t\n\t  return output.join(delimiter);\n\t}\n\t\n\t// Default Node.js REPL depth\n\tvar MAX_SERIALIZE_EXCEPTION_DEPTH = 3;\n\t// 50kB, as 100kB is max payload size, so half sounds reasonable\n\tvar MAX_SERIALIZE_EXCEPTION_SIZE = 50 * 1024;\n\tvar MAX_SERIALIZE_KEYS_LENGTH = 40;\n\t\n\tfunction utf8Length(value) {\n\t  return ~-encodeURI(value).split(/%..|./).length;\n\t}\n\t\n\tfunction jsonSize(value) {\n\t  return utf8Length(JSON.stringify(value));\n\t}\n\t\n\tfunction serializeValue(value) {\n\t  if (typeof value === 'string') {\n\t    var maxLength = 40;\n\t    return truncate(value, maxLength);\n\t  } else if (\n\t    typeof value === 'number' ||\n\t    typeof value === 'boolean' ||\n\t    typeof value === 'undefined'\n\t  ) {\n\t    return value;\n\t  }\n\t\n\t  var type = Object.prototype.toString.call(value);\n\t\n\t  // Node.js REPL notation\n\t  if (type === '[object Object]') return '[Object]';\n\t  if (type === '[object Array]') return '[Array]';\n\t  if (type === '[object Function]')\n\t    return value.name ? '[Function: ' + value.name + ']' : '[Function]';\n\t\n\t  return value;\n\t}\n\t\n\tfunction serializeObject(value, depth) {\n\t  if (depth === 0) return serializeValue(value);\n\t\n\t  if (isPlainObject(value)) {\n\t    return Object.keys(value).reduce(function(acc, key) {\n\t      acc[key] = serializeObject(value[key], depth - 1);\n\t      return acc;\n\t    }, {});\n\t  } else if (Array.isArray(value)) {\n\t    return value.map(function(val) {\n\t      return serializeObject(val, depth - 1);\n\t    });\n\t  }\n\t\n\t  return serializeValue(value);\n\t}\n\t\n\tfunction serializeException(ex, depth, maxSize) {\n\t  if (!isPlainObject(ex)) return ex;\n\t\n\t  depth = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_DEPTH : depth;\n\t  maxSize = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_SIZE : maxSize;\n\t\n\t  var serialized = serializeObject(ex, depth);\n\t\n\t  if (jsonSize(stringify(serialized)) > maxSize) {\n\t    return serializeException(ex, depth - 1);\n\t  }\n\t\n\t  return serialized;\n\t}\n\t\n\tfunction serializeKeysForMessage(keys, maxLength) {\n\t  if (typeof keys === 'number' || typeof keys === 'string') return keys.toString();\n\t  if (!Array.isArray(keys)) return '';\n\t\n\t  keys = keys.filter(function(key) {\n\t    return typeof key === 'string';\n\t  });\n\t  if (keys.length === 0) return '[object has no keys]';\n\t\n\t  maxLength = typeof maxLength !== 'number' ? MAX_SERIALIZE_KEYS_LENGTH : maxLength;\n\t  if (keys[0].length >= maxLength) return keys[0];\n\t\n\t  for (var usedKeys = keys.length; usedKeys > 0; usedKeys--) {\n\t    var serialized = keys.slice(0, usedKeys).join(', ');\n\t    if (serialized.length > maxLength) continue;\n\t    if (usedKeys === keys.length) return serialized;\n\t    return serialized + '\\u2026';\n\t  }\n\t\n\t  return '';\n\t}\n\t\n\tfunction sanitize(input, sanitizeKeys) {\n\t  if (!isArray(sanitizeKeys) || (isArray(sanitizeKeys) && sanitizeKeys.length === 0))\n\t    return input;\n\t\n\t  var sanitizeRegExp = joinRegExp(sanitizeKeys);\n\t  var sanitizeMask = '********';\n\t  var safeInput;\n\t\n\t  try {\n\t    safeInput = JSON.parse(stringify(input));\n\t  } catch (o_O) {\n\t    return input;\n\t  }\n\t\n\t  function sanitizeWorker(workerInput) {\n\t    if (isArray(workerInput)) {\n\t      return workerInput.map(function(val) {\n\t        return sanitizeWorker(val);\n\t      });\n\t    }\n\t\n\t    if (isPlainObject(workerInput)) {\n\t      return Object.keys(workerInput).reduce(function(acc, k) {\n\t        if (sanitizeRegExp.test(k)) {\n\t          acc[k] = sanitizeMask;\n\t        } else {\n\t          acc[k] = sanitizeWorker(workerInput[k]);\n\t        }\n\t        return acc;\n\t      }, {});\n\t    }\n\t\n\t    return workerInput;\n\t  }\n\t\n\t  return sanitizeWorker(safeInput);\n\t}\n\t\n\tmodule.exports = {\n\t  isObject: isObject,\n\t  isError: isError,\n\t  isErrorEvent: isErrorEvent,\n\t  isDOMError: isDOMError,\n\t  isDOMException: isDOMException,\n\t  isUndefined: isUndefined,\n\t  isFunction: isFunction,\n\t  isPlainObject: isPlainObject,\n\t  isString: isString,\n\t  isArray: isArray,\n\t  isEmptyObject: isEmptyObject,\n\t  supportsErrorEvent: supportsErrorEvent,\n\t  supportsDOMError: supportsDOMError,\n\t  supportsDOMException: supportsDOMException,\n\t  supportsFetch: supportsFetch,\n\t  supportsReferrerPolicy: supportsReferrerPolicy,\n\t  supportsPromiseRejectionEvent: supportsPromiseRejectionEvent,\n\t  wrappedCallback: wrappedCallback,\n\t  each: each,\n\t  objectMerge: objectMerge,\n\t  truncate: truncate,\n\t  objectFrozen: objectFrozen,\n\t  hasKey: hasKey,\n\t  joinRegExp: joinRegExp,\n\t  urlencode: urlencode,\n\t  uuid4: uuid4,\n\t  htmlTreeAsString: htmlTreeAsString,\n\t  htmlElementAsString: htmlElementAsString,\n\t  isSameException: isSameException,\n\t  isSameStacktrace: isSameStacktrace,\n\t  parseUrl: parseUrl,\n\t  fill: fill,\n\t  safeJoin: safeJoin,\n\t  serializeException: serializeException,\n\t  serializeKeysForMessage: serializeKeysForMessage,\n\t  sanitize: sanitize\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n\n/***/ 460:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var utils = __webpack_require__(144);\n\t\n\t/*\n\t TraceKit - Cross brower stack traces\n\t\n\t This was originally forked from github.com/occ/TraceKit, but has since been\n\t largely re-written and is now maintained as part of raven-js.  Tests for\n\t this are in test/vendor.\n\t\n\t MIT license\n\t*/\n\t\n\tvar TraceKit = {\n\t  collectWindowErrors: true,\n\t  debug: false\n\t};\n\t\n\t// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\n\tvar _window =\n\t  typeof window !== 'undefined'\n\t    ? window\n\t    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\t\n\t// global reference to slice\n\tvar _slice = [].slice;\n\tvar UNKNOWN_FUNCTION = '?';\n\t\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\n\tvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\t\n\tfunction getLocationHref() {\n\t  if (typeof document === 'undefined' || document.location == null) return '';\n\t  return document.location.href;\n\t}\n\t\n\tfunction getLocationOrigin() {\n\t  if (typeof document === 'undefined' || document.location == null) return '';\n\t\n\t  // Oh dear IE10...\n\t  if (!document.location.origin) {\n\t    return (\n\t      document.location.protocol +\n\t      '//' +\n\t      document.location.hostname +\n\t      (document.location.port ? ':' + document.location.port : '')\n\t    );\n\t  }\n\t\n\t  return document.location.origin;\n\t}\n\t\n\t/**\n\t * TraceKit.report: cross-browser processing of unhandled exceptions\n\t *\n\t * Syntax:\n\t *   TraceKit.report.subscribe(function(stackInfo) { ... })\n\t *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n\t *   TraceKit.report(exception)\n\t *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n\t *\n\t * Supports:\n\t *   - Firefox: full stack trace with line numbers, plus column number\n\t *              on top frame; column number is not guaranteed\n\t *   - Opera:   full stack trace with line and column numbers\n\t *   - Chrome:  full stack trace with line and column numbers\n\t *   - Safari:  line and column number for the top frame only; some frames\n\t *              may be missing, and column number is not guaranteed\n\t *   - IE:      line and column number for the top frame only; some frames\n\t *              may be missing, and column number is not guaranteed\n\t *\n\t * In theory, TraceKit should work on all of the following versions:\n\t *   - IE5.5+ (only 8.0 tested)\n\t *   - Firefox 0.9+ (only 3.5+ tested)\n\t *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n\t *     Exceptions Have Stacktrace to be enabled in opera:config)\n\t *   - Safari 3+ (only 4+ tested)\n\t *   - Chrome 1+ (only 5+ tested)\n\t *   - Konqueror 3.5+ (untested)\n\t *\n\t * Requires TraceKit.computeStackTrace.\n\t *\n\t * Tries to catch all unhandled exceptions and report them to the\n\t * subscribed handlers. Please note that TraceKit.report will rethrow the\n\t * exception. This is REQUIRED in order to get a useful stack trace in IE.\n\t * If the exception does not reach the top of the browser, you will only\n\t * get a stack trace from the point where TraceKit.report was called.\n\t *\n\t * Handlers receive a stackInfo object as described in the\n\t * TraceKit.computeStackTrace docs.\n\t */\n\tTraceKit.report = (function reportModuleWrapper() {\n\t  var handlers = [],\n\t    lastArgs = null,\n\t    lastException = null,\n\t    lastExceptionStack = null;\n\t\n\t  /**\n\t   * Add a crash handler.\n\t   * @param {Function} handler\n\t   */\n\t  function subscribe(handler) {\n\t    installGlobalHandler();\n\t    handlers.push(handler);\n\t  }\n\t\n\t  /**\n\t   * Remove a crash handler.\n\t   * @param {Function} handler\n\t   */\n\t  function unsubscribe(handler) {\n\t    for (var i = handlers.length - 1; i >= 0; --i) {\n\t      if (handlers[i] === handler) {\n\t        handlers.splice(i, 1);\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Remove all crash handlers.\n\t   */\n\t  function unsubscribeAll() {\n\t    uninstallGlobalHandler();\n\t    handlers = [];\n\t  }\n\t\n\t  /**\n\t   * Dispatch stack information to all handlers.\n\t   * @param {Object.<string, *>} stack\n\t   */\n\t  function notifyHandlers(stack, isWindowError) {\n\t    var exception = null;\n\t    if (isWindowError && !TraceKit.collectWindowErrors) {\n\t      return;\n\t    }\n\t    for (var i in handlers) {\n\t      if (handlers.hasOwnProperty(i)) {\n\t        try {\n\t          handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n\t        } catch (inner) {\n\t          exception = inner;\n\t        }\n\t      }\n\t    }\n\t\n\t    if (exception) {\n\t      throw exception;\n\t    }\n\t  }\n\t\n\t  var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\t\n\t  /**\n\t   * Ensures all global unhandled exceptions are recorded.\n\t   * Supported by Gecko and IE.\n\t   * @param {string} msg Error message.\n\t   * @param {string} url URL of script that generated the exception.\n\t   * @param {(number|string)} lineNo The line number at which the error\n\t   * occurred.\n\t   * @param {?(number|string)} colNo The column number at which the error\n\t   * occurred.\n\t   * @param {?Error} ex The actual Error object.\n\t   */\n\t  function traceKitWindowOnError(msg, url, lineNo, colNo, ex) {\n\t    var stack = null;\n\t    // If 'ex' is ErrorEvent, get real Error from inside\n\t    var exception = utils.isErrorEvent(ex) ? ex.error : ex;\n\t    // If 'msg' is ErrorEvent, get real message from inside\n\t    var message = utils.isErrorEvent(msg) ? msg.message : msg;\n\t\n\t    if (lastExceptionStack) {\n\t      TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(\n\t        lastExceptionStack,\n\t        url,\n\t        lineNo,\n\t        message\n\t      );\n\t      processLastException();\n\t    } else if (exception && utils.isError(exception)) {\n\t      // non-string `exception` arg; attempt to extract stack trace\n\t\n\t      // New chrome and blink send along a real error object\n\t      // Let's just report that like a normal error.\n\t      // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n\t      stack = TraceKit.computeStackTrace(exception);\n\t      notifyHandlers(stack, true);\n\t    } else {\n\t      var location = {\n\t        url: url,\n\t        line: lineNo,\n\t        column: colNo\n\t      };\n\t\n\t      var name = undefined;\n\t      var groups;\n\t\n\t      if ({}.toString.call(message) === '[object String]') {\n\t        var groups = message.match(ERROR_TYPES_RE);\n\t        if (groups) {\n\t          name = groups[1];\n\t          message = groups[2];\n\t        }\n\t      }\n\t\n\t      location.func = UNKNOWN_FUNCTION;\n\t\n\t      stack = {\n\t        name: name,\n\t        message: message,\n\t        url: getLocationHref(),\n\t        stack: [location]\n\t      };\n\t      notifyHandlers(stack, true);\n\t    }\n\t\n\t    if (_oldOnerrorHandler) {\n\t      return _oldOnerrorHandler.apply(this, arguments);\n\t    }\n\t\n\t    return false;\n\t  }\n\t\n\t  function installGlobalHandler() {\n\t    if (_onErrorHandlerInstalled) {\n\t      return;\n\t    }\n\t    _oldOnerrorHandler = _window.onerror;\n\t    _window.onerror = traceKitWindowOnError;\n\t    _onErrorHandlerInstalled = true;\n\t  }\n\t\n\t  function uninstallGlobalHandler() {\n\t    if (!_onErrorHandlerInstalled) {\n\t      return;\n\t    }\n\t    _window.onerror = _oldOnerrorHandler;\n\t    _onErrorHandlerInstalled = false;\n\t    _oldOnerrorHandler = undefined;\n\t  }\n\t\n\t  function processLastException() {\n\t    var _lastExceptionStack = lastExceptionStack,\n\t      _lastArgs = lastArgs;\n\t    lastArgs = null;\n\t    lastExceptionStack = null;\n\t    lastException = null;\n\t    notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n\t  }\n\t\n\t  /**\n\t   * Reports an unhandled Error to TraceKit.\n\t   * @param {Error} ex\n\t   * @param {?boolean} rethrow If false, do not re-throw the exception.\n\t   * Only used for window.onerror to not cause an infinite loop of\n\t   * rethrowing.\n\t   */\n\t  function report(ex, rethrow) {\n\t    var args = _slice.call(arguments, 1);\n\t    if (lastExceptionStack) {\n\t      if (lastException === ex) {\n\t        return; // already caught by an inner catch block, ignore\n\t      } else {\n\t        processLastException();\n\t      }\n\t    }\n\t\n\t    var stack = TraceKit.computeStackTrace(ex);\n\t    lastExceptionStack = stack;\n\t    lastException = ex;\n\t    lastArgs = args;\n\t\n\t    // If the stack trace is incomplete, wait for 2 seconds for\n\t    // slow slow IE to see if onerror occurs or not before reporting\n\t    // this exception; otherwise, we will end up with an incomplete\n\t    // stack trace\n\t    setTimeout(function() {\n\t      if (lastException === ex) {\n\t        processLastException();\n\t      }\n\t    }, stack.incomplete ? 2000 : 0);\n\t\n\t    if (rethrow !== false) {\n\t      throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n\t    }\n\t  }\n\t\n\t  report.subscribe = subscribe;\n\t  report.unsubscribe = unsubscribe;\n\t  report.uninstall = unsubscribeAll;\n\t  return report;\n\t})();\n\t\n\t/**\n\t * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n\t *\n\t * Syntax:\n\t *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n\t * Returns:\n\t *   s.name              - exception name\n\t *   s.message           - exception message\n\t *   s.stack[i].url      - JavaScript or HTML file URL\n\t *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n\t *   s.stack[i].args     - arguments passed to the function, if known\n\t *   s.stack[i].line     - line number, if known\n\t *   s.stack[i].column   - column number, if known\n\t *\n\t * Supports:\n\t *   - Firefox:  full stack trace with line numbers and unreliable column\n\t *               number on top frame\n\t *   - Opera 10: full stack trace with line and column numbers\n\t *   - Opera 9-: full stack trace with line numbers\n\t *   - Chrome:   full stack trace with line and column numbers\n\t *   - Safari:   line and column number for the topmost stacktrace element\n\t *               only\n\t *   - IE:       no line numbers whatsoever\n\t *\n\t * Tries to guess names of anonymous functions by looking for assignments\n\t * in the source code. In IE and Safari, we have to guess source file names\n\t * by searching for function bodies inside all page scripts. This will not\n\t * work for scripts that are loaded cross-domain.\n\t * Here be dragons: some function names may be guessed incorrectly, and\n\t * duplicate functions may be mismatched.\n\t *\n\t * TraceKit.computeStackTrace should only be used for tracing purposes.\n\t * Logging of unhandled exceptions should be done with TraceKit.report,\n\t * which builds on top of TraceKit.computeStackTrace and provides better\n\t * IE support by utilizing the window.onerror event to retrieve information\n\t * about the top of the stack.\n\t *\n\t * Note: In IE and Safari, no stack trace is recorded on the Error object,\n\t * so computeStackTrace instead walks its *own* chain of callers.\n\t * This means that:\n\t *  * in Safari, some methods may be missing from the stack trace;\n\t *  * in IE, the topmost function in the stack trace will always be the\n\t *    caller of computeStackTrace.\n\t *\n\t * This is okay for tracing (because you are likely to be calling\n\t * computeStackTrace from the function you want to be the topmost element\n\t * of the stack trace anyway), but not okay for logging unhandled\n\t * exceptions (because your catch block will likely be far away from the\n\t * inner function that actually caused the exception).\n\t *\n\t */\n\tTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n\t  // Contents of Exception in various browsers.\n\t  //\n\t  // SAFARI:\n\t  // ex.message = Can't find variable: qq\n\t  // ex.line = 59\n\t  // ex.sourceId = 580238192\n\t  // ex.sourceURL = http://...\n\t  // ex.expressionBeginOffset = 96\n\t  // ex.expressionCaretOffset = 98\n\t  // ex.expressionEndOffset = 98\n\t  // ex.name = ReferenceError\n\t  //\n\t  // FIREFOX:\n\t  // ex.message = qq is not defined\n\t  // ex.fileName = http://...\n\t  // ex.lineNumber = 59\n\t  // ex.columnNumber = 69\n\t  // ex.stack = ...stack trace... (see the example below)\n\t  // ex.name = ReferenceError\n\t  //\n\t  // CHROME:\n\t  // ex.message = qq is not defined\n\t  // ex.name = ReferenceError\n\t  // ex.type = not_defined\n\t  // ex.arguments = ['aa']\n\t  // ex.stack = ...stack trace...\n\t  //\n\t  // INTERNET EXPLORER:\n\t  // ex.message = ...\n\t  // ex.name = ReferenceError\n\t  //\n\t  // OPERA:\n\t  // ex.message = ...message... (see the example below)\n\t  // ex.name = ReferenceError\n\t  // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n\t  // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\t\n\t  /**\n\t   * Computes stack trace information from the stack property.\n\t   * Chrome and Gecko use this property.\n\t   * @param {Error} ex\n\t   * @return {?Object.<string, *>} Stack trace information.\n\t   */\n\t  function computeStackTraceFromStackProp(ex) {\n\t    if (typeof ex.stack === 'undefined' || !ex.stack) return;\n\t\n\t    var chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n\t    var winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx(?:-web)|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\t    // NOTE: blob urls are now supposed to always have an origin, therefore it's format\n\t    // which is `blob:http://url/path/with-some-uuid`, is matched by `blob.*?:\\/` as well\n\t    var gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\\/.*?|\\[native code\\]|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\n\t    // Used to additionally parse URL/line/column from eval frames\n\t    var geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\t    var chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\t    var lines = ex.stack.split('\\n');\n\t    var stack = [];\n\t    var submatch;\n\t    var parts;\n\t    var element;\n\t    var reference = /^(.*) is undefined$/.exec(ex.message);\n\t\n\t    for (var i = 0, j = lines.length; i < j; ++i) {\n\t      if ((parts = chrome.exec(lines[i]))) {\n\t        var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n\t        var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\t        if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n\t          // throw out eval line/column and use top-most line/column number\n\t          parts[2] = submatch[1]; // url\n\t          parts[3] = submatch[2]; // line\n\t          parts[4] = submatch[3]; // column\n\t        }\n\t        element = {\n\t          url: !isNative ? parts[2] : null,\n\t          func: parts[1] || UNKNOWN_FUNCTION,\n\t          args: isNative ? [parts[2]] : [],\n\t          line: parts[3] ? +parts[3] : null,\n\t          column: parts[4] ? +parts[4] : null\n\t        };\n\t      } else if ((parts = winjs.exec(lines[i]))) {\n\t        element = {\n\t          url: parts[2],\n\t          func: parts[1] || UNKNOWN_FUNCTION,\n\t          args: [],\n\t          line: +parts[3],\n\t          column: parts[4] ? +parts[4] : null\n\t        };\n\t      } else if ((parts = gecko.exec(lines[i]))) {\n\t        var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n\t        if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n\t          // throw out eval line/column and use top-most line number\n\t          parts[3] = submatch[1];\n\t          parts[4] = submatch[2];\n\t          parts[5] = null; // no column when eval\n\t        } else if (i === 0 && !parts[5] && typeof ex.columnNumber !== 'undefined') {\n\t          // FireFox uses this awesome columnNumber property for its top frame\n\t          // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n\t          // so adding 1\n\t          // NOTE: this hack doesn't work if top-most frame is eval\n\t          stack[0].column = ex.columnNumber + 1;\n\t        }\n\t        element = {\n\t          url: parts[3],\n\t          func: parts[1] || UNKNOWN_FUNCTION,\n\t          args: parts[2] ? parts[2].split(',') : [],\n\t          line: parts[4] ? +parts[4] : null,\n\t          column: parts[5] ? +parts[5] : null\n\t        };\n\t      } else {\n\t        continue;\n\t      }\n\t\n\t      if (!element.func && element.line) {\n\t        element.func = UNKNOWN_FUNCTION;\n\t      }\n\t\n\t      if (element.url && element.url.substr(0, 5) === 'blob:') {\n\t        // Special case for handling JavaScript loaded into a blob.\n\t        // We use a synchronous AJAX request here as a blob is already in\n\t        // memory - it's not making a network request.  This will generate a warning\n\t        // in the browser console, but there has already been an error so that's not\n\t        // that much of an issue.\n\t        var xhr = new XMLHttpRequest();\n\t        xhr.open('GET', element.url, false);\n\t        xhr.send(null);\n\t\n\t        // If we failed to download the source, skip this patch\n\t        if (xhr.status === 200) {\n\t          var source = xhr.responseText || '';\n\t\n\t          // We trim the source down to the last 300 characters as sourceMappingURL is always at the end of the file.\n\t          // Why 300? To be in line with: https://github.com/getsentry/sentry/blob/4af29e8f2350e20c28a6933354e4f42437b4ba42/src/sentry/lang/javascript/processor.py#L164-L175\n\t          source = source.slice(-300);\n\t\n\t          // Now we dig out the source map URL\n\t          var sourceMaps = source.match(/\\/\\/# sourceMappingURL=(.*)$/);\n\t\n\t          // If we don't find a source map comment or we find more than one, continue on to the next element.\n\t          if (sourceMaps) {\n\t            var sourceMapAddress = sourceMaps[1];\n\t\n\t            // Now we check to see if it's a relative URL.\n\t            // If it is, convert it to an absolute one.\n\t            if (sourceMapAddress.charAt(0) === '~') {\n\t              sourceMapAddress = getLocationOrigin() + sourceMapAddress.slice(1);\n\t            }\n\t\n\t            // Now we strip the '.map' off of the end of the URL and update the\n\t            // element so that Sentry can match the map to the blob.\n\t            element.url = sourceMapAddress.slice(0, -4);\n\t          }\n\t        }\n\t      }\n\t\n\t      stack.push(element);\n\t    }\n\t\n\t    if (!stack.length) {\n\t      return null;\n\t    }\n\t\n\t    return {\n\t      name: ex.name,\n\t      message: ex.message,\n\t      url: getLocationHref(),\n\t      stack: stack\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Adds information about the first frame to incomplete stack traces.\n\t   * Safari and IE require this to get complete data on the first frame.\n\t   * @param {Object.<string, *>} stackInfo Stack trace information from\n\t   * one of the compute* methods.\n\t   * @param {string} url The URL of the script that caused an error.\n\t   * @param {(number|string)} lineNo The line number of the script that\n\t   * caused an error.\n\t   * @param {string=} message The error generated by the browser, which\n\t   * hopefully contains the name of the object that caused the error.\n\t   * @return {boolean} Whether or not the stack information was\n\t   * augmented.\n\t   */\n\t  function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n\t    var initial = {\n\t      url: url,\n\t      line: lineNo\n\t    };\n\t\n\t    if (initial.url && initial.line) {\n\t      stackInfo.incomplete = false;\n\t\n\t      if (!initial.func) {\n\t        initial.func = UNKNOWN_FUNCTION;\n\t      }\n\t\n\t      if (stackInfo.stack.length > 0) {\n\t        if (stackInfo.stack[0].url === initial.url) {\n\t          if (stackInfo.stack[0].line === initial.line) {\n\t            return false; // already in stack trace\n\t          } else if (\n\t            !stackInfo.stack[0].line &&\n\t            stackInfo.stack[0].func === initial.func\n\t          ) {\n\t            stackInfo.stack[0].line = initial.line;\n\t            return false;\n\t          }\n\t        }\n\t      }\n\t\n\t      stackInfo.stack.unshift(initial);\n\t      stackInfo.partial = true;\n\t      return true;\n\t    } else {\n\t      stackInfo.incomplete = true;\n\t    }\n\t\n\t    return false;\n\t  }\n\t\n\t  /**\n\t   * Computes stack trace information by walking the arguments.caller\n\t   * chain at the time the exception occurred. This will cause earlier\n\t   * frames to be missed but is the only way to get any stack trace in\n\t   * Safari and IE. The top frame is restored by\n\t   * {@link augmentStackTraceWithInitialElement}.\n\t   * @param {Error} ex\n\t   * @return {?Object.<string, *>} Stack trace information.\n\t   */\n\t  function computeStackTraceByWalkingCallerChain(ex, depth) {\n\t    var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n\t      stack = [],\n\t      funcs = {},\n\t      recursion = false,\n\t      parts,\n\t      item,\n\t      source;\n\t\n\t    for (\n\t      var curr = computeStackTraceByWalkingCallerChain.caller;\n\t      curr && !recursion;\n\t      curr = curr.caller\n\t    ) {\n\t      if (curr === computeStackTrace || curr === TraceKit.report) {\n\t        // console.log('skipping internal function');\n\t        continue;\n\t      }\n\t\n\t      item = {\n\t        url: null,\n\t        func: UNKNOWN_FUNCTION,\n\t        line: null,\n\t        column: null\n\t      };\n\t\n\t      if (curr.name) {\n\t        item.func = curr.name;\n\t      } else if ((parts = functionName.exec(curr.toString()))) {\n\t        item.func = parts[1];\n\t      }\n\t\n\t      if (typeof item.func === 'undefined') {\n\t        try {\n\t          item.func = parts.input.substring(0, parts.input.indexOf('{'));\n\t        } catch (e) {}\n\t      }\n\t\n\t      if (funcs['' + curr]) {\n\t        recursion = true;\n\t      } else {\n\t        funcs['' + curr] = true;\n\t      }\n\t\n\t      stack.push(item);\n\t    }\n\t\n\t    if (depth) {\n\t      // console.log('depth is ' + depth);\n\t      // console.log('stack is ' + stack.length);\n\t      stack.splice(0, depth);\n\t    }\n\t\n\t    var result = {\n\t      name: ex.name,\n\t      message: ex.message,\n\t      url: getLocationHref(),\n\t      stack: stack\n\t    };\n\t    augmentStackTraceWithInitialElement(\n\t      result,\n\t      ex.sourceURL || ex.fileName,\n\t      ex.line || ex.lineNumber,\n\t      ex.message || ex.description\n\t    );\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Computes a stack trace for an exception.\n\t   * @param {Error} ex\n\t   * @param {(string|number)=} depth\n\t   */\n\t  function computeStackTrace(ex, depth) {\n\t    var stack = null;\n\t    depth = depth == null ? 0 : +depth;\n\t\n\t    try {\n\t      stack = computeStackTraceFromStackProp(ex);\n\t      if (stack) {\n\t        return stack;\n\t      }\n\t    } catch (e) {\n\t      if (TraceKit.debug) {\n\t        throw e;\n\t      }\n\t    }\n\t\n\t    try {\n\t      stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n\t      if (stack) {\n\t        return stack;\n\t      }\n\t    } catch (e) {\n\t      if (TraceKit.debug) {\n\t        throw e;\n\t      }\n\t    }\n\t    return {\n\t      name: ex.name,\n\t      message: ex.message,\n\t      url: getLocationHref()\n\t    };\n\t  }\n\t\n\t  computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n\t  computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\t\n\t  return computeStackTrace;\n\t})();\n\t\n\tmodule.exports = TraceKit;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n\n/***/ 214:\n/***/ (function(module, exports) {\n\n\t/*\n\t json-stringify-safe\n\t Like JSON.stringify, but doesn't throw on circular references.\n\t\n\t Originally forked from https://github.com/isaacs/json-stringify-safe\n\t version 5.0.1 on 3/8/2017 and modified to handle Errors serialization\n\t and IE8 compatibility. Tests for this are in test/vendor.\n\t\n\t ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE\n\t*/\n\t\n\texports = module.exports = stringify;\n\texports.getSerialize = serializer;\n\t\n\tfunction indexOf(haystack, needle) {\n\t  for (var i = 0; i < haystack.length; ++i) {\n\t    if (haystack[i] === needle) return i;\n\t  }\n\t  return -1;\n\t}\n\t\n\tfunction stringify(obj, replacer, spaces, cycleReplacer) {\n\t  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);\n\t}\n\t\n\t// https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106\n\tfunction stringifyError(value) {\n\t  var err = {\n\t    // These properties are implemented as magical getters and don't show up in for in\n\t    stack: value.stack,\n\t    message: value.message,\n\t    name: value.name\n\t  };\n\t\n\t  for (var i in value) {\n\t    if (Object.prototype.hasOwnProperty.call(value, i)) {\n\t      err[i] = value[i];\n\t    }\n\t  }\n\t\n\t  return err;\n\t}\n\t\n\tfunction serializer(replacer, cycleReplacer) {\n\t  var stack = [];\n\t  var keys = [];\n\t\n\t  if (cycleReplacer == null) {\n\t    cycleReplacer = function(key, value) {\n\t      if (stack[0] === value) {\n\t        return '[Circular ~]';\n\t      }\n\t      return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']';\n\t    };\n\t  }\n\t\n\t  return function(key, value) {\n\t    if (stack.length > 0) {\n\t      var thisPos = indexOf(stack, this);\n\t      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n\t      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n\t\n\t      if (~indexOf(stack, value)) {\n\t        value = cycleReplacer.call(this, key, value);\n\t      }\n\t    } else {\n\t      stack.push(value);\n\t    }\n\t\n\t    return replacer == null\n\t      ? value instanceof Error ? stringifyError(value) : value\n\t      : replacer.call(this, key, value);\n\t  };\n\t}\n\n\n/***/ }),\n\n/***/ 461:\n/***/ (function(module, exports) {\n\n\t/*\n\t * JavaScript MD5\n\t * https://github.com/blueimp/JavaScript-MD5\n\t *\n\t * Copyright 2011, Sebastian Tschan\n\t * https://blueimp.net\n\t *\n\t * Licensed under the MIT license:\n\t * https://opensource.org/licenses/MIT\n\t *\n\t * Based on\n\t * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n\t * Digest Algorithm, as defined in RFC 1321.\n\t * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n\t * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n\t * Distributed under the BSD License\n\t * See http://pajhome.org.uk/crypt/md5 for more info.\n\t */\n\t\n\t/*\n\t* Add integers, wrapping at 2^32. This uses 16-bit operations internally\n\t* to work around bugs in some JS interpreters.\n\t*/\n\tfunction safeAdd(x, y) {\n\t  var lsw = (x & 0xffff) + (y & 0xffff);\n\t  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\t  return (msw << 16) | (lsw & 0xffff);\n\t}\n\t\n\t/*\n\t* Bitwise rotate a 32-bit number to the left.\n\t*/\n\tfunction bitRotateLeft(num, cnt) {\n\t  return (num << cnt) | (num >>> (32 - cnt));\n\t}\n\t\n\t/*\n\t* These functions implement the four basic operations the algorithm uses.\n\t*/\n\tfunction md5cmn(q, a, b, x, s, t) {\n\t  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n\t}\n\tfunction md5ff(a, b, c, d, x, s, t) {\n\t  return md5cmn((b & c) | (~b & d), a, b, x, s, t);\n\t}\n\tfunction md5gg(a, b, c, d, x, s, t) {\n\t  return md5cmn((b & d) | (c & ~d), a, b, x, s, t);\n\t}\n\tfunction md5hh(a, b, c, d, x, s, t) {\n\t  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n\t}\n\tfunction md5ii(a, b, c, d, x, s, t) {\n\t  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n\t}\n\t\n\t/*\n\t* Calculate the MD5 of an array of little-endian words, and a bit length.\n\t*/\n\tfunction binlMD5(x, len) {\n\t  /* append padding */\n\t  x[len >> 5] |= 0x80 << (len % 32);\n\t  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\t\n\t  var i;\n\t  var olda;\n\t  var oldb;\n\t  var oldc;\n\t  var oldd;\n\t  var a = 1732584193;\n\t  var b = -271733879;\n\t  var c = -1732584194;\n\t  var d = 271733878;\n\t\n\t  for (i = 0; i < x.length; i += 16) {\n\t    olda = a;\n\t    oldb = b;\n\t    oldc = c;\n\t    oldd = d;\n\t\n\t    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n\t    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n\t    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n\t    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n\t    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n\t    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n\t    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n\t    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n\t    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n\t    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n\t    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n\t    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n\t    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n\t    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n\t    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n\t    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\t\n\t    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n\t    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n\t    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n\t    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n\t    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n\t    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n\t    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n\t    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n\t    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n\t    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n\t    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n\t    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n\t    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n\t    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n\t    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n\t    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\t\n\t    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n\t    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n\t    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n\t    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n\t    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n\t    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n\t    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n\t    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n\t    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n\t    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n\t    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n\t    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n\t    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n\t    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n\t    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n\t    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n\t\n\t    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n\t    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n\t    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n\t    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n\t    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n\t    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n\t    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n\t    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n\t    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n\t    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n\t    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n\t    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n\t    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n\t    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n\t    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n\t    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n\t\n\t    a = safeAdd(a, olda);\n\t    b = safeAdd(b, oldb);\n\t    c = safeAdd(c, oldc);\n\t    d = safeAdd(d, oldd);\n\t  }\n\t  return [a, b, c, d];\n\t}\n\t\n\t/*\n\t* Convert an array of little-endian words to a string\n\t*/\n\tfunction binl2rstr(input) {\n\t  var i;\n\t  var output = '';\n\t  var length32 = input.length * 32;\n\t  for (i = 0; i < length32; i += 8) {\n\t    output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff);\n\t  }\n\t  return output;\n\t}\n\t\n\t/*\n\t* Convert a raw string to an array of little-endian words\n\t* Characters >255 have their high-byte silently ignored.\n\t*/\n\tfunction rstr2binl(input) {\n\t  var i;\n\t  var output = [];\n\t  output[(input.length >> 2) - 1] = undefined;\n\t  for (i = 0; i < output.length; i += 1) {\n\t    output[i] = 0;\n\t  }\n\t  var length8 = input.length * 8;\n\t  for (i = 0; i < length8; i += 8) {\n\t    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32);\n\t  }\n\t  return output;\n\t}\n\t\n\t/*\n\t* Calculate the MD5 of a raw string\n\t*/\n\tfunction rstrMD5(s) {\n\t  return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));\n\t}\n\t\n\t/*\n\t* Calculate the HMAC-MD5, of a key and some data (raw strings)\n\t*/\n\tfunction rstrHMACMD5(key, data) {\n\t  var i;\n\t  var bkey = rstr2binl(key);\n\t  var ipad = [];\n\t  var opad = [];\n\t  var hash;\n\t  ipad[15] = opad[15] = undefined;\n\t  if (bkey.length > 16) {\n\t    bkey = binlMD5(bkey, key.length * 8);\n\t  }\n\t  for (i = 0; i < 16; i += 1) {\n\t    ipad[i] = bkey[i] ^ 0x36363636;\n\t    opad[i] = bkey[i] ^ 0x5c5c5c5c;\n\t  }\n\t  hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\n\t  return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));\n\t}\n\t\n\t/*\n\t* Convert a raw string to a hex string\n\t*/\n\tfunction rstr2hex(input) {\n\t  var hexTab = '0123456789abcdef';\n\t  var output = '';\n\t  var x;\n\t  var i;\n\t  for (i = 0; i < input.length; i += 1) {\n\t    x = input.charCodeAt(i);\n\t    output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);\n\t  }\n\t  return output;\n\t}\n\t\n\t/*\n\t* Encode a string as utf-8\n\t*/\n\tfunction str2rstrUTF8(input) {\n\t  return unescape(encodeURIComponent(input));\n\t}\n\t\n\t/*\n\t* Take string arguments and return either raw or hex encoded strings\n\t*/\n\tfunction rawMD5(s) {\n\t  return rstrMD5(str2rstrUTF8(s));\n\t}\n\tfunction hexMD5(s) {\n\t  return rstr2hex(rawMD5(s));\n\t}\n\tfunction rawHMACMD5(k, d) {\n\t  return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));\n\t}\n\tfunction hexHMACMD5(k, d) {\n\t  return rstr2hex(rawHMACMD5(k, d));\n\t}\n\t\n\tfunction md5(string, key, raw) {\n\t  if (!key) {\n\t    if (!raw) {\n\t      return hexMD5(string);\n\t    }\n\t    return rawMD5(string);\n\t  }\n\t  if (!raw) {\n\t    return hexHMACMD5(key, string);\n\t  }\n\t  return rawHMACMD5(key, string);\n\t}\n\t\n\tmodule.exports = md5;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0-ce89ba166420f0d2054d.js","function RavenConfigError(message) {\n  this.name = 'RavenConfigError';\n  this.message = message;\n}\nRavenConfigError.prototype = new Error();\nRavenConfigError.prototype.constructor = RavenConfigError;\n\nmodule.exports = RavenConfigError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/src/configError.js\n// module id = 457\n// module chunks = 0","var utils = require('./utils');\n\nvar wrapMethod = function(console, level, callback) {\n  var originalConsoleLevel = console[level];\n  var originalConsole = console;\n\n  if (!(level in console)) {\n    return;\n  }\n\n  var sentryLevel = level === 'warn' ? 'warning' : level;\n\n  console[level] = function() {\n    var args = [].slice.call(arguments);\n\n    var msg = utils.safeJoin(args, ' ');\n    var data = {level: sentryLevel, logger: 'console', extra: {arguments: args}};\n\n    if (level === 'assert') {\n      if (args[0] === false) {\n        // Default browsers message\n        msg =\n          'Assertion failed: ' + (utils.safeJoin(args.slice(1), ' ') || 'console.assert');\n        data.extra.arguments = args.slice(1);\n        callback && callback(msg, data);\n      }\n    } else {\n      callback && callback(msg, data);\n    }\n\n    // this fails for some browsers. :(\n    if (originalConsoleLevel) {\n      // IE9 doesn't allow calling apply on console functions directly\n      // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193\n      Function.prototype.apply.call(originalConsoleLevel, originalConsole, args);\n    }\n  };\n};\n\nmodule.exports = {\n  wrapMethod: wrapMethod\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/src/console.js\n// module id = 458\n// module chunks = 0","/*global XDomainRequest:false */\n\nvar TraceKit = require('../vendor/TraceKit/tracekit');\nvar stringify = require('../vendor/json-stringify-safe/stringify');\nvar md5 = require('../vendor/md5/md5');\nvar RavenConfigError = require('./configError');\n\nvar utils = require('./utils');\nvar isErrorEvent = utils.isErrorEvent;\nvar isDOMError = utils.isDOMError;\nvar isDOMException = utils.isDOMException;\nvar isError = utils.isError;\nvar isObject = utils.isObject;\nvar isPlainObject = utils.isPlainObject;\nvar isUndefined = utils.isUndefined;\nvar isFunction = utils.isFunction;\nvar isString = utils.isString;\nvar isArray = utils.isArray;\nvar isEmptyObject = utils.isEmptyObject;\nvar each = utils.each;\nvar objectMerge = utils.objectMerge;\nvar truncate = utils.truncate;\nvar objectFrozen = utils.objectFrozen;\nvar hasKey = utils.hasKey;\nvar joinRegExp = utils.joinRegExp;\nvar urlencode = utils.urlencode;\nvar uuid4 = utils.uuid4;\nvar htmlTreeAsString = utils.htmlTreeAsString;\nvar isSameException = utils.isSameException;\nvar isSameStacktrace = utils.isSameStacktrace;\nvar parseUrl = utils.parseUrl;\nvar fill = utils.fill;\nvar supportsFetch = utils.supportsFetch;\nvar supportsReferrerPolicy = utils.supportsReferrerPolicy;\nvar serializeKeysForMessage = utils.serializeKeysForMessage;\nvar serializeException = utils.serializeException;\nvar sanitize = utils.sanitize;\n\nvar wrapConsoleMethod = require('./console').wrapMethod;\n\nvar dsnKeys = 'source protocol user pass host port path'.split(' '),\n  dsnPattern = /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w\\.-]+)(?::(\\d+))?(\\/.*)/;\n\nfunction now() {\n  return +new Date();\n}\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window =\n  typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nvar _document = _window.document;\nvar _navigator = _window.navigator;\n\nfunction keepOriginalCallback(original, callback) {\n  return isFunction(callback)\n    ? function(data) {\n        return callback(data, original);\n      }\n    : callback;\n}\n\n// First, check for JSON support\n// If there is no JSON, we no-op the core features of Raven\n// since JSON is required to encode the payload\nfunction Raven() {\n  this._hasJSON = !!(typeof JSON === 'object' && JSON.stringify);\n  // Raven can run in contexts where there's no document (react-native)\n  this._hasDocument = !isUndefined(_document);\n  this._hasNavigator = !isUndefined(_navigator);\n  this._lastCapturedException = null;\n  this._lastData = null;\n  this._lastEventId = null;\n  this._globalServer = null;\n  this._globalKey = null;\n  this._globalProject = null;\n  this._globalContext = {};\n  this._globalOptions = {\n    // SENTRY_RELEASE can be injected by https://github.com/getsentry/sentry-webpack-plugin\n    release: _window.SENTRY_RELEASE && _window.SENTRY_RELEASE.id,\n    logger: 'javascript',\n    ignoreErrors: [],\n    ignoreUrls: [],\n    whitelistUrls: [],\n    includePaths: [],\n    headers: null,\n    collectWindowErrors: true,\n    captureUnhandledRejections: true,\n    maxMessageLength: 0,\n    // By default, truncates URL values to 250 chars\n    maxUrlLength: 250,\n    stackTraceLimit: 50,\n    autoBreadcrumbs: true,\n    instrument: true,\n    sampleRate: 1,\n    sanitizeKeys: []\n  };\n  this._fetchDefaults = {\n    method: 'POST',\n    keepalive: true,\n    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n    // https://caniuse.com/#feat=referrer-policy\n    // It doesn't. And it throw exception instead of ignoring this parameter...\n    // REF: https://github.com/getsentry/raven-js/issues/1233\n    referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n  };\n  this._ignoreOnError = 0;\n  this._isRavenInstalled = false;\n  this._originalErrorStackTraceLimit = Error.stackTraceLimit;\n  // capture references to window.console *and* all its methods first\n  // before the console plugin has a chance to monkey patch\n  this._originalConsole = _window.console || {};\n  this._originalConsoleMethods = {};\n  this._plugins = [];\n  this._startTime = now();\n  this._wrappedBuiltIns = [];\n  this._breadcrumbs = [];\n  this._lastCapturedEvent = null;\n  this._keypressTimeout;\n  this._location = _window.location;\n  this._lastHref = this._location && this._location.href;\n  this._resetBackoff();\n\n  // eslint-disable-next-line guard-for-in\n  for (var method in this._originalConsole) {\n    this._originalConsoleMethods[method] = this._originalConsole[method];\n  }\n}\n\n/*\n * The core Raven singleton\n *\n * @this {Raven}\n */\n\nRaven.prototype = {\n  // Hardcode version string so that raven source can be loaded directly via\n  // webpack (using a build step causes webpack #1617). Grunt verifies that\n  // this value matches package.json during build.\n  //   See: https://github.com/getsentry/raven-js/issues/465\n  VERSION: '3.26.4',\n\n  debug: false,\n\n  TraceKit: TraceKit, // alias to TraceKit\n\n  /*\n     * Configure Raven with a DSN and extra options\n     *\n     * @param {string} dsn The public Sentry DSN\n     * @param {object} options Set of global options [optional]\n     * @return {Raven}\n     */\n  config: function(dsn, options) {\n    var self = this;\n\n    if (self._globalServer) {\n      this._logDebug('error', 'Error: Raven has already been configured');\n      return self;\n    }\n    if (!dsn) return self;\n\n    var globalOptions = self._globalOptions;\n\n    // merge in options\n    if (options) {\n      each(options, function(key, value) {\n        // tags and extra are special and need to be put into context\n        if (key === 'tags' || key === 'extra' || key === 'user') {\n          self._globalContext[key] = value;\n        } else {\n          globalOptions[key] = value;\n        }\n      });\n    }\n\n    self.setDSN(dsn);\n\n    // \"Script error.\" is hard coded into browsers for errors that it can't read.\n    // this is the result of a script being pulled in from an external domain and CORS.\n    globalOptions.ignoreErrors.push(/^Script error\\.?$/);\n    globalOptions.ignoreErrors.push(/^Javascript error: Script error\\.? on line 0$/);\n\n    // join regexp rules into one big rule\n    globalOptions.ignoreErrors = joinRegExp(globalOptions.ignoreErrors);\n    globalOptions.ignoreUrls = globalOptions.ignoreUrls.length\n      ? joinRegExp(globalOptions.ignoreUrls)\n      : false;\n    globalOptions.whitelistUrls = globalOptions.whitelistUrls.length\n      ? joinRegExp(globalOptions.whitelistUrls)\n      : false;\n    globalOptions.includePaths = joinRegExp(globalOptions.includePaths);\n    globalOptions.maxBreadcrumbs = Math.max(\n      0,\n      Math.min(globalOptions.maxBreadcrumbs || 100, 100)\n    ); // default and hard limit is 100\n\n    var autoBreadcrumbDefaults = {\n      xhr: true,\n      console: true,\n      dom: true,\n      location: true,\n      sentry: true\n    };\n\n    var autoBreadcrumbs = globalOptions.autoBreadcrumbs;\n    if ({}.toString.call(autoBreadcrumbs) === '[object Object]') {\n      autoBreadcrumbs = objectMerge(autoBreadcrumbDefaults, autoBreadcrumbs);\n    } else if (autoBreadcrumbs !== false) {\n      autoBreadcrumbs = autoBreadcrumbDefaults;\n    }\n    globalOptions.autoBreadcrumbs = autoBreadcrumbs;\n\n    var instrumentDefaults = {\n      tryCatch: true\n    };\n\n    var instrument = globalOptions.instrument;\n    if ({}.toString.call(instrument) === '[object Object]') {\n      instrument = objectMerge(instrumentDefaults, instrument);\n    } else if (instrument !== false) {\n      instrument = instrumentDefaults;\n    }\n    globalOptions.instrument = instrument;\n\n    TraceKit.collectWindowErrors = !!globalOptions.collectWindowErrors;\n\n    // return for chaining\n    return self;\n  },\n\n  /*\n     * Installs a global window.onerror error handler\n     * to capture and report uncaught exceptions.\n     * At this point, install() is required to be called due\n     * to the way TraceKit is set up.\n     *\n     * @return {Raven}\n     */\n  install: function() {\n    var self = this;\n    if (self.isSetup() && !self._isRavenInstalled) {\n      TraceKit.report.subscribe(function() {\n        self._handleOnErrorStackInfo.apply(self, arguments);\n      });\n\n      if (self._globalOptions.captureUnhandledRejections) {\n        self._attachPromiseRejectionHandler();\n      }\n\n      self._patchFunctionToString();\n\n      if (self._globalOptions.instrument && self._globalOptions.instrument.tryCatch) {\n        self._instrumentTryCatch();\n      }\n\n      if (self._globalOptions.autoBreadcrumbs) self._instrumentBreadcrumbs();\n\n      // Install all of the plugins\n      self._drainPlugins();\n\n      self._isRavenInstalled = true;\n    }\n\n    Error.stackTraceLimit = self._globalOptions.stackTraceLimit;\n    return this;\n  },\n\n  /*\n     * Set the DSN (can be called multiple time unlike config)\n     *\n     * @param {string} dsn The public Sentry DSN\n     */\n  setDSN: function(dsn) {\n    var self = this,\n      uri = self._parseDSN(dsn),\n      lastSlash = uri.path.lastIndexOf('/'),\n      path = uri.path.substr(1, lastSlash);\n\n    self._dsn = dsn;\n    self._globalKey = uri.user;\n    self._globalSecret = uri.pass && uri.pass.substr(1);\n    self._globalProject = uri.path.substr(lastSlash + 1);\n\n    self._globalServer = self._getGlobalServer(uri);\n\n    self._globalEndpoint =\n      self._globalServer + '/' + path + 'api/' + self._globalProject + '/store/';\n\n    // Reset backoff state since we may be pointing at a\n    // new project/server\n    this._resetBackoff();\n  },\n\n  /*\n     * Wrap code within a context so Raven can capture errors\n     * reliably across domains that is executed immediately.\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The callback to be immediately executed within the context\n     * @param {array} args An array of arguments to be called with the callback [optional]\n     */\n  context: function(options, func, args) {\n    if (isFunction(options)) {\n      args = func || [];\n      func = options;\n      options = {};\n    }\n\n    return this.wrap(options, func).apply(this, args);\n  },\n\n  /*\n     * Wrap code within a context and returns back a new function to be executed\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The function to be wrapped in a new context\n     * @param {function} _before A function to call before the try/catch wrapper [optional, private]\n     * @return {function} The newly wrapped functions with a context\n     */\n  wrap: function(options, func, _before) {\n    var self = this;\n    // 1 argument has been passed, and it's not a function\n    // so just return it\n    if (isUndefined(func) && !isFunction(options)) {\n      return options;\n    }\n\n    // options is optional\n    if (isFunction(options)) {\n      func = options;\n      options = undefined;\n    }\n\n    // At this point, we've passed along 2 arguments, and the second one\n    // is not a function either, so we'll just return the second argument.\n    if (!isFunction(func)) {\n      return func;\n    }\n\n    // We don't wanna wrap it twice!\n    try {\n      if (func.__raven__) {\n        return func;\n      }\n\n      // If this has already been wrapped in the past, return that\n      if (func.__raven_wrapper__) {\n        return func.__raven_wrapper__;\n      }\n    } catch (e) {\n      // Just accessing custom props in some Selenium environments\n      // can cause a \"Permission denied\" exception (see raven-js#495).\n      // Bail on wrapping and return the function as-is (defers to window.onerror).\n      return func;\n    }\n\n    function wrapped() {\n      var args = [],\n        i = arguments.length,\n        deep = !options || (options && options.deep !== false);\n\n      if (_before && isFunction(_before)) {\n        _before.apply(this, arguments);\n      }\n\n      // Recursively wrap all of a function's arguments that are\n      // functions themselves.\n      while (i--) args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n\n      try {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means Raven caught an error invoking your application code. This is\n        //       expected behavior and NOT indicative of a bug with Raven.js.\n        return func.apply(this, args);\n      } catch (e) {\n        self._ignoreNextOnError();\n        self.captureException(e, options);\n        throw e;\n      }\n    }\n\n    // copy over properties of the old function\n    for (var property in func) {\n      if (hasKey(func, property)) {\n        wrapped[property] = func[property];\n      }\n    }\n    wrapped.prototype = func.prototype;\n\n    func.__raven_wrapper__ = wrapped;\n    // Signal that this function has been wrapped/filled already\n    // for both debugging and to prevent it to being wrapped/filled twice\n    wrapped.__raven__ = true;\n    wrapped.__orig__ = func;\n\n    return wrapped;\n  },\n\n  /**\n   * Uninstalls the global error handler.\n   *\n   * @return {Raven}\n   */\n  uninstall: function() {\n    TraceKit.report.uninstall();\n\n    this._detachPromiseRejectionHandler();\n    this._unpatchFunctionToString();\n    this._restoreBuiltIns();\n    this._restoreConsole();\n\n    Error.stackTraceLimit = this._originalErrorStackTraceLimit;\n    this._isRavenInstalled = false;\n\n    return this;\n  },\n\n  /**\n   * Callback used for `unhandledrejection` event\n   *\n   * @param {PromiseRejectionEvent} event An object containing\n   *   promise: the Promise that was rejected\n   *   reason: the value with which the Promise was rejected\n   * @return void\n   */\n  _promiseRejectionHandler: function(event) {\n    this._logDebug('debug', 'Raven caught unhandled promise rejection:', event);\n    this.captureException(event.reason, {\n      mechanism: {\n        type: 'onunhandledrejection',\n        handled: false\n      }\n    });\n  },\n\n  /**\n   * Installs the global promise rejection handler.\n   *\n   * @return {raven}\n   */\n  _attachPromiseRejectionHandler: function() {\n    this._promiseRejectionHandler = this._promiseRejectionHandler.bind(this);\n    _window.addEventListener &&\n      _window.addEventListener('unhandledrejection', this._promiseRejectionHandler);\n    return this;\n  },\n\n  /**\n   * Uninstalls the global promise rejection handler.\n   *\n   * @return {raven}\n   */\n  _detachPromiseRejectionHandler: function() {\n    _window.removeEventListener &&\n      _window.removeEventListener('unhandledrejection', this._promiseRejectionHandler);\n    return this;\n  },\n\n  /**\n   * Manually capture an exception and send it over to Sentry\n   *\n   * @param {error} ex An exception to be logged\n   * @param {object} options A specific set of options for this error [optional]\n   * @return {Raven}\n   */\n  captureException: function(ex, options) {\n    options = objectMerge({trimHeadFrames: 0}, options ? options : {});\n\n    if (isErrorEvent(ex) && ex.error) {\n      // If it is an ErrorEvent with `error` property, extract it to get actual Error\n      ex = ex.error;\n    } else if (isDOMError(ex) || isDOMException(ex)) {\n      // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n      // then we just extract the name and message, as they don't provide anything else\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n      var name = ex.name || (isDOMError(ex) ? 'DOMError' : 'DOMException');\n      var message = ex.message ? name + ': ' + ex.message : name;\n\n      return this.captureMessage(\n        message,\n        objectMerge(options, {\n          // neither DOMError or DOMException provide stack trace and we most likely wont get it this way as well\n          // but it's barely any overhead so we may at least try\n          stacktrace: true,\n          trimHeadFrames: options.trimHeadFrames + 1\n        })\n      );\n    } else if (isError(ex)) {\n      // we have a real Error object\n      ex = ex;\n    } else if (isPlainObject(ex)) {\n      // If it is plain Object, serialize it manually and extract options\n      // This will allow us to group events based on top-level keys\n      // which is much better than creating new group when any key/value change\n      options = this._getCaptureExceptionOptionsFromPlainObject(options, ex);\n      ex = new Error(options.message);\n    } else {\n      // If none of previous checks were valid, then it means that\n      // it's not a DOMError/DOMException\n      // it's not a plain Object\n      // it's not a valid ErrorEvent (one with an error property)\n      // it's not an Error\n      // So bail out and capture it as a simple message:\n      return this.captureMessage(\n        ex,\n        objectMerge(options, {\n          stacktrace: true, // if we fall back to captureMessage, default to attempting a new trace\n          trimHeadFrames: options.trimHeadFrames + 1\n        })\n      );\n    }\n\n    // Store the raw exception object for potential debugging and introspection\n    this._lastCapturedException = ex;\n\n    // TraceKit.report will re-raise any exception passed to it,\n    // which means you have to wrap it in try/catch. Instead, we\n    // can wrap it here and only re-raise if TraceKit.report\n    // raises an exception different from the one we asked to\n    // report on.\n    try {\n      var stack = TraceKit.computeStackTrace(ex);\n      this._handleStackInfo(stack, options);\n    } catch (ex1) {\n      if (ex !== ex1) {\n        throw ex1;\n      }\n    }\n\n    return this;\n  },\n\n  _getCaptureExceptionOptionsFromPlainObject: function(currentOptions, ex) {\n    var exKeys = Object.keys(ex).sort();\n    var options = objectMerge(currentOptions, {\n      message:\n        'Non-Error exception captured with keys: ' + serializeKeysForMessage(exKeys),\n      fingerprint: [md5(exKeys)],\n      extra: currentOptions.extra || {}\n    });\n    options.extra.__serialized__ = serializeException(ex);\n\n    return options;\n  },\n\n  /*\n     * Manually send a message to Sentry\n     *\n     * @param {string} msg A plain message to be captured in Sentry\n     * @param {object} options A specific set of options for this message [optional]\n     * @return {Raven}\n     */\n  captureMessage: function(msg, options) {\n    // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an\n    // early call; we'll error on the side of logging anything called before configuration since it's\n    // probably something you should see:\n    if (\n      !!this._globalOptions.ignoreErrors.test &&\n      this._globalOptions.ignoreErrors.test(msg)\n    ) {\n      return;\n    }\n\n    options = options || {};\n    msg = msg + ''; // Make sure it's actually a string\n\n    var data = objectMerge(\n      {\n        message: msg\n      },\n      options\n    );\n\n    var ex;\n    // Generate a \"synthetic\" stack trace from this point.\n    // NOTE: If you are a Sentry user, and you are seeing this stack frame, it is NOT indicative\n    //       of a bug with Raven.js. Sentry generates synthetic traces either by configuration,\n    //       or if it catches a thrown object without a \"stack\" property.\n    try {\n      throw new Error(msg);\n    } catch (ex1) {\n      ex = ex1;\n    }\n\n    // null exception name so `Error` isn't prefixed to msg\n    ex.name = null;\n    var stack = TraceKit.computeStackTrace(ex);\n\n    // stack[0] is `throw new Error(msg)` call itself, we are interested in the frame that was just before that, stack[1]\n    var initialCall = isArray(stack.stack) && stack.stack[1];\n\n    // if stack[1] is `Raven.captureException`, it means that someone passed a string to it and we redirected that call\n    // to be handled by `captureMessage`, thus `initialCall` is the 3rd one, not 2nd\n    // initialCall => captureException(string) => captureMessage(string)\n    if (initialCall && initialCall.func === 'Raven.captureException') {\n      initialCall = stack.stack[2];\n    }\n\n    var fileurl = (initialCall && initialCall.url) || '';\n\n    if (\n      !!this._globalOptions.ignoreUrls.test &&\n      this._globalOptions.ignoreUrls.test(fileurl)\n    ) {\n      return;\n    }\n\n    if (\n      !!this._globalOptions.whitelistUrls.test &&\n      !this._globalOptions.whitelistUrls.test(fileurl)\n    ) {\n      return;\n    }\n\n    // Always attempt to get stacktrace if message is empty.\n    // It's the only way to provide any helpful information to the user.\n    if (this._globalOptions.stacktrace || options.stacktrace || data.message === '') {\n      // fingerprint on msg, not stack trace (legacy behavior, could be revisited)\n      data.fingerprint = data.fingerprint == null ? msg : data.fingerprint;\n\n      options = objectMerge(\n        {\n          trimHeadFrames: 0\n        },\n        options\n      );\n      // Since we know this is a synthetic trace, the top frame (this function call)\n      // MUST be from Raven.js, so mark it for trimming\n      // We add to the trim counter so that callers can choose to trim extra frames, such\n      // as utility functions.\n      options.trimHeadFrames += 1;\n\n      var frames = this._prepareFrames(stack, options);\n      data.stacktrace = {\n        // Sentry expects frames oldest to newest\n        frames: frames.reverse()\n      };\n    }\n\n    // Make sure that fingerprint is always wrapped in an array\n    if (data.fingerprint) {\n      data.fingerprint = isArray(data.fingerprint)\n        ? data.fingerprint\n        : [data.fingerprint];\n    }\n\n    // Fire away!\n    this._send(data);\n\n    return this;\n  },\n\n  captureBreadcrumb: function(obj) {\n    var crumb = objectMerge(\n      {\n        timestamp: now() / 1000\n      },\n      obj\n    );\n\n    if (isFunction(this._globalOptions.breadcrumbCallback)) {\n      var result = this._globalOptions.breadcrumbCallback(crumb);\n\n      if (isObject(result) && !isEmptyObject(result)) {\n        crumb = result;\n      } else if (result === false) {\n        return this;\n      }\n    }\n\n    this._breadcrumbs.push(crumb);\n    if (this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) {\n      this._breadcrumbs.shift();\n    }\n    return this;\n  },\n\n  addPlugin: function(plugin /*arg1, arg2, ... argN*/) {\n    var pluginArgs = [].slice.call(arguments, 1);\n\n    this._plugins.push([plugin, pluginArgs]);\n    if (this._isRavenInstalled) {\n      this._drainPlugins();\n    }\n\n    return this;\n  },\n\n  /*\n     * Set/clear a user to be sent along with the payload.\n     *\n     * @param {object} user An object representing user data [optional]\n     * @return {Raven}\n     */\n  setUserContext: function(user) {\n    // Intentionally do not merge here since that's an unexpected behavior.\n    this._globalContext.user = user;\n\n    return this;\n  },\n\n  /*\n     * Merge extra attributes to be sent along with the payload.\n     *\n     * @param {object} extra An object representing extra data [optional]\n     * @return {Raven}\n     */\n  setExtraContext: function(extra) {\n    this._mergeContext('extra', extra);\n\n    return this;\n  },\n\n  /*\n     * Merge tags to be sent along with the payload.\n     *\n     * @param {object} tags An object representing tags [optional]\n     * @return {Raven}\n     */\n  setTagsContext: function(tags) {\n    this._mergeContext('tags', tags);\n\n    return this;\n  },\n\n  /*\n     * Clear all of the context.\n     *\n     * @return {Raven}\n     */\n  clearContext: function() {\n    this._globalContext = {};\n\n    return this;\n  },\n\n  /*\n     * Get a copy of the current context. This cannot be mutated.\n     *\n     * @return {object} copy of context\n     */\n  getContext: function() {\n    // lol javascript\n    return JSON.parse(stringify(this._globalContext));\n  },\n\n  /*\n     * Set environment of application\n     *\n     * @param {string} environment Typically something like 'production'.\n     * @return {Raven}\n     */\n  setEnvironment: function(environment) {\n    this._globalOptions.environment = environment;\n\n    return this;\n  },\n\n  /*\n     * Set release version of application\n     *\n     * @param {string} release Typically something like a git SHA to identify version\n     * @return {Raven}\n     */\n  setRelease: function(release) {\n    this._globalOptions.release = release;\n\n    return this;\n  },\n\n  /*\n     * Set the dataCallback option\n     *\n     * @param {function} callback The callback to run which allows the\n     *                            data blob to be mutated before sending\n     * @return {Raven}\n     */\n  setDataCallback: function(callback) {\n    var original = this._globalOptions.dataCallback;\n    this._globalOptions.dataCallback = keepOriginalCallback(original, callback);\n    return this;\n  },\n\n  /*\n     * Set the breadcrumbCallback option\n     *\n     * @param {function} callback The callback to run which allows filtering\n     *                            or mutating breadcrumbs\n     * @return {Raven}\n     */\n  setBreadcrumbCallback: function(callback) {\n    var original = this._globalOptions.breadcrumbCallback;\n    this._globalOptions.breadcrumbCallback = keepOriginalCallback(original, callback);\n    return this;\n  },\n\n  /*\n     * Set the shouldSendCallback option\n     *\n     * @param {function} callback The callback to run which allows\n     *                            introspecting the blob before sending\n     * @return {Raven}\n     */\n  setShouldSendCallback: function(callback) {\n    var original = this._globalOptions.shouldSendCallback;\n    this._globalOptions.shouldSendCallback = keepOriginalCallback(original, callback);\n    return this;\n  },\n\n  /**\n   * Override the default HTTP transport mechanism that transmits data\n   * to the Sentry server.\n   *\n   * @param {function} transport Function invoked instead of the default\n   *                             `makeRequest` handler.\n   *\n   * @return {Raven}\n   */\n  setTransport: function(transport) {\n    this._globalOptions.transport = transport;\n\n    return this;\n  },\n\n  /*\n     * Get the latest raw exception that was captured by Raven.\n     *\n     * @return {error}\n     */\n  lastException: function() {\n    return this._lastCapturedException;\n  },\n\n  /*\n     * Get the last event id\n     *\n     * @return {string}\n     */\n  lastEventId: function() {\n    return this._lastEventId;\n  },\n\n  /*\n     * Determine if Raven is setup and ready to go.\n     *\n     * @return {boolean}\n     */\n  isSetup: function() {\n    if (!this._hasJSON) return false; // needs JSON support\n    if (!this._globalServer) {\n      if (!this.ravenNotConfiguredError) {\n        this.ravenNotConfiguredError = true;\n        this._logDebug('error', 'Error: Raven has not been configured.');\n      }\n      return false;\n    }\n    return true;\n  },\n\n  afterLoad: function() {\n    // TODO: remove window dependence?\n\n    // Attempt to initialize Raven on load\n    var RavenConfig = _window.RavenConfig;\n    if (RavenConfig) {\n      this.config(RavenConfig.dsn, RavenConfig.config).install();\n    }\n  },\n\n  showReportDialog: function(options) {\n    if (\n      !_document // doesn't work without a document (React native)\n    )\n      return;\n\n    options = Object.assign(\n      {\n        eventId: this.lastEventId(),\n        dsn: this._dsn,\n        user: this._globalContext.user || {}\n      },\n      options\n    );\n\n    if (!options.eventId) {\n      throw new RavenConfigError('Missing eventId');\n    }\n\n    if (!options.dsn) {\n      throw new RavenConfigError('Missing DSN');\n    }\n\n    var encode = encodeURIComponent;\n    var encodedOptions = [];\n\n    for (var key in options) {\n      if (key === 'user') {\n        var user = options.user;\n        if (user.name) encodedOptions.push('name=' + encode(user.name));\n        if (user.email) encodedOptions.push('email=' + encode(user.email));\n      } else {\n        encodedOptions.push(encode(key) + '=' + encode(options[key]));\n      }\n    }\n    var globalServer = this._getGlobalServer(this._parseDSN(options.dsn));\n\n    var script = _document.createElement('script');\n    script.async = true;\n    script.src = globalServer + '/api/embed/error-page/?' + encodedOptions.join('&');\n    (_document.head || _document.body).appendChild(script);\n  },\n\n  /**** Private functions ****/\n  _ignoreNextOnError: function() {\n    var self = this;\n    this._ignoreOnError += 1;\n    setTimeout(function() {\n      // onerror should trigger before setTimeout\n      self._ignoreOnError -= 1;\n    });\n  },\n\n  _triggerEvent: function(eventType, options) {\n    // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it\n    var evt, key;\n\n    if (!this._hasDocument) return;\n\n    options = options || {};\n\n    eventType = 'raven' + eventType.substr(0, 1).toUpperCase() + eventType.substr(1);\n\n    if (_document.createEvent) {\n      evt = _document.createEvent('HTMLEvents');\n      evt.initEvent(eventType, true, true);\n    } else {\n      evt = _document.createEventObject();\n      evt.eventType = eventType;\n    }\n\n    for (key in options)\n      if (hasKey(options, key)) {\n        evt[key] = options[key];\n      }\n\n    if (_document.createEvent) {\n      // IE9 if standards\n      _document.dispatchEvent(evt);\n    } else {\n      // IE8 regardless of Quirks or Standards\n      // IE9 if quirks\n      try {\n        _document.fireEvent('on' + evt.eventType.toLowerCase(), evt);\n      } catch (e) {\n        // Do nothing\n      }\n    }\n  },\n\n  /**\n   * Wraps addEventListener to capture UI breadcrumbs\n   * @param evtName the event name (e.g. \"click\")\n   * @returns {Function}\n   * @private\n   */\n  _breadcrumbEventHandler: function(evtName) {\n    var self = this;\n    return function(evt) {\n      // reset keypress timeout; e.g. triggering a 'click' after\n      // a 'keypress' will reset the keypress debounce so that a new\n      // set of keypresses can be recorded\n      self._keypressTimeout = null;\n\n      // It's possible this handler might trigger multiple times for the same\n      // event (e.g. event propagation through node ancestors). Ignore if we've\n      // already captured the event.\n      if (self._lastCapturedEvent === evt) return;\n\n      self._lastCapturedEvent = evt;\n\n      // try/catch both:\n      // - accessing evt.target (see getsentry/raven-js#838, #768)\n      // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n      //   can throw an exception in some circumstances.\n      var target;\n      try {\n        target = htmlTreeAsString(evt.target);\n      } catch (e) {\n        target = '<unknown>';\n      }\n\n      self.captureBreadcrumb({\n        category: 'ui.' + evtName, // e.g. ui.click, ui.input\n        message: target\n      });\n    };\n  },\n\n  /**\n   * Wraps addEventListener to capture keypress UI events\n   * @returns {Function}\n   * @private\n   */\n  _keypressEventHandler: function() {\n    var self = this,\n      debounceDuration = 1000; // milliseconds\n\n    // TODO: if somehow user switches keypress target before\n    //       debounce timeout is triggered, we will only capture\n    //       a single breadcrumb from the FIRST target (acceptable?)\n    return function(evt) {\n      var target;\n      try {\n        target = evt.target;\n      } catch (e) {\n        // just accessing event properties can throw an exception in some rare circumstances\n        // see: https://github.com/getsentry/raven-js/issues/838\n        return;\n      }\n      var tagName = target && target.tagName;\n\n      // only consider keypress events on actual input elements\n      // this will disregard keypresses targeting body (e.g. tabbing\n      // through elements, hotkeys, etc)\n      if (\n        !tagName ||\n        (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable)\n      )\n        return;\n\n      // record first keypress in a series, but ignore subsequent\n      // keypresses until debounce clears\n      var timeout = self._keypressTimeout;\n      if (!timeout) {\n        self._breadcrumbEventHandler('input')(evt);\n      }\n      clearTimeout(timeout);\n      self._keypressTimeout = setTimeout(function() {\n        self._keypressTimeout = null;\n      }, debounceDuration);\n    };\n  },\n\n  /**\n   * Captures a breadcrumb of type \"navigation\", normalizing input URLs\n   * @param to the originating URL\n   * @param from the target URL\n   * @private\n   */\n  _captureUrlChange: function(from, to) {\n    var parsedLoc = parseUrl(this._location.href);\n    var parsedTo = parseUrl(to);\n    var parsedFrom = parseUrl(from);\n\n    // because onpopstate only tells you the \"new\" (to) value of location.href, and\n    // not the previous (from) value, we need to track the value of the current URL\n    // state ourselves\n    this._lastHref = to;\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host)\n      to = parsedTo.relative;\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host)\n      from = parsedFrom.relative;\n\n    this.captureBreadcrumb({\n      category: 'navigation',\n      data: {\n        to: to,\n        from: from\n      }\n    });\n  },\n\n  _patchFunctionToString: function() {\n    var self = this;\n    self._originalFunctionToString = Function.prototype.toString;\n    // eslint-disable-next-line no-extend-native\n    Function.prototype.toString = function() {\n      if (typeof this === 'function' && this.__raven__) {\n        return self._originalFunctionToString.apply(this.__orig__, arguments);\n      }\n      return self._originalFunctionToString.apply(this, arguments);\n    };\n  },\n\n  _unpatchFunctionToString: function() {\n    if (this._originalFunctionToString) {\n      // eslint-disable-next-line no-extend-native\n      Function.prototype.toString = this._originalFunctionToString;\n    }\n  },\n\n  /**\n   * Wrap timer functions and event targets to catch errors and provide\n   * better metadata.\n   */\n  _instrumentTryCatch: function() {\n    var self = this;\n\n    var wrappedBuiltIns = self._wrappedBuiltIns;\n\n    function wrapTimeFn(orig) {\n      return function(fn, t) {\n        // preserve arity\n        // Make a copy of the arguments to prevent deoptimization\n        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i) {\n          args[i] = arguments[i];\n        }\n        var originalCallback = args[0];\n        if (isFunction(originalCallback)) {\n          args[0] = self.wrap(\n            {\n              mechanism: {\n                type: 'instrument',\n                data: {function: orig.name || '<anonymous>'}\n              }\n            },\n            originalCallback\n          );\n        }\n\n        // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n        // also supports only two arguments and doesn't care what this is, so we\n        // can just call the original function directly.\n        if (orig.apply) {\n          return orig.apply(this, args);\n        } else {\n          return orig(args[0], args[1]);\n        }\n      };\n    }\n\n    var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n    function wrapEventTarget(global) {\n      var proto = _window[global] && _window[global].prototype;\n      if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n        fill(\n          proto,\n          'addEventListener',\n          function(orig) {\n            return function(evtName, fn, capture, secure) {\n              // preserve arity\n              try {\n                if (fn && fn.handleEvent) {\n                  fn.handleEvent = self.wrap(\n                    {\n                      mechanism: {\n                        type: 'instrument',\n                        data: {\n                          target: global,\n                          function: 'handleEvent',\n                          handler: (fn && fn.name) || '<anonymous>'\n                        }\n                      }\n                    },\n                    fn.handleEvent\n                  );\n                }\n              } catch (err) {\n                // can sometimes get 'Permission denied to access property \"handle Event'\n              }\n\n              // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n              // so that we don't have more than one wrapper function\n              var before, clickHandler, keypressHandler;\n\n              if (\n                autoBreadcrumbs &&\n                autoBreadcrumbs.dom &&\n                (global === 'EventTarget' || global === 'Node')\n              ) {\n                // NOTE: generating multiple handlers per addEventListener invocation, should\n                //       revisit and verify we can just use one (almost certainly)\n                clickHandler = self._breadcrumbEventHandler('click');\n                keypressHandler = self._keypressEventHandler();\n                before = function(evt) {\n                  // need to intercept every DOM event in `before` argument, in case that\n                  // same wrapped method is re-used for different events (e.g. mousemove THEN click)\n                  // see #724\n                  if (!evt) return;\n\n                  var eventType;\n                  try {\n                    eventType = evt.type;\n                  } catch (e) {\n                    // just accessing event properties can throw an exception in some rare circumstances\n                    // see: https://github.com/getsentry/raven-js/issues/838\n                    return;\n                  }\n                  if (eventType === 'click') return clickHandler(evt);\n                  else if (eventType === 'keypress') return keypressHandler(evt);\n                };\n              }\n              return orig.call(\n                this,\n                evtName,\n                self.wrap(\n                  {\n                    mechanism: {\n                      type: 'instrument',\n                      data: {\n                        target: global,\n                        function: 'addEventListener',\n                        handler: (fn && fn.name) || '<anonymous>'\n                      }\n                    }\n                  },\n                  fn,\n                  before\n                ),\n                capture,\n                secure\n              );\n            };\n          },\n          wrappedBuiltIns\n        );\n        fill(\n          proto,\n          'removeEventListener',\n          function(orig) {\n            return function(evt, fn, capture, secure) {\n              try {\n                fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);\n              } catch (e) {\n                // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n              }\n              return orig.call(this, evt, fn, capture, secure);\n            };\n          },\n          wrappedBuiltIns\n        );\n      }\n    }\n\n    fill(_window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n    fill(_window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n    if (_window.requestAnimationFrame) {\n      fill(\n        _window,\n        'requestAnimationFrame',\n        function(orig) {\n          return function(cb) {\n            return orig(\n              self.wrap(\n                {\n                  mechanism: {\n                    type: 'instrument',\n                    data: {\n                      function: 'requestAnimationFrame',\n                      handler: (orig && orig.name) || '<anonymous>'\n                    }\n                  }\n                },\n                cb\n              )\n            );\n          };\n        },\n        wrappedBuiltIns\n      );\n    }\n\n    // event targets borrowed from bugsnag-js:\n    // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n    var eventTargets = [\n      'EventTarget',\n      'Window',\n      'Node',\n      'ApplicationCache',\n      'AudioTrackList',\n      'ChannelMergerNode',\n      'CryptoOperation',\n      'EventSource',\n      'FileReader',\n      'HTMLUnknownElement',\n      'IDBDatabase',\n      'IDBRequest',\n      'IDBTransaction',\n      'KeyOperation',\n      'MediaController',\n      'MessagePort',\n      'ModalWindow',\n      'Notification',\n      'SVGElementInstance',\n      'Screen',\n      'TextTrack',\n      'TextTrackCue',\n      'TextTrackList',\n      'WebSocket',\n      'WebSocketWorker',\n      'Worker',\n      'XMLHttpRequest',\n      'XMLHttpRequestEventTarget',\n      'XMLHttpRequestUpload'\n    ];\n    for (var i = 0; i < eventTargets.length; i++) {\n      wrapEventTarget(eventTargets[i]);\n    }\n  },\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - XMLHttpRequests\n   *  - DOM interactions (click/typing)\n   *  - window.location changes\n   *  - console\n   *\n   * Can be disabled or individually configured via the `autoBreadcrumbs` config option\n   */\n  _instrumentBreadcrumbs: function() {\n    var self = this;\n    var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n    var wrappedBuiltIns = self._wrappedBuiltIns;\n\n    function wrapProp(prop, xhr) {\n      if (prop in xhr && isFunction(xhr[prop])) {\n        fill(xhr, prop, function(orig) {\n          return self.wrap(\n            {\n              mechanism: {\n                type: 'instrument',\n                data: {function: prop, handler: (orig && orig.name) || '<anonymous>'}\n              }\n            },\n            orig\n          );\n        }); // intentionally don't track filled methods on XHR instances\n      }\n    }\n\n    if (autoBreadcrumbs.xhr && 'XMLHttpRequest' in _window) {\n      var xhrproto = _window.XMLHttpRequest && _window.XMLHttpRequest.prototype;\n      fill(\n        xhrproto,\n        'open',\n        function(origOpen) {\n          return function(method, url) {\n            // preserve arity\n\n            // if Sentry key appears in URL, don't capture\n            if (isString(url) && url.indexOf(self._globalKey) === -1) {\n              this.__raven_xhr = {\n                method: method,\n                url: url,\n                status_code: null\n              };\n            }\n\n            return origOpen.apply(this, arguments);\n          };\n        },\n        wrappedBuiltIns\n      );\n\n      fill(\n        xhrproto,\n        'send',\n        function(origSend) {\n          return function() {\n            // preserve arity\n            var xhr = this;\n\n            function onreadystatechangeHandler() {\n              if (xhr.__raven_xhr && xhr.readyState === 4) {\n                try {\n                  // touching statusCode in some platforms throws\n                  // an exception\n                  xhr.__raven_xhr.status_code = xhr.status;\n                } catch (e) {\n                  /* do nothing */\n                }\n\n                self.captureBreadcrumb({\n                  type: 'http',\n                  category: 'xhr',\n                  data: xhr.__raven_xhr\n                });\n              }\n            }\n\n            var props = ['onload', 'onerror', 'onprogress'];\n            for (var j = 0; j < props.length; j++) {\n              wrapProp(props[j], xhr);\n            }\n\n            if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {\n              fill(\n                xhr,\n                'onreadystatechange',\n                function(orig) {\n                  return self.wrap(\n                    {\n                      mechanism: {\n                        type: 'instrument',\n                        data: {\n                          function: 'onreadystatechange',\n                          handler: (orig && orig.name) || '<anonymous>'\n                        }\n                      }\n                    },\n                    orig,\n                    onreadystatechangeHandler\n                  );\n                } /* intentionally don't track this instrumentation */\n              );\n            } else {\n              // if onreadystatechange wasn't actually set by the page on this xhr, we\n              // are free to set our own and capture the breadcrumb\n              xhr.onreadystatechange = onreadystatechangeHandler;\n            }\n\n            return origSend.apply(this, arguments);\n          };\n        },\n        wrappedBuiltIns\n      );\n    }\n\n    if (autoBreadcrumbs.xhr && supportsFetch()) {\n      fill(\n        _window,\n        'fetch',\n        function(origFetch) {\n          return function() {\n            // preserve arity\n            // Make a copy of the arguments to prevent deoptimization\n            // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n            var args = new Array(arguments.length);\n            for (var i = 0; i < args.length; ++i) {\n              args[i] = arguments[i];\n            }\n\n            var fetchInput = args[0];\n            var method = 'GET';\n            var url;\n\n            if (typeof fetchInput === 'string') {\n              url = fetchInput;\n            } else if ('Request' in _window && fetchInput instanceof _window.Request) {\n              url = fetchInput.url;\n              if (fetchInput.method) {\n                method = fetchInput.method;\n              }\n            } else {\n              url = '' + fetchInput;\n            }\n\n            // if Sentry key appears in URL, don't capture, as it's our own request\n            if (url.indexOf(self._globalKey) !== -1) {\n              return origFetch.apply(this, args);\n            }\n\n            if (args[1] && args[1].method) {\n              method = args[1].method;\n            }\n\n            var fetchData = {\n              method: method,\n              url: url,\n              status_code: null\n            };\n\n            return origFetch\n              .apply(this, args)\n              .then(function(response) {\n                fetchData.status_code = response.status;\n\n                self.captureBreadcrumb({\n                  type: 'http',\n                  category: 'fetch',\n                  data: fetchData\n                });\n\n                return response;\n              })\n              ['catch'](function(err) {\n                // if there is an error performing the request\n                self.captureBreadcrumb({\n                  type: 'http',\n                  category: 'fetch',\n                  data: fetchData,\n                  level: 'error'\n                });\n\n                throw err;\n              });\n          };\n        },\n        wrappedBuiltIns\n      );\n    }\n\n    // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n    // to the document. Do this before we instrument addEventListener.\n    if (autoBreadcrumbs.dom && this._hasDocument) {\n      if (_document.addEventListener) {\n        _document.addEventListener('click', self._breadcrumbEventHandler('click'), false);\n        _document.addEventListener('keypress', self._keypressEventHandler(), false);\n      } else if (_document.attachEvent) {\n        // IE8 Compatibility\n        _document.attachEvent('onclick', self._breadcrumbEventHandler('click'));\n        _document.attachEvent('onkeypress', self._keypressEventHandler());\n      }\n    }\n\n    // record navigation (URL) changes\n    // NOTE: in Chrome App environment, touching history.pushState, *even inside\n    //       a try/catch block*, will cause Chrome to output an error to console.error\n    // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n    var chrome = _window.chrome;\n    var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n    var hasPushAndReplaceState =\n      !isChromePackagedApp &&\n      _window.history &&\n      _window.history.pushState &&\n      _window.history.replaceState;\n    if (autoBreadcrumbs.location && hasPushAndReplaceState) {\n      // TODO: remove onpopstate handler on uninstall()\n      var oldOnPopState = _window.onpopstate;\n      _window.onpopstate = function() {\n        var currentHref = self._location.href;\n        self._captureUrlChange(self._lastHref, currentHref);\n\n        if (oldOnPopState) {\n          return oldOnPopState.apply(this, arguments);\n        }\n      };\n\n      var historyReplacementFunction = function(origHistFunction) {\n        // note history.pushState.length is 0; intentionally not declaring\n        // params to preserve 0 arity\n        return function(/* state, title, url */) {\n          var url = arguments.length > 2 ? arguments[2] : undefined;\n\n          // url argument is optional\n          if (url) {\n            // coerce to string (this is what pushState does)\n            self._captureUrlChange(self._lastHref, url + '');\n          }\n\n          return origHistFunction.apply(this, arguments);\n        };\n      };\n\n      fill(_window.history, 'pushState', historyReplacementFunction, wrappedBuiltIns);\n      fill(_window.history, 'replaceState', historyReplacementFunction, wrappedBuiltIns);\n    }\n\n    if (autoBreadcrumbs.console && 'console' in _window && console.log) {\n      // console\n      var consoleMethodCallback = function(msg, data) {\n        self.captureBreadcrumb({\n          message: msg,\n          level: data.level,\n          category: 'console'\n        });\n      };\n\n      each(['debug', 'info', 'warn', 'error', 'log'], function(_, level) {\n        wrapConsoleMethod(console, level, consoleMethodCallback);\n      });\n    }\n  },\n\n  _restoreBuiltIns: function() {\n    // restore any wrapped builtins\n    var builtin;\n    while (this._wrappedBuiltIns.length) {\n      builtin = this._wrappedBuiltIns.shift();\n\n      var obj = builtin[0],\n        name = builtin[1],\n        orig = builtin[2];\n\n      obj[name] = orig;\n    }\n  },\n\n  _restoreConsole: function() {\n    // eslint-disable-next-line guard-for-in\n    for (var method in this._originalConsoleMethods) {\n      this._originalConsole[method] = this._originalConsoleMethods[method];\n    }\n  },\n\n  _drainPlugins: function() {\n    var self = this;\n\n    // FIX ME TODO\n    each(this._plugins, function(_, plugin) {\n      var installer = plugin[0];\n      var args = plugin[1];\n      installer.apply(self, [self].concat(args));\n    });\n  },\n\n  _parseDSN: function(str) {\n    var m = dsnPattern.exec(str),\n      dsn = {},\n      i = 7;\n\n    try {\n      while (i--) dsn[dsnKeys[i]] = m[i] || '';\n    } catch (e) {\n      throw new RavenConfigError('Invalid DSN: ' + str);\n    }\n\n    if (dsn.pass && !this._globalOptions.allowSecretKey) {\n      throw new RavenConfigError(\n        'Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key'\n      );\n    }\n\n    return dsn;\n  },\n\n  _getGlobalServer: function(uri) {\n    // assemble the endpoint from the uri pieces\n    var globalServer = '//' + uri.host + (uri.port ? ':' + uri.port : '');\n\n    if (uri.protocol) {\n      globalServer = uri.protocol + ':' + globalServer;\n    }\n    return globalServer;\n  },\n\n  _handleOnErrorStackInfo: function(stackInfo, options) {\n    options = options || {};\n    options.mechanism = options.mechanism || {\n      type: 'onerror',\n      handled: false\n    };\n\n    // if we are intentionally ignoring errors via onerror, bail out\n    if (!this._ignoreOnError) {\n      this._handleStackInfo(stackInfo, options);\n    }\n  },\n\n  _handleStackInfo: function(stackInfo, options) {\n    var frames = this._prepareFrames(stackInfo, options);\n\n    this._triggerEvent('handle', {\n      stackInfo: stackInfo,\n      options: options\n    });\n\n    this._processException(\n      stackInfo.name,\n      stackInfo.message,\n      stackInfo.url,\n      stackInfo.lineno,\n      frames,\n      options\n    );\n  },\n\n  _prepareFrames: function(stackInfo, options) {\n    var self = this;\n    var frames = [];\n    if (stackInfo.stack && stackInfo.stack.length) {\n      each(stackInfo.stack, function(i, stack) {\n        var frame = self._normalizeFrame(stack, stackInfo.url);\n        if (frame) {\n          frames.push(frame);\n        }\n      });\n\n      // e.g. frames captured via captureMessage throw\n      if (options && options.trimHeadFrames) {\n        for (var j = 0; j < options.trimHeadFrames && j < frames.length; j++) {\n          frames[j].in_app = false;\n        }\n      }\n    }\n    frames = frames.slice(0, this._globalOptions.stackTraceLimit);\n    return frames;\n  },\n\n  _normalizeFrame: function(frame, stackInfoUrl) {\n    // normalize the frames data\n    var normalized = {\n      filename: frame.url,\n      lineno: frame.line,\n      colno: frame.column,\n      function: frame.func || '?'\n    };\n\n    // Case when we don't have any information about the error\n    // E.g. throwing a string or raw object, instead of an `Error` in Firefox\n    // Generating synthetic error doesn't add any value here\n    //\n    // We should probably somehow let a user know that they should fix their code\n    if (!frame.url) {\n      normalized.filename = stackInfoUrl; // fallback to whole stacks url from onerror handler\n    }\n\n    normalized.in_app = !// determine if an exception came from outside of our app\n    // first we check the global includePaths list.\n    (\n      (!!this._globalOptions.includePaths.test &&\n        !this._globalOptions.includePaths.test(normalized.filename)) ||\n      // Now we check for fun, if the function name is Raven or TraceKit\n      /(Raven|TraceKit)\\./.test(normalized['function']) ||\n      // finally, we do a last ditch effort and check for raven.min.js\n      /raven\\.(min\\.)?js$/.test(normalized.filename)\n    );\n\n    return normalized;\n  },\n\n  _processException: function(type, message, fileurl, lineno, frames, options) {\n    var prefixedMessage = (type ? type + ': ' : '') + (message || '');\n    if (\n      !!this._globalOptions.ignoreErrors.test &&\n      (this._globalOptions.ignoreErrors.test(message) ||\n        this._globalOptions.ignoreErrors.test(prefixedMessage))\n    ) {\n      return;\n    }\n\n    var stacktrace;\n\n    if (frames && frames.length) {\n      fileurl = frames[0].filename || fileurl;\n      // Sentry expects frames oldest to newest\n      // and JS sends them as newest to oldest\n      frames.reverse();\n      stacktrace = {frames: frames};\n    } else if (fileurl) {\n      stacktrace = {\n        frames: [\n          {\n            filename: fileurl,\n            lineno: lineno,\n            in_app: true\n          }\n        ]\n      };\n    }\n\n    if (\n      !!this._globalOptions.ignoreUrls.test &&\n      this._globalOptions.ignoreUrls.test(fileurl)\n    ) {\n      return;\n    }\n\n    if (\n      !!this._globalOptions.whitelistUrls.test &&\n      !this._globalOptions.whitelistUrls.test(fileurl)\n    ) {\n      return;\n    }\n\n    var data = objectMerge(\n      {\n        // sentry.interfaces.Exception\n        exception: {\n          values: [\n            {\n              type: type,\n              value: message,\n              stacktrace: stacktrace\n            }\n          ]\n        },\n        transaction: fileurl\n      },\n      options\n    );\n\n    var ex = data.exception.values[0];\n    if (ex.type == null && ex.value === '') {\n      ex.value = 'Unrecoverable error caught';\n    }\n\n    // Move mechanism from options to exception interface\n    // We do this, as requiring user to pass `{exception:{mechanism:{ ... }}}` would be\n    // too much\n    if (!data.exception.mechanism && data.mechanism) {\n      data.exception.mechanism = data.mechanism;\n      delete data.mechanism;\n    }\n\n    data.exception.mechanism = objectMerge(\n      {\n        type: 'generic',\n        handled: true\n      },\n      data.exception.mechanism || {}\n    );\n\n    // Fire away!\n    this._send(data);\n  },\n\n  _trimPacket: function(data) {\n    // For now, we only want to truncate the two different messages\n    // but this could/should be expanded to just trim everything\n    var max = this._globalOptions.maxMessageLength;\n    if (data.message) {\n      data.message = truncate(data.message, max);\n    }\n    if (data.exception) {\n      var exception = data.exception.values[0];\n      exception.value = truncate(exception.value, max);\n    }\n\n    var request = data.request;\n    if (request) {\n      if (request.url) {\n        request.url = truncate(request.url, this._globalOptions.maxUrlLength);\n      }\n      if (request.Referer) {\n        request.Referer = truncate(request.Referer, this._globalOptions.maxUrlLength);\n      }\n    }\n\n    if (data.breadcrumbs && data.breadcrumbs.values)\n      this._trimBreadcrumbs(data.breadcrumbs);\n\n    return data;\n  },\n\n  /**\n   * Truncate breadcrumb values (right now just URLs)\n   */\n  _trimBreadcrumbs: function(breadcrumbs) {\n    // known breadcrumb properties with urls\n    // TODO: also consider arbitrary prop values that start with (https?)?://\n    var urlProps = ['to', 'from', 'url'],\n      urlProp,\n      crumb,\n      data;\n\n    for (var i = 0; i < breadcrumbs.values.length; ++i) {\n      crumb = breadcrumbs.values[i];\n      if (\n        !crumb.hasOwnProperty('data') ||\n        !isObject(crumb.data) ||\n        objectFrozen(crumb.data)\n      )\n        continue;\n\n      data = objectMerge({}, crumb.data);\n      for (var j = 0; j < urlProps.length; ++j) {\n        urlProp = urlProps[j];\n        if (data.hasOwnProperty(urlProp) && data[urlProp]) {\n          data[urlProp] = truncate(data[urlProp], this._globalOptions.maxUrlLength);\n        }\n      }\n      breadcrumbs.values[i].data = data;\n    }\n  },\n\n  _getHttpData: function() {\n    if (!this._hasNavigator && !this._hasDocument) return;\n    var httpData = {};\n\n    if (this._hasNavigator && _navigator.userAgent) {\n      httpData.headers = {\n        'User-Agent': _navigator.userAgent\n      };\n    }\n\n    // Check in `window` instead of `document`, as we may be in ServiceWorker environment\n    if (_window.location && _window.location.href) {\n      httpData.url = _window.location.href;\n    }\n\n    if (this._hasDocument && _document.referrer) {\n      if (!httpData.headers) httpData.headers = {};\n      httpData.headers.Referer = _document.referrer;\n    }\n\n    return httpData;\n  },\n\n  _resetBackoff: function() {\n    this._backoffDuration = 0;\n    this._backoffStart = null;\n  },\n\n  _shouldBackoff: function() {\n    return this._backoffDuration && now() - this._backoffStart < this._backoffDuration;\n  },\n\n  /**\n   * Returns true if the in-process data payload matches the signature\n   * of the previously-sent data\n   *\n   * NOTE: This has to be done at this level because TraceKit can generate\n   *       data from window.onerror WITHOUT an exception object (IE8, IE9,\n   *       other old browsers). This can take the form of an \"exception\"\n   *       data object with a single frame (derived from the onerror args).\n   */\n  _isRepeatData: function(current) {\n    var last = this._lastData;\n\n    if (\n      !last ||\n      current.message !== last.message || // defined for captureMessage\n      current.transaction !== last.transaction // defined for captureException/onerror\n    )\n      return false;\n\n    // Stacktrace interface (i.e. from captureMessage)\n    if (current.stacktrace || last.stacktrace) {\n      return isSameStacktrace(current.stacktrace, last.stacktrace);\n    } else if (current.exception || last.exception) {\n      // Exception interface (i.e. from captureException/onerror)\n      return isSameException(current.exception, last.exception);\n    }\n\n    return true;\n  },\n\n  _setBackoffState: function(request) {\n    // If we are already in a backoff state, don't change anything\n    if (this._shouldBackoff()) {\n      return;\n    }\n\n    var status = request.status;\n\n    // 400 - project_id doesn't exist or some other fatal\n    // 401 - invalid/revoked dsn\n    // 429 - too many requests\n    if (!(status === 400 || status === 401 || status === 429)) return;\n\n    var retry;\n    try {\n      // If Retry-After is not in Access-Control-Expose-Headers, most\n      // browsers will throw an exception trying to access it\n      if (supportsFetch()) {\n        retry = request.headers.get('Retry-After');\n      } else {\n        retry = request.getResponseHeader('Retry-After');\n      }\n\n      // Retry-After is returned in seconds\n      retry = parseInt(retry, 10) * 1000;\n    } catch (e) {\n      /* eslint no-empty:0 */\n    }\n\n    this._backoffDuration = retry\n      ? // If Sentry server returned a Retry-After value, use it\n        retry\n      : // Otherwise, double the last backoff duration (starts at 1 sec)\n        this._backoffDuration * 2 || 1000;\n\n    this._backoffStart = now();\n  },\n\n  _send: function(data) {\n    var globalOptions = this._globalOptions;\n\n    var baseData = {\n        project: this._globalProject,\n        logger: globalOptions.logger,\n        platform: 'javascript'\n      },\n      httpData = this._getHttpData();\n\n    if (httpData) {\n      baseData.request = httpData;\n    }\n\n    // HACK: delete `trimHeadFrames` to prevent from appearing in outbound payload\n    if (data.trimHeadFrames) delete data.trimHeadFrames;\n\n    data = objectMerge(baseData, data);\n\n    // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge\n    data.tags = objectMerge(objectMerge({}, this._globalContext.tags), data.tags);\n    data.extra = objectMerge(objectMerge({}, this._globalContext.extra), data.extra);\n\n    // Send along our own collected metadata with extra\n    data.extra['session:duration'] = now() - this._startTime;\n\n    if (this._breadcrumbs && this._breadcrumbs.length > 0) {\n      // intentionally make shallow copy so that additions\n      // to breadcrumbs aren't accidentally sent in this request\n      data.breadcrumbs = {\n        values: [].slice.call(this._breadcrumbs, 0)\n      };\n    }\n\n    if (this._globalContext.user) {\n      // sentry.interfaces.User\n      data.user = this._globalContext.user;\n    }\n\n    // Include the environment if it's defined in globalOptions\n    if (globalOptions.environment) data.environment = globalOptions.environment;\n\n    // Include the release if it's defined in globalOptions\n    if (globalOptions.release) data.release = globalOptions.release;\n\n    // Include server_name if it's defined in globalOptions\n    if (globalOptions.serverName) data.server_name = globalOptions.serverName;\n\n    data = this._sanitizeData(data);\n\n    // Cleanup empty properties before sending them to the server\n    Object.keys(data).forEach(function(key) {\n      if (data[key] == null || data[key] === '' || isEmptyObject(data[key])) {\n        delete data[key];\n      }\n    });\n\n    if (isFunction(globalOptions.dataCallback)) {\n      data = globalOptions.dataCallback(data) || data;\n    }\n\n    // Why??????????\n    if (!data || isEmptyObject(data)) {\n      return;\n    }\n\n    // Check if the request should be filtered or not\n    if (\n      isFunction(globalOptions.shouldSendCallback) &&\n      !globalOptions.shouldSendCallback(data)\n    ) {\n      return;\n    }\n\n    // Backoff state: Sentry server previously responded w/ an error (e.g. 429 - too many requests),\n    // so drop requests until \"cool-off\" period has elapsed.\n    if (this._shouldBackoff()) {\n      this._logDebug('warn', 'Raven dropped error due to backoff: ', data);\n      return;\n    }\n\n    if (typeof globalOptions.sampleRate === 'number') {\n      if (Math.random() < globalOptions.sampleRate) {\n        this._sendProcessedPayload(data);\n      }\n    } else {\n      this._sendProcessedPayload(data);\n    }\n  },\n\n  _sanitizeData: function(data) {\n    return sanitize(data, this._globalOptions.sanitizeKeys);\n  },\n\n  _getUuid: function() {\n    return uuid4();\n  },\n\n  _sendProcessedPayload: function(data, callback) {\n    var self = this;\n    var globalOptions = this._globalOptions;\n\n    if (!this.isSetup()) return;\n\n    // Try and clean up the packet before sending by truncating long values\n    data = this._trimPacket(data);\n\n    // ideally duplicate error testing should occur *before* dataCallback/shouldSendCallback,\n    // but this would require copying an un-truncated copy of the data packet, which can be\n    // arbitrarily deep (extra_data) -- could be worthwhile? will revisit\n    if (!this._globalOptions.allowDuplicates && this._isRepeatData(data)) {\n      this._logDebug('warn', 'Raven dropped repeat event: ', data);\n      return;\n    }\n\n    // Send along an event_id if not explicitly passed.\n    // This event_id can be used to reference the error within Sentry itself.\n    // Set lastEventId after we know the error should actually be sent\n    this._lastEventId = data.event_id || (data.event_id = this._getUuid());\n\n    // Store outbound payload after trim\n    this._lastData = data;\n\n    this._logDebug('debug', 'Raven about to send:', data);\n\n    var auth = {\n      sentry_version: '7',\n      sentry_client: 'raven-js/' + this.VERSION,\n      sentry_key: this._globalKey\n    };\n\n    if (this._globalSecret) {\n      auth.sentry_secret = this._globalSecret;\n    }\n\n    var exception = data.exception && data.exception.values[0];\n\n    // only capture 'sentry' breadcrumb is autoBreadcrumbs is truthy\n    if (\n      this._globalOptions.autoBreadcrumbs &&\n      this._globalOptions.autoBreadcrumbs.sentry\n    ) {\n      this.captureBreadcrumb({\n        category: 'sentry',\n        message: exception\n          ? (exception.type ? exception.type + ': ' : '') + exception.value\n          : data.message,\n        event_id: data.event_id,\n        level: data.level || 'error' // presume error unless specified\n      });\n    }\n\n    var url = this._globalEndpoint;\n    (globalOptions.transport || this._makeRequest).call(this, {\n      url: url,\n      auth: auth,\n      data: data,\n      options: globalOptions,\n      onSuccess: function success() {\n        self._resetBackoff();\n\n        self._triggerEvent('success', {\n          data: data,\n          src: url\n        });\n        callback && callback();\n      },\n      onError: function failure(error) {\n        self._logDebug('error', 'Raven transport failed to send: ', error);\n\n        if (error.request) {\n          self._setBackoffState(error.request);\n        }\n\n        self._triggerEvent('failure', {\n          data: data,\n          src: url\n        });\n        error = error || new Error('Raven send failed (no additional details provided)');\n        callback && callback(error);\n      }\n    });\n  },\n\n  _makeRequest: function(opts) {\n    // Auth is intentionally sent as part of query string (NOT as custom HTTP header) to avoid preflight CORS requests\n    var url = opts.url + '?' + urlencode(opts.auth);\n\n    var evaluatedHeaders = null;\n    var evaluatedFetchParameters = {};\n\n    if (opts.options.headers) {\n      evaluatedHeaders = this._evaluateHash(opts.options.headers);\n    }\n\n    if (opts.options.fetchParameters) {\n      evaluatedFetchParameters = this._evaluateHash(opts.options.fetchParameters);\n    }\n\n    if (supportsFetch()) {\n      evaluatedFetchParameters.body = stringify(opts.data);\n\n      var defaultFetchOptions = objectMerge({}, this._fetchDefaults);\n      var fetchOptions = objectMerge(defaultFetchOptions, evaluatedFetchParameters);\n\n      if (evaluatedHeaders) {\n        fetchOptions.headers = evaluatedHeaders;\n      }\n\n      return _window\n        .fetch(url, fetchOptions)\n        .then(function(response) {\n          if (response.ok) {\n            opts.onSuccess && opts.onSuccess();\n          } else {\n            var error = new Error('Sentry error code: ' + response.status);\n            // It's called request only to keep compatibility with XHR interface\n            // and not add more redundant checks in setBackoffState method\n            error.request = response;\n            opts.onError && opts.onError(error);\n          }\n        })\n        ['catch'](function() {\n          opts.onError &&\n            opts.onError(new Error('Sentry error code: network unavailable'));\n        });\n    }\n\n    var request = _window.XMLHttpRequest && new _window.XMLHttpRequest();\n    if (!request) return;\n\n    // if browser doesn't support CORS (e.g. IE7), we are out of luck\n    var hasCORS = 'withCredentials' in request || typeof XDomainRequest !== 'undefined';\n\n    if (!hasCORS) return;\n\n    if ('withCredentials' in request) {\n      request.onreadystatechange = function() {\n        if (request.readyState !== 4) {\n          return;\n        } else if (request.status === 200) {\n          opts.onSuccess && opts.onSuccess();\n        } else if (opts.onError) {\n          var err = new Error('Sentry error code: ' + request.status);\n          err.request = request;\n          opts.onError(err);\n        }\n      };\n    } else {\n      request = new XDomainRequest();\n      // xdomainrequest cannot go http -> https (or vice versa),\n      // so always use protocol relative\n      url = url.replace(/^https?:/, '');\n\n      // onreadystatechange not supported by XDomainRequest\n      if (opts.onSuccess) {\n        request.onload = opts.onSuccess;\n      }\n      if (opts.onError) {\n        request.onerror = function() {\n          var err = new Error('Sentry error code: XDomainRequest');\n          err.request = request;\n          opts.onError(err);\n        };\n      }\n    }\n\n    request.open('POST', url);\n\n    if (evaluatedHeaders) {\n      each(evaluatedHeaders, function(key, value) {\n        request.setRequestHeader(key, value);\n      });\n    }\n\n    request.send(stringify(opts.data));\n  },\n\n  _evaluateHash: function(hash) {\n    var evaluated = {};\n\n    for (var key in hash) {\n      if (hash.hasOwnProperty(key)) {\n        var value = hash[key];\n        evaluated[key] = typeof value === 'function' ? value() : value;\n      }\n    }\n\n    return evaluated;\n  },\n\n  _logDebug: function(level) {\n    // We allow `Raven.debug` and `Raven.config(DSN, { debug: true })` to not make backward incompatible API change\n    if (\n      this._originalConsoleMethods[level] &&\n      (this.debug || this._globalOptions.debug)\n    ) {\n      // In IE<10 console methods do not have their own 'apply' method\n      Function.prototype.apply.call(\n        this._originalConsoleMethods[level],\n        this._originalConsole,\n        [].slice.call(arguments, 1)\n      );\n    }\n  },\n\n  _mergeContext: function(key, context) {\n    if (isUndefined(context)) {\n      delete this._globalContext[key];\n    } else {\n      this._globalContext[key] = objectMerge(this._globalContext[key] || {}, context);\n    }\n  }\n};\n\n// Deprecations\nRaven.prototype.setUser = Raven.prototype.setUserContext;\nRaven.prototype.setReleaseContext = Raven.prototype.setRelease;\n\nmodule.exports = Raven;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/src/raven.js\n// module id = 459\n// module chunks = 0","/**\n * Enforces a single instance of the Raven client, and the\n * main entry point for Raven. If you are a consumer of the\n * Raven library, you SHOULD load this file (vs raven.js).\n **/\n\nvar RavenConstructor = require('./raven');\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window =\n  typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nvar _Raven = _window.Raven;\n\nvar Raven = new RavenConstructor();\n\n/*\n * Allow multiple versions of Raven to be installed.\n * Strip Raven from the global context and returns the instance.\n *\n * @return {Raven}\n */\nRaven.noConflict = function() {\n  _window.Raven = _Raven;\n  return Raven;\n};\n\nRaven.afterLoad();\n\nmodule.exports = Raven;\n\n/**\n * DISCLAIMER:\n *\n * Expose `Client` constructor for cases where user want to track multiple \"sub-applications\" in one larger app.\n * It's not meant to be used by a wide audience, so pleaaase make sure that you know what you're doing before using it.\n * Accidentally calling `install` multiple times, may result in an unexpected behavior that's very hard to debug.\n *\n * It's called `Client' to be in-line with Raven Node implementation.\n *\n * HOWTO:\n *\n * import Raven from 'raven-js';\n *\n * const someAppReporter = new Raven.Client();\n * const someOtherAppReporter = new Raven.Client();\n *\n * someAppReporter.config('__DSN__', {\n *   ...config goes here\n * });\n *\n * someOtherAppReporter.config('__OTHER_DSN__', {\n *   ...config goes here\n * });\n *\n * someAppReporter.captureMessage(...);\n * someAppReporter.captureException(...);\n * someAppReporter.captureBreadcrumb(...);\n *\n * someOtherAppReporter.captureMessage(...);\n * someOtherAppReporter.captureException(...);\n * someOtherAppReporter.captureBreadcrumb(...);\n *\n * It should \"just work\".\n */\nmodule.exports.Client = RavenConstructor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/src/singleton.js\n// module id = 213\n// module chunks = 0","var stringify = require('../vendor/json-stringify-safe/stringify');\n\nvar _window =\n  typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n      ? global\n      : typeof self !== 'undefined'\n        ? self\n        : {};\n\nfunction isObject(what) {\n  return typeof what === 'object' && what !== null;\n}\n\n// Yanked from https://git.io/vS8DV re-used under CC0\n// with some tiny modifications\nfunction isError(value) {\n  switch (Object.prototype.toString.call(value)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return value instanceof Error;\n  }\n}\n\nfunction isErrorEvent(value) {\n  return Object.prototype.toString.call(value) === '[object ErrorEvent]';\n}\n\nfunction isDOMError(value) {\n  return Object.prototype.toString.call(value) === '[object DOMError]';\n}\n\nfunction isDOMException(value) {\n  return Object.prototype.toString.call(value) === '[object DOMException]';\n}\n\nfunction isUndefined(what) {\n  return what === void 0;\n}\n\nfunction isFunction(what) {\n  return typeof what === 'function';\n}\n\nfunction isPlainObject(what) {\n  return Object.prototype.toString.call(what) === '[object Object]';\n}\n\nfunction isString(what) {\n  return Object.prototype.toString.call(what) === '[object String]';\n}\n\nfunction isArray(what) {\n  return Object.prototype.toString.call(what) === '[object Array]';\n}\n\nfunction isEmptyObject(what) {\n  if (!isPlainObject(what)) return false;\n\n  for (var _ in what) {\n    if (what.hasOwnProperty(_)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent(''); // eslint-disable-line no-new\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction supportsDOMError() {\n  try {\n    new DOMError(''); // eslint-disable-line no-new\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction supportsDOMException() {\n  try {\n    new DOMException(''); // eslint-disable-line no-new\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction supportsFetch() {\n  if (!('fetch' in _window)) return false;\n\n  try {\n    new Headers(); // eslint-disable-line no-new\n    new Request(''); // eslint-disable-line no-new\n    new Response(); // eslint-disable-line no-new\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n// https://caniuse.com/#feat=referrer-policy\n// It doesn't. And it throw exception instead of ignoring this parameter...\n// REF: https://github.com/getsentry/raven-js/issues/1233\nfunction supportsReferrerPolicy() {\n  if (!supportsFetch()) return false;\n\n  try {\n    // eslint-disable-next-line no-new\n    new Request('pickleRick', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction supportsPromiseRejectionEvent() {\n  return typeof PromiseRejectionEvent === 'function';\n}\n\nfunction wrappedCallback(callback) {\n  function dataCallback(data, original) {\n    var normalizedData = callback(data) || data;\n    if (original) {\n      return original(normalizedData) || normalizedData;\n    }\n    return normalizedData;\n  }\n\n  return dataCallback;\n}\n\nfunction each(obj, callback) {\n  var i, j;\n\n  if (isUndefined(obj.length)) {\n    for (i in obj) {\n      if (hasKey(obj, i)) {\n        callback.call(null, i, obj[i]);\n      }\n    }\n  } else {\n    j = obj.length;\n    if (j) {\n      for (i = 0; i < j; i++) {\n        callback.call(null, i, obj[i]);\n      }\n    }\n  }\n}\n\nfunction objectMerge(obj1, obj2) {\n  if (!obj2) {\n    return obj1;\n  }\n  each(obj2, function(key, value) {\n    obj1[key] = value;\n  });\n  return obj1;\n}\n\n/**\n * This function is only used for react-native.\n * react-native freezes object that have already been sent over the\n * js bridge. We need this function in order to check if the object is frozen.\n * So it's ok that objectFrozen returns false if Object.isFrozen is not\n * supported because it's not relevant for other \"platforms\". See related issue:\n * https://github.com/getsentry/react-native-sentry/issues/57\n */\nfunction objectFrozen(obj) {\n  if (!Object.isFrozen) {\n    return false;\n  }\n  return Object.isFrozen(obj);\n}\n\nfunction truncate(str, max) {\n  if (typeof max !== 'number') {\n    throw new Error('2nd argument to `truncate` function should be a number');\n  }\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : str.substr(0, max) + '\\u2026';\n}\n\n/**\n * hasKey, a better form of hasOwnProperty\n * Example: hasKey(MainHostObject, property) === true/false\n *\n * @param {Object} host object to check property\n * @param {string} key to check\n */\nfunction hasKey(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction joinRegExp(patterns) {\n  // Combine an array of regular expressions and strings into one large regexp\n  // Be mad.\n  var sources = [],\n    i = 0,\n    len = patterns.length,\n    pattern;\n\n  for (; i < len; i++) {\n    pattern = patterns[i];\n    if (isString(pattern)) {\n      // If it's a string, we need to escape it\n      // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n      sources.push(pattern.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'));\n    } else if (pattern && pattern.source) {\n      // If it's a regexp already, we want to extract the source\n      sources.push(pattern.source);\n    }\n    // Intentionally skip other cases\n  }\n  return new RegExp(sources.join('|'), 'i');\n}\n\nfunction urlencode(o) {\n  var pairs = [];\n  each(o, function(key, value) {\n    pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n  });\n  return pairs.join('&');\n}\n\n// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n// intentionally using regex and not <a/> href parsing trick because React Native and other\n// environments where DOM might not be available\nfunction parseUrl(url) {\n  if (typeof url !== 'string') return {};\n  var match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  var query = match[6] || '';\n  var fragment = match[8] || '';\n  return {\n    protocol: match[2],\n    host: match[4],\n    path: match[5],\n    relative: match[5] + query + fragment // everything minus origin\n  };\n}\nfunction uuid4() {\n  var crypto = _window.crypto || _window.msCrypto;\n\n  if (!isUndefined(crypto) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    // eslint-disable-next-line no-undef\n    var arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    var pad = function(num) {\n      var v = num.toString(16);\n      while (v.length < 4) {\n        v = '0' + v;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) +\n      pad(arr[1]) +\n      pad(arr[2]) +\n      pad(arr[3]) +\n      pad(arr[4]) +\n      pad(arr[5]) +\n      pad(arr[6]) +\n      pad(arr[7])\n    );\n  } else {\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (Math.random() * 16) | 0,\n        v = c === 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @param elem\n * @returns {string}\n */\nfunction htmlTreeAsString(elem) {\n  /* eslint no-extra-parens:0*/\n  var MAX_TRAVERSE_HEIGHT = 5,\n    MAX_OUTPUT_LEN = 80,\n    out = [],\n    height = 0,\n    len = 0,\n    separator = ' > ',\n    sepLength = separator.length,\n    nextStr;\n\n  while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n    nextStr = htmlElementAsString(elem);\n    // bail out if\n    // - nextStr is the 'html' element\n    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n    //   (ignore this limit if we are on the first iteration)\n    if (\n      nextStr === 'html' ||\n      (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)\n    ) {\n      break;\n    }\n\n    out.push(nextStr);\n\n    len += nextStr.length;\n    elem = elem.parentNode;\n  }\n\n  return out.reverse().join(separator);\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @param HTMLElement\n * @returns {string}\n */\nfunction htmlElementAsString(elem) {\n  var out = [],\n    className,\n    classes,\n    key,\n    attr,\n    i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push('#' + elem.id);\n  }\n\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push('.' + classes[i]);\n    }\n  }\n  var attrWhitelist = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push('[' + key + '=\"' + attr + '\"]');\n    }\n  }\n  return out.join('');\n}\n\n/**\n * Returns true if either a OR b is truthy, but not both\n */\nfunction isOnlyOneTruthy(a, b) {\n  return !!(!!a ^ !!b);\n}\n\n/**\n * Returns true if both parameters are undefined\n */\nfunction isBothUndefined(a, b) {\n  return isUndefined(a) && isUndefined(b);\n}\n\n/**\n * Returns true if the two input exception interfaces have the same content\n */\nfunction isSameException(ex1, ex2) {\n  if (isOnlyOneTruthy(ex1, ex2)) return false;\n\n  ex1 = ex1.values[0];\n  ex2 = ex2.values[0];\n\n  if (ex1.type !== ex2.type || ex1.value !== ex2.value) return false;\n\n  // in case both stacktraces are undefined, we can't decide so default to false\n  if (isBothUndefined(ex1.stacktrace, ex2.stacktrace)) return false;\n\n  return isSameStacktrace(ex1.stacktrace, ex2.stacktrace);\n}\n\n/**\n * Returns true if the two input stack trace interfaces have the same content\n */\nfunction isSameStacktrace(stack1, stack2) {\n  if (isOnlyOneTruthy(stack1, stack2)) return false;\n\n  var frames1 = stack1.frames;\n  var frames2 = stack2.frames;\n\n  // Exit early if stacktrace is malformed\n  if (frames1 === undefined || frames2 === undefined) return false;\n\n  // Exit early if frame count differs\n  if (frames1.length !== frames2.length) return false;\n\n  // Iterate through every frame; bail out if anything differs\n  var a, b;\n  for (var i = 0; i < frames1.length; i++) {\n    a = frames1[i];\n    b = frames2[i];\n    if (\n      a.filename !== b.filename ||\n      a.lineno !== b.lineno ||\n      a.colno !== b.colno ||\n      a['function'] !== b['function']\n    )\n      return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill a method\n * @param obj object e.g. `document`\n * @param name method name present on object e.g. `addEventListener`\n * @param replacement replacement function\n * @param track {optional} record instrumentation to an array\n */\nfunction fill(obj, name, replacement, track) {\n  if (obj == null) return;\n  var orig = obj[name];\n  obj[name] = replacement(orig);\n  obj[name].__raven__ = true;\n  obj[name].__orig__ = orig;\n  if (track) {\n    track.push([obj, name, orig]);\n  }\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns {string}\n */\nfunction safeJoin(input, delimiter) {\n  if (!isArray(input)) return '';\n\n  var output = [];\n\n  for (var i = 0; i < input.length; i++) {\n    try {\n      output.push(String(input[i]));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n// Default Node.js REPL depth\nvar MAX_SERIALIZE_EXCEPTION_DEPTH = 3;\n// 50kB, as 100kB is max payload size, so half sounds reasonable\nvar MAX_SERIALIZE_EXCEPTION_SIZE = 50 * 1024;\nvar MAX_SERIALIZE_KEYS_LENGTH = 40;\n\nfunction utf8Length(value) {\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\nfunction serializeValue(value) {\n  if (typeof value === 'string') {\n    var maxLength = 40;\n    return truncate(value, maxLength);\n  } else if (\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined'\n  ) {\n    return value;\n  }\n\n  var type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (type === '[object Object]') return '[Object]';\n  if (type === '[object Array]') return '[Array]';\n  if (type === '[object Function]')\n    return value.name ? '[Function: ' + value.name + ']' : '[Function]';\n\n  return value;\n}\n\nfunction serializeObject(value, depth) {\n  if (depth === 0) return serializeValue(value);\n\n  if (isPlainObject(value)) {\n    return Object.keys(value).reduce(function(acc, key) {\n      acc[key] = serializeObject(value[key], depth - 1);\n      return acc;\n    }, {});\n  } else if (Array.isArray(value)) {\n    return value.map(function(val) {\n      return serializeObject(val, depth - 1);\n    });\n  }\n\n  return serializeValue(value);\n}\n\nfunction serializeException(ex, depth, maxSize) {\n  if (!isPlainObject(ex)) return ex;\n\n  depth = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_DEPTH : depth;\n  maxSize = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_SIZE : maxSize;\n\n  var serialized = serializeObject(ex, depth);\n\n  if (jsonSize(stringify(serialized)) > maxSize) {\n    return serializeException(ex, depth - 1);\n  }\n\n  return serialized;\n}\n\nfunction serializeKeysForMessage(keys, maxLength) {\n  if (typeof keys === 'number' || typeof keys === 'string') return keys.toString();\n  if (!Array.isArray(keys)) return '';\n\n  keys = keys.filter(function(key) {\n    return typeof key === 'string';\n  });\n  if (keys.length === 0) return '[object has no keys]';\n\n  maxLength = typeof maxLength !== 'number' ? MAX_SERIALIZE_KEYS_LENGTH : maxLength;\n  if (keys[0].length >= maxLength) return keys[0];\n\n  for (var usedKeys = keys.length; usedKeys > 0; usedKeys--) {\n    var serialized = keys.slice(0, usedKeys).join(', ');\n    if (serialized.length > maxLength) continue;\n    if (usedKeys === keys.length) return serialized;\n    return serialized + '\\u2026';\n  }\n\n  return '';\n}\n\nfunction sanitize(input, sanitizeKeys) {\n  if (!isArray(sanitizeKeys) || (isArray(sanitizeKeys) && sanitizeKeys.length === 0))\n    return input;\n\n  var sanitizeRegExp = joinRegExp(sanitizeKeys);\n  var sanitizeMask = '********';\n  var safeInput;\n\n  try {\n    safeInput = JSON.parse(stringify(input));\n  } catch (o_O) {\n    return input;\n  }\n\n  function sanitizeWorker(workerInput) {\n    if (isArray(workerInput)) {\n      return workerInput.map(function(val) {\n        return sanitizeWorker(val);\n      });\n    }\n\n    if (isPlainObject(workerInput)) {\n      return Object.keys(workerInput).reduce(function(acc, k) {\n        if (sanitizeRegExp.test(k)) {\n          acc[k] = sanitizeMask;\n        } else {\n          acc[k] = sanitizeWorker(workerInput[k]);\n        }\n        return acc;\n      }, {});\n    }\n\n    return workerInput;\n  }\n\n  return sanitizeWorker(safeInput);\n}\n\nmodule.exports = {\n  isObject: isObject,\n  isError: isError,\n  isErrorEvent: isErrorEvent,\n  isDOMError: isDOMError,\n  isDOMException: isDOMException,\n  isUndefined: isUndefined,\n  isFunction: isFunction,\n  isPlainObject: isPlainObject,\n  isString: isString,\n  isArray: isArray,\n  isEmptyObject: isEmptyObject,\n  supportsErrorEvent: supportsErrorEvent,\n  supportsDOMError: supportsDOMError,\n  supportsDOMException: supportsDOMException,\n  supportsFetch: supportsFetch,\n  supportsReferrerPolicy: supportsReferrerPolicy,\n  supportsPromiseRejectionEvent: supportsPromiseRejectionEvent,\n  wrappedCallback: wrappedCallback,\n  each: each,\n  objectMerge: objectMerge,\n  truncate: truncate,\n  objectFrozen: objectFrozen,\n  hasKey: hasKey,\n  joinRegExp: joinRegExp,\n  urlencode: urlencode,\n  uuid4: uuid4,\n  htmlTreeAsString: htmlTreeAsString,\n  htmlElementAsString: htmlElementAsString,\n  isSameException: isSameException,\n  isSameStacktrace: isSameStacktrace,\n  parseUrl: parseUrl,\n  fill: fill,\n  safeJoin: safeJoin,\n  serializeException: serializeException,\n  serializeKeysForMessage: serializeKeysForMessage,\n  sanitize: sanitize\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/src/utils.js\n// module id = 144\n// module chunks = 0","var utils = require('../../src/utils');\n\n/*\n TraceKit - Cross brower stack traces\n\n This was originally forked from github.com/occ/TraceKit, but has since been\n largely re-written and is now maintained as part of raven-js.  Tests for\n this are in test/vendor.\n\n MIT license\n*/\n\nvar TraceKit = {\n  collectWindowErrors: true,\n  debug: false\n};\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window =\n  typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\nfunction getLocationHref() {\n  if (typeof document === 'undefined' || document.location == null) return '';\n  return document.location.href;\n}\n\nfunction getLocationOrigin() {\n  if (typeof document === 'undefined' || document.location == null) return '';\n\n  // Oh dear IE10...\n  if (!document.location.origin) {\n    return (\n      document.location.protocol +\n      '//' +\n      document.location.hostname +\n      (document.location.port ? ':' + document.location.port : '')\n    );\n  }\n\n  return document.location.origin;\n}\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n  var handlers = [],\n    lastArgs = null,\n    lastException = null,\n    lastExceptionStack = null;\n\n  /**\n   * Add a crash handler.\n   * @param {Function} handler\n   */\n  function subscribe(handler) {\n    installGlobalHandler();\n    handlers.push(handler);\n  }\n\n  /**\n   * Remove a crash handler.\n   * @param {Function} handler\n   */\n  function unsubscribe(handler) {\n    for (var i = handlers.length - 1; i >= 0; --i) {\n      if (handlers[i] === handler) {\n        handlers.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Remove all crash handlers.\n   */\n  function unsubscribeAll() {\n    uninstallGlobalHandler();\n    handlers = [];\n  }\n\n  /**\n   * Dispatch stack information to all handlers.\n   * @param {Object.<string, *>} stack\n   */\n  function notifyHandlers(stack, isWindowError) {\n    var exception = null;\n    if (isWindowError && !TraceKit.collectWindowErrors) {\n      return;\n    }\n    for (var i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        try {\n          handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n        } catch (inner) {\n          exception = inner;\n        }\n      }\n    }\n\n    if (exception) {\n      throw exception;\n    }\n  }\n\n  var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n  /**\n   * Ensures all global unhandled exceptions are recorded.\n   * Supported by Gecko and IE.\n   * @param {string} msg Error message.\n   * @param {string} url URL of script that generated the exception.\n   * @param {(number|string)} lineNo The line number at which the error\n   * occurred.\n   * @param {?(number|string)} colNo The column number at which the error\n   * occurred.\n   * @param {?Error} ex The actual Error object.\n   */\n  function traceKitWindowOnError(msg, url, lineNo, colNo, ex) {\n    var stack = null;\n    // If 'ex' is ErrorEvent, get real Error from inside\n    var exception = utils.isErrorEvent(ex) ? ex.error : ex;\n    // If 'msg' is ErrorEvent, get real message from inside\n    var message = utils.isErrorEvent(msg) ? msg.message : msg;\n\n    if (lastExceptionStack) {\n      TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(\n        lastExceptionStack,\n        url,\n        lineNo,\n        message\n      );\n      processLastException();\n    } else if (exception && utils.isError(exception)) {\n      // non-string `exception` arg; attempt to extract stack trace\n\n      // New chrome and blink send along a real error object\n      // Let's just report that like a normal error.\n      // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n      stack = TraceKit.computeStackTrace(exception);\n      notifyHandlers(stack, true);\n    } else {\n      var location = {\n        url: url,\n        line: lineNo,\n        column: colNo\n      };\n\n      var name = undefined;\n      var groups;\n\n      if ({}.toString.call(message) === '[object String]') {\n        var groups = message.match(ERROR_TYPES_RE);\n        if (groups) {\n          name = groups[1];\n          message = groups[2];\n        }\n      }\n\n      location.func = UNKNOWN_FUNCTION;\n\n      stack = {\n        name: name,\n        message: message,\n        url: getLocationHref(),\n        stack: [location]\n      };\n      notifyHandlers(stack, true);\n    }\n\n    if (_oldOnerrorHandler) {\n      return _oldOnerrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  }\n\n  function installGlobalHandler() {\n    if (_onErrorHandlerInstalled) {\n      return;\n    }\n    _oldOnerrorHandler = _window.onerror;\n    _window.onerror = traceKitWindowOnError;\n    _onErrorHandlerInstalled = true;\n  }\n\n  function uninstallGlobalHandler() {\n    if (!_onErrorHandlerInstalled) {\n      return;\n    }\n    _window.onerror = _oldOnerrorHandler;\n    _onErrorHandlerInstalled = false;\n    _oldOnerrorHandler = undefined;\n  }\n\n  function processLastException() {\n    var _lastExceptionStack = lastExceptionStack,\n      _lastArgs = lastArgs;\n    lastArgs = null;\n    lastExceptionStack = null;\n    lastException = null;\n    notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n  }\n\n  /**\n   * Reports an unhandled Error to TraceKit.\n   * @param {Error} ex\n   * @param {?boolean} rethrow If false, do not re-throw the exception.\n   * Only used for window.onerror to not cause an infinite loop of\n   * rethrowing.\n   */\n  function report(ex, rethrow) {\n    var args = _slice.call(arguments, 1);\n    if (lastExceptionStack) {\n      if (lastException === ex) {\n        return; // already caught by an inner catch block, ignore\n      } else {\n        processLastException();\n      }\n    }\n\n    var stack = TraceKit.computeStackTrace(ex);\n    lastExceptionStack = stack;\n    lastException = ex;\n    lastArgs = args;\n\n    // If the stack trace is incomplete, wait for 2 seconds for\n    // slow slow IE to see if onerror occurs or not before reporting\n    // this exception; otherwise, we will end up with an incomplete\n    // stack trace\n    setTimeout(function() {\n      if (lastException === ex) {\n        processLastException();\n      }\n    }, stack.incomplete ? 2000 : 0);\n\n    if (rethrow !== false) {\n      throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n  }\n\n  report.subscribe = subscribe;\n  report.unsubscribe = unsubscribe;\n  report.uninstall = unsubscribeAll;\n  return report;\n})();\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n  // Contents of Exception in various browsers.\n  //\n  // SAFARI:\n  // ex.message = Can't find variable: qq\n  // ex.line = 59\n  // ex.sourceId = 580238192\n  // ex.sourceURL = http://...\n  // ex.expressionBeginOffset = 96\n  // ex.expressionCaretOffset = 98\n  // ex.expressionEndOffset = 98\n  // ex.name = ReferenceError\n  //\n  // FIREFOX:\n  // ex.message = qq is not defined\n  // ex.fileName = http://...\n  // ex.lineNumber = 59\n  // ex.columnNumber = 69\n  // ex.stack = ...stack trace... (see the example below)\n  // ex.name = ReferenceError\n  //\n  // CHROME:\n  // ex.message = qq is not defined\n  // ex.name = ReferenceError\n  // ex.type = not_defined\n  // ex.arguments = ['aa']\n  // ex.stack = ...stack trace...\n  //\n  // INTERNET EXPLORER:\n  // ex.message = ...\n  // ex.name = ReferenceError\n  //\n  // OPERA:\n  // ex.message = ...message... (see the example below)\n  // ex.name = ReferenceError\n  // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n  // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n  /**\n   * Computes stack trace information from the stack property.\n   * Chrome and Gecko use this property.\n   * @param {Error} ex\n   * @return {?Object.<string, *>} Stack trace information.\n   */\n  function computeStackTraceFromStackProp(ex) {\n    if (typeof ex.stack === 'undefined' || !ex.stack) return;\n\n    var chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n    var winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx(?:-web)|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n    // NOTE: blob urls are now supposed to always have an origin, therefore it's format\n    // which is `blob:http://url/path/with-some-uuid`, is matched by `blob.*?:\\/` as well\n    var gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\\/.*?|\\[native code\\]|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\n    // Used to additionally parse URL/line/column from eval frames\n    var geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n    var chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n    var lines = ex.stack.split('\\n');\n    var stack = [];\n    var submatch;\n    var parts;\n    var element;\n    var reference = /^(.*) is undefined$/.exec(ex.message);\n\n    for (var i = 0, j = lines.length; i < j; ++i) {\n      if ((parts = chrome.exec(lines[i]))) {\n        var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n        var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n        if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n          // throw out eval line/column and use top-most line/column number\n          parts[2] = submatch[1]; // url\n          parts[3] = submatch[2]; // line\n          parts[4] = submatch[3]; // column\n        }\n        element = {\n          url: !isNative ? parts[2] : null,\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: isNative ? [parts[2]] : [],\n          line: parts[3] ? +parts[3] : null,\n          column: parts[4] ? +parts[4] : null\n        };\n      } else if ((parts = winjs.exec(lines[i]))) {\n        element = {\n          url: parts[2],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: [],\n          line: +parts[3],\n          column: parts[4] ? +parts[4] : null\n        };\n      } else if ((parts = gecko.exec(lines[i]))) {\n        var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n        if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n          // throw out eval line/column and use top-most line number\n          parts[3] = submatch[1];\n          parts[4] = submatch[2];\n          parts[5] = null; // no column when eval\n        } else if (i === 0 && !parts[5] && typeof ex.columnNumber !== 'undefined') {\n          // FireFox uses this awesome columnNumber property for its top frame\n          // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n          // so adding 1\n          // NOTE: this hack doesn't work if top-most frame is eval\n          stack[0].column = ex.columnNumber + 1;\n        }\n        element = {\n          url: parts[3],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: parts[2] ? parts[2].split(',') : [],\n          line: parts[4] ? +parts[4] : null,\n          column: parts[5] ? +parts[5] : null\n        };\n      } else {\n        continue;\n      }\n\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n\n      if (element.url && element.url.substr(0, 5) === 'blob:') {\n        // Special case for handling JavaScript loaded into a blob.\n        // We use a synchronous AJAX request here as a blob is already in\n        // memory - it's not making a network request.  This will generate a warning\n        // in the browser console, but there has already been an error so that's not\n        // that much of an issue.\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', element.url, false);\n        xhr.send(null);\n\n        // If we failed to download the source, skip this patch\n        if (xhr.status === 200) {\n          var source = xhr.responseText || '';\n\n          // We trim the source down to the last 300 characters as sourceMappingURL is always at the end of the file.\n          // Why 300? To be in line with: https://github.com/getsentry/sentry/blob/4af29e8f2350e20c28a6933354e4f42437b4ba42/src/sentry/lang/javascript/processor.py#L164-L175\n          source = source.slice(-300);\n\n          // Now we dig out the source map URL\n          var sourceMaps = source.match(/\\/\\/# sourceMappingURL=(.*)$/);\n\n          // If we don't find a source map comment or we find more than one, continue on to the next element.\n          if (sourceMaps) {\n            var sourceMapAddress = sourceMaps[1];\n\n            // Now we check to see if it's a relative URL.\n            // If it is, convert it to an absolute one.\n            if (sourceMapAddress.charAt(0) === '~') {\n              sourceMapAddress = getLocationOrigin() + sourceMapAddress.slice(1);\n            }\n\n            // Now we strip the '.map' off of the end of the URL and update the\n            // element so that Sentry can match the map to the blob.\n            element.url = sourceMapAddress.slice(0, -4);\n          }\n        }\n      }\n\n      stack.push(element);\n    }\n\n    if (!stack.length) {\n      return null;\n    }\n\n    return {\n      name: ex.name,\n      message: ex.message,\n      url: getLocationHref(),\n      stack: stack\n    };\n  }\n\n  /**\n   * Adds information about the first frame to incomplete stack traces.\n   * Safari and IE require this to get complete data on the first frame.\n   * @param {Object.<string, *>} stackInfo Stack trace information from\n   * one of the compute* methods.\n   * @param {string} url The URL of the script that caused an error.\n   * @param {(number|string)} lineNo The line number of the script that\n   * caused an error.\n   * @param {string=} message The error generated by the browser, which\n   * hopefully contains the name of the object that caused the error.\n   * @return {boolean} Whether or not the stack information was\n   * augmented.\n   */\n  function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n    var initial = {\n      url: url,\n      line: lineNo\n    };\n\n    if (initial.url && initial.line) {\n      stackInfo.incomplete = false;\n\n      if (!initial.func) {\n        initial.func = UNKNOWN_FUNCTION;\n      }\n\n      if (stackInfo.stack.length > 0) {\n        if (stackInfo.stack[0].url === initial.url) {\n          if (stackInfo.stack[0].line === initial.line) {\n            return false; // already in stack trace\n          } else if (\n            !stackInfo.stack[0].line &&\n            stackInfo.stack[0].func === initial.func\n          ) {\n            stackInfo.stack[0].line = initial.line;\n            return false;\n          }\n        }\n      }\n\n      stackInfo.stack.unshift(initial);\n      stackInfo.partial = true;\n      return true;\n    } else {\n      stackInfo.incomplete = true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Computes stack trace information by walking the arguments.caller\n   * chain at the time the exception occurred. This will cause earlier\n   * frames to be missed but is the only way to get any stack trace in\n   * Safari and IE. The top frame is restored by\n   * {@link augmentStackTraceWithInitialElement}.\n   * @param {Error} ex\n   * @return {?Object.<string, *>} Stack trace information.\n   */\n  function computeStackTraceByWalkingCallerChain(ex, depth) {\n    var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n      stack = [],\n      funcs = {},\n      recursion = false,\n      parts,\n      item,\n      source;\n\n    for (\n      var curr = computeStackTraceByWalkingCallerChain.caller;\n      curr && !recursion;\n      curr = curr.caller\n    ) {\n      if (curr === computeStackTrace || curr === TraceKit.report) {\n        // console.log('skipping internal function');\n        continue;\n      }\n\n      item = {\n        url: null,\n        func: UNKNOWN_FUNCTION,\n        line: null,\n        column: null\n      };\n\n      if (curr.name) {\n        item.func = curr.name;\n      } else if ((parts = functionName.exec(curr.toString()))) {\n        item.func = parts[1];\n      }\n\n      if (typeof item.func === 'undefined') {\n        try {\n          item.func = parts.input.substring(0, parts.input.indexOf('{'));\n        } catch (e) {}\n      }\n\n      if (funcs['' + curr]) {\n        recursion = true;\n      } else {\n        funcs['' + curr] = true;\n      }\n\n      stack.push(item);\n    }\n\n    if (depth) {\n      // console.log('depth is ' + depth);\n      // console.log('stack is ' + stack.length);\n      stack.splice(0, depth);\n    }\n\n    var result = {\n      name: ex.name,\n      message: ex.message,\n      url: getLocationHref(),\n      stack: stack\n    };\n    augmentStackTraceWithInitialElement(\n      result,\n      ex.sourceURL || ex.fileName,\n      ex.line || ex.lineNumber,\n      ex.message || ex.description\n    );\n    return result;\n  }\n\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   */\n  function computeStackTrace(ex, depth) {\n    var stack = null;\n    depth = depth == null ? 0 : +depth;\n\n    try {\n      stack = computeStackTraceFromStackProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (TraceKit.debug) {\n        throw e;\n      }\n    }\n\n    try {\n      stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (TraceKit.debug) {\n        throw e;\n      }\n    }\n    return {\n      name: ex.name,\n      message: ex.message,\n      url: getLocationHref()\n    };\n  }\n\n  computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n  computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\n  return computeStackTrace;\n})();\n\nmodule.exports = TraceKit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/vendor/TraceKit/tracekit.js\n// module id = 460\n// module chunks = 0","/*\n json-stringify-safe\n Like JSON.stringify, but doesn't throw on circular references.\n\n Originally forked from https://github.com/isaacs/json-stringify-safe\n version 5.0.1 on 3/8/2017 and modified to handle Errors serialization\n and IE8 compatibility. Tests for this are in test/vendor.\n\n ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE\n*/\n\nexports = module.exports = stringify;\nexports.getSerialize = serializer;\n\nfunction indexOf(haystack, needle) {\n  for (var i = 0; i < haystack.length; ++i) {\n    if (haystack[i] === needle) return i;\n  }\n  return -1;\n}\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);\n}\n\n// https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106\nfunction stringifyError(value) {\n  var err = {\n    // These properties are implemented as magical getters and don't show up in for in\n    stack: value.stack,\n    message: value.message,\n    name: value.name\n  };\n\n  for (var i in value) {\n    if (Object.prototype.hasOwnProperty.call(value, i)) {\n      err[i] = value[i];\n    }\n  }\n\n  return err;\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [];\n  var keys = [];\n\n  if (cycleReplacer == null) {\n    cycleReplacer = function(key, value) {\n      if (stack[0] === value) {\n        return '[Circular ~]';\n      }\n      return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']';\n    };\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = indexOf(stack, this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n\n      if (~indexOf(stack, value)) {\n        value = cycleReplacer.call(this, key, value);\n      }\n    } else {\n      stack.push(value);\n    }\n\n    return replacer == null\n      ? value instanceof Error ? stringifyError(value) : value\n      : replacer.call(this, key, value);\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/vendor/json-stringify-safe/stringify.js\n// module id = 214\n// module chunks = 0","/*\n * JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/*\n* Add integers, wrapping at 2^32. This uses 16-bit operations internally\n* to work around bugs in some JS interpreters.\n*/\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xffff);\n}\n\n/*\n* Bitwise rotate a 32-bit number to the left.\n*/\nfunction bitRotateLeft(num, cnt) {\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n* These functions implement the four basic operations the algorithm uses.\n*/\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn((b & c) | (~b & d), a, b, x, s, t);\n}\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\n/*\n* Calculate the MD5 of an array of little-endian words, and a bit length.\n*/\nfunction binlMD5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << (len % 32);\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n  var i;\n  var olda;\n  var oldb;\n  var oldc;\n  var oldd;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (i = 0; i < x.length; i += 16) {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n  return [a, b, c, d];\n}\n\n/*\n* Convert an array of little-endian words to a string\n*/\nfunction binl2rstr(input) {\n  var i;\n  var output = '';\n  var length32 = input.length * 32;\n  for (i = 0; i < length32; i += 8) {\n    output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff);\n  }\n  return output;\n}\n\n/*\n* Convert a raw string to an array of little-endian words\n* Characters >255 have their high-byte silently ignored.\n*/\nfunction rstr2binl(input) {\n  var i;\n  var output = [];\n  output[(input.length >> 2) - 1] = undefined;\n  for (i = 0; i < output.length; i += 1) {\n    output[i] = 0;\n  }\n  var length8 = input.length * 8;\n  for (i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32);\n  }\n  return output;\n}\n\n/*\n* Calculate the MD5 of a raw string\n*/\nfunction rstrMD5(s) {\n  return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));\n}\n\n/*\n* Calculate the HMAC-MD5, of a key and some data (raw strings)\n*/\nfunction rstrHMACMD5(key, data) {\n  var i;\n  var bkey = rstr2binl(key);\n  var ipad = [];\n  var opad = [];\n  var hash;\n  ipad[15] = opad[15] = undefined;\n  if (bkey.length > 16) {\n    bkey = binlMD5(bkey, key.length * 8);\n  }\n  for (i = 0; i < 16; i += 1) {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5c5c5c5c;\n  }\n  hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\n  return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));\n}\n\n/*\n* Convert a raw string to a hex string\n*/\nfunction rstr2hex(input) {\n  var hexTab = '0123456789abcdef';\n  var output = '';\n  var x;\n  var i;\n  for (i = 0; i < input.length; i += 1) {\n    x = input.charCodeAt(i);\n    output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);\n  }\n  return output;\n}\n\n/*\n* Encode a string as utf-8\n*/\nfunction str2rstrUTF8(input) {\n  return unescape(encodeURIComponent(input));\n}\n\n/*\n* Take string arguments and return either raw or hex encoded strings\n*/\nfunction rawMD5(s) {\n  return rstrMD5(str2rstrUTF8(s));\n}\nfunction hexMD5(s) {\n  return rstr2hex(rawMD5(s));\n}\nfunction rawHMACMD5(k, d) {\n  return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));\n}\nfunction hexHMACMD5(k, d) {\n  return rstr2hex(rawHMACMD5(k, d));\n}\n\nfunction md5(string, key, raw) {\n  if (!key) {\n    if (!raw) {\n      return hexMD5(string);\n    }\n    return rawMD5(string);\n  }\n  if (!raw) {\n    return hexHMACMD5(key, string);\n  }\n  return rawHMACMD5(key, string);\n}\n\nmodule.exports = md5;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raven-js/vendor/md5/md5.js\n// module id = 461\n// module chunks = 0"],"sourceRoot":""}